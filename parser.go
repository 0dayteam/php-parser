//line parser.y:2
package main

import __yyfmt__ "fmt"

//line parser.y:2
import (
	"bytes"
	"fmt"
	"io"
	"os"
)

type node struct {
	name       string
	children   []node
	attributes map[string]string
}

func (n node) String() string {
	buf := new(bytes.Buffer)
	n.print(buf, " ")
	return buf.String()
}

func (n node) print(out io.Writer, indent string) {
	if len(n.attributes) > 0 {
		fmt.Fprintf(out, "\n%v%v %s", indent, n.name, n.attributes)
	} else {
		fmt.Fprintf(out, "\n%v%v", indent, n.name)
	}
	for _, nn := range n.children {
		nn.print(out, indent+"  ")
	}
}

func Node(name string) node {
	return node{name: name, attributes: make(map[string]string)}
}

func (n node) append(nn ...node) node {
	n.children = append(n.children, nn...)
	return n
}

func (n node) attribute(key string, value string) node {
	n.attributes[key] = value
	return n
}

//line parser.y:50
type yySymType struct {
	yys   int
	node  node
	token string
	value string
}

const T_INCLUDE = 57346
const T_INCLUDE_ONCE = 57347
const T_EVAL = 57348
const T_REQUIRE = 57349
const T_REQUIRE_ONCE = 57350
const T_LOGICAL_OR = 57351
const T_LOGICAL_XOR = 57352
const T_LOGICAL_AND = 57353
const T_PRINT = 57354
const T_YIELD = 57355
const T_DOUBLE_ARROW = 57356
const T_YIELD_FROM = 57357
const T_PLUS_EQUAL = 57358
const T_MINUS_EQUAL = 57359
const T_MUL_EQUAL = 57360
const T_DIV_EQUAL = 57361
const T_CONCAT_EQUAL = 57362
const T_MOD_EQUAL = 57363
const T_AND_EQUAL = 57364
const T_OR_EQUAL = 57365
const T_XOR_EQUAL = 57366
const T_SL_EQUAL = 57367
const T_SR_EQUAL = 57368
const T_POW_EQUAL = 57369
const T_COALESCE = 57370
const T_BOOLEAN_OR = 57371
const T_BOOLEAN_AND = 57372
const T_IS_EQUAL = 57373
const T_IS_NOT_EQUAL = 57374
const T_IS_IDENTICAL = 57375
const T_IS_NOT_IDENTICAL = 57376
const T_SPACESHIP = 57377
const T_IS_SMALLER_OR_EQUAL = 57378
const T_IS_GREATER_OR_EQUAL = 57379
const T_SL = 57380
const T_SR = 57381
const T_INSTANCEOF = 57382
const T_INC = 57383
const T_DEC = 57384
const T_INT_CAST = 57385
const T_DOUBLE_CAST = 57386
const T_STRING_CAST = 57387
const T_ARRAY_CAST = 57388
const T_OBJECT_CAST = 57389
const T_BOOL_CAST = 57390
const T_UNSET_CAST = 57391
const T_POW = 57392
const T_NEW = 57393
const T_CLONE = 57394
const T_NOELSE = 57395
const T_ELSEIF = 57396
const T_ELSE = 57397
const T_ENDIF = 57398
const T_STATIC = 57399
const T_ABSTRACT = 57400
const T_FINAL = 57401
const T_PRIVATE = 57402
const T_PROTECTED = 57403
const T_PUBLIC = 57404
const T_EXIT = 57405
const T_IF = 57406
const T_LNUMBER = 57407
const T_DNUMBER = 57408
const T_STRING = 57409
const T_STRING_VARNAME = 57410
const T_VARIABLE = 57411
const T_NUM_STRING = 57412
const T_INLINE_HTML = 57413
const T_CHARACTER = 57414
const T_BAD_CHARACTER = 57415
const T_ENCAPSED_AND_WHITESPACE = 57416
const T_CONSTANT_ENCAPSED_STRING = 57417
const T_ECHO = 57418
const T_DO = 57419
const T_WHILE = 57420
const T_ENDWHILE = 57421
const T_FOR = 57422
const T_ENDFOR = 57423
const T_FOREACH = 57424
const T_ENDFOREACH = 57425
const T_DECLARE = 57426
const T_ENDDECLARE = 57427
const T_AS = 57428
const T_SWITCH = 57429
const T_ENDSWITCH = 57430
const T_CASE = 57431
const T_DEFAULT = 57432
const T_BREAK = 57433
const T_CONTINUE = 57434
const T_GOTO = 57435
const T_FUNCTION = 57436
const T_CONST = 57437
const T_RETURN = 57438
const T_TRY = 57439
const T_CATCH = 57440
const T_FINALLY = 57441
const T_THROW = 57442
const T_USE = 57443
const T_INSTEADOF = 57444
const T_GLOBAL = 57445
const T_VAR = 57446
const T_UNSET = 57447
const T_ISSET = 57448
const T_EMPTY = 57449
const T_HALT_COMPILER = 57450
const T_CLASS = 57451
const T_TRAIT = 57452
const T_INTERFACE = 57453
const T_EXTENDS = 57454
const T_IMPLEMENTS = 57455
const T_OBJECT_OPERATOR = 57456
const T_LIST = 57457
const T_ARRAY = 57458
const T_CALLABLE = 57459
const T_CLASS_C = 57460
const T_TRAIT_C = 57461
const T_METHOD_C = 57462
const T_FUNC_C = 57463
const T_LINE = 57464
const T_FILE = 57465
const T_COMMENT = 57466
const T_DOC_COMMENT = 57467
const T_OPEN_TAG = 57468
const T_OPEN_TAG_WITH_ECHO = 57469
const T_CLOSE_TAG = 57470
const T_WHITESPACE = 57471
const T_START_HEREDOC = 57472
const T_END_HEREDOC = 57473
const T_DOLLAR_OPEN_CURLY_BRACES = 57474
const T_CURLY_OPEN = 57475
const T_PAAMAYIM_NEKUDOTAYIM = 57476
const T_NAMESPACE = 57477
const T_NS_C = 57478
const T_DIR = 57479
const T_NS_SEPARATOR = 57480
const T_ELLIPSIS = 57481

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"T_INCLUDE",
	"T_INCLUDE_ONCE",
	"T_EVAL",
	"T_REQUIRE",
	"T_REQUIRE_ONCE",
	"','",
	"T_LOGICAL_OR",
	"T_LOGICAL_XOR",
	"T_LOGICAL_AND",
	"T_PRINT",
	"T_YIELD",
	"T_DOUBLE_ARROW",
	"T_YIELD_FROM",
	"'='",
	"T_PLUS_EQUAL",
	"T_MINUS_EQUAL",
	"T_MUL_EQUAL",
	"T_DIV_EQUAL",
	"T_CONCAT_EQUAL",
	"T_MOD_EQUAL",
	"T_AND_EQUAL",
	"T_OR_EQUAL",
	"T_XOR_EQUAL",
	"T_SL_EQUAL",
	"T_SR_EQUAL",
	"T_POW_EQUAL",
	"'?'",
	"':'",
	"T_COALESCE",
	"T_BOOLEAN_OR",
	"T_BOOLEAN_AND",
	"'|'",
	"'^'",
	"'&'",
	"T_IS_EQUAL",
	"T_IS_NOT_EQUAL",
	"T_IS_IDENTICAL",
	"T_IS_NOT_IDENTICAL",
	"T_SPACESHIP",
	"'<'",
	"T_IS_SMALLER_OR_EQUAL",
	"'>'",
	"T_IS_GREATER_OR_EQUAL",
	"T_SL",
	"T_SR",
	"'+'",
	"'-'",
	"'.'",
	"'*'",
	"'/'",
	"'%'",
	"'!'",
	"T_INSTANCEOF",
	"'~'",
	"T_INC",
	"T_DEC",
	"T_INT_CAST",
	"T_DOUBLE_CAST",
	"T_STRING_CAST",
	"T_ARRAY_CAST",
	"T_OBJECT_CAST",
	"T_BOOL_CAST",
	"T_UNSET_CAST",
	"'@'",
	"T_POW",
	"'['",
	"T_NEW",
	"T_CLONE",
	"T_NOELSE",
	"T_ELSEIF",
	"T_ELSE",
	"T_ENDIF",
	"T_STATIC",
	"T_ABSTRACT",
	"T_FINAL",
	"T_PRIVATE",
	"T_PROTECTED",
	"T_PUBLIC",
	"T_EXIT",
	"T_IF",
	"T_LNUMBER",
	"T_DNUMBER",
	"T_STRING",
	"T_STRING_VARNAME",
	"T_VARIABLE",
	"T_NUM_STRING",
	"T_INLINE_HTML",
	"T_CHARACTER",
	"T_BAD_CHARACTER",
	"T_ENCAPSED_AND_WHITESPACE",
	"T_CONSTANT_ENCAPSED_STRING",
	"T_ECHO",
	"T_DO",
	"T_WHILE",
	"T_ENDWHILE",
	"T_FOR",
	"T_ENDFOR",
	"T_FOREACH",
	"T_ENDFOREACH",
	"T_DECLARE",
	"T_ENDDECLARE",
	"T_AS",
	"T_SWITCH",
	"T_ENDSWITCH",
	"T_CASE",
	"T_DEFAULT",
	"T_BREAK",
	"T_CONTINUE",
	"T_GOTO",
	"T_FUNCTION",
	"T_CONST",
	"T_RETURN",
	"T_TRY",
	"T_CATCH",
	"T_FINALLY",
	"T_THROW",
	"T_USE",
	"T_INSTEADOF",
	"T_GLOBAL",
	"T_VAR",
	"T_UNSET",
	"T_ISSET",
	"T_EMPTY",
	"T_HALT_COMPILER",
	"T_CLASS",
	"T_TRAIT",
	"T_INTERFACE",
	"T_EXTENDS",
	"T_IMPLEMENTS",
	"T_OBJECT_OPERATOR",
	"T_LIST",
	"T_ARRAY",
	"T_CALLABLE",
	"T_CLASS_C",
	"T_TRAIT_C",
	"T_METHOD_C",
	"T_FUNC_C",
	"T_LINE",
	"T_FILE",
	"T_COMMENT",
	"T_DOC_COMMENT",
	"T_OPEN_TAG",
	"T_OPEN_TAG_WITH_ECHO",
	"T_CLOSE_TAG",
	"T_WHITESPACE",
	"T_START_HEREDOC",
	"T_END_HEREDOC",
	"T_DOLLAR_OPEN_CURLY_BRACES",
	"T_CURLY_OPEN",
	"T_PAAMAYIM_NEKUDOTAYIM",
	"T_NAMESPACE",
	"T_NS_C",
	"T_DIR",
	"T_NS_SEPARATOR",
	"T_ELLIPSIS",
	"'('",
	"')'",
	"';'",
	"'{'",
	"'}'",
	"']'",
	"'\"'",
	"'$'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1203
const src = `<?php
$a instanceof \Test;
new $Test[]();
`

func main() {
	yyDebug = 0
	yyErrorVerbose = true
	l := newLexer(bytes.NewBufferString(src), os.Stdout, "file.name")
	yyParse(l)
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 43,
	69, 416,
	133, 416,
	153, 416,
	162, 416,
	-2, 425,
	-1, 47,
	159, 419,
	-2, 448,
	-1, 84,
	69, 418,
	133, 418,
	153, 418,
	159, 421,
	162, 418,
	-2, 391,
	-1, 100,
	153, 412,
	-2, 408,
	-1, 213,
	69, 416,
	133, 416,
	153, 416,
	162, 416,
	-2, 318,
	-1, 216,
	159, 421,
	-2, 418,
	-1, 217,
	69, 416,
	133, 416,
	153, 416,
	162, 416,
	-2, 320,
	-1, 334,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 342,
	-1, 335,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 343,
	-1, 336,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 344,
	-1, 337,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 345,
	-1, 338,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 346,
	-1, 339,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 347,
	-1, 340,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 348,
	-1, 341,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 349,
	-1, 342,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 350,
	-1, 349,
	9, 219,
	160, 219,
	-2, 416,
	-1, 389,
	69, 417,
	133, 417,
	153, 417,
	159, 420,
	162, 417,
	-2, 352,
	-1, 394,
	159, 439,
	-2, 409,
	-1, 396,
	159, 441,
	-2, 457,
	-1, 474,
	159, 439,
	-2, 410,
	-1, 476,
	159, 441,
	-2, 458,
	-1, 506,
	9, 202,
	160, 202,
	164, 202,
	-2, 416,
	-1, 541,
	160, 282,
	-2, 287,
	-1, 559,
	159, 420,
	-2, 417,
	-1, 615,
	15, 190,
	160, 190,
	-2, 416,
	-1, 641,
	88, 261,
	-2, 267,
	-1, 667,
	9, 201,
	160, 201,
	164, 201,
	-2, 416,
	-1, 688,
	15, 191,
	160, 191,
	-2, 416,
	-1, 738,
	15, 193,
	160, 193,
	-2, 423,
	-1, 803,
	105, 76,
	-2, 78,
	-1, 821,
	160, 282,
	-2, 287,
}

const yyPrivate = 57344

const yyLast = 6936

var yyAct = [...]int{

	27, 124, 754, 742, 623, 100, 548, 643, 400, 795,
	753, 733, 770, 627, 703, 181, 120, 536, 546, 614,
	625, 131, 131, 131, 303, 105, 143, 596, 681, 295,
	670, 597, 4, 84, 178, 628, 109, 115, 348, 267,
	543, 265, 80, 499, 142, 357, 299, 126, 384, 8,
	136, 212, 122, 43, 218, 219, 220, 221, 222, 139,
	395, 224, 225, 119, 227, 228, 229, 230, 231, 232,
	233, 234, 235, 236, 2, 237, 238, 239, 298, 296,
	478, 7, 5, 253, 477, 216, 216, 297, 738, 121,
	6, 248, 130, 662, 214, 214, 243, 659, 82, 563,
	98, 555, 651, 503, 269, 213, 217, 272, 851, 852,
	843, 276, 277, 783, 133, 134, 805, 728, 729, 581,
	766, 763, 761, 721, 582, 790, 301, 610, 750, 305,
	306, 771, 273, 289, 275, 741, 715, 700, 385, 282,
	98, 634, 288, 547, 111, 508, 317, 318, 319, 320,
	321, 322, 323, 324, 325, 326, 327, 328, 329, 330,
	331, 332, 333, 334, 335, 336, 337, 338, 339, 340,
	341, 342, 773, 344, 346, 98, 350, 248, 99, 352,
	359, 261, 263, 79, 245, 278, 647, 648, 649, 646,
	645, 644, 728, 729, 367, 369, 370, 371, 372, 373,
	374, 375, 376, 377, 378, 379, 380, 137, 216, 381,
	131, 383, 480, 580, 386, 108, 388, 214, 99, 363,
	110, 672, 285, 177, 390, 508, 846, 391, 349, 316,
	640, 508, 313, 642, 209, 831, 508, 311, 291, 285,
	132, 131, 825, 824, 394, 474, 811, 727, 291, 259,
	111, 779, 98, 99, 757, 758, 492, 844, 609, 774,
	496, 772, 767, 500, 725, 269, 351, 713, 343, 249,
	245, 821, 685, 804, 254, 687, 482, 789, 684, 489,
	749, 682, 680, 260, 647, 648, 649, 646, 645, 644,
	216, 677, 247, 523, 527, 512, 483, 509, 211, 214,
	289, 600, 382, 475, 216, 481, 502, 594, 4, 515,
	494, 518, 519, 214, 365, 532, 354, 143, 127, 309,
	308, 106, 307, 279, 506, 8, 832, 210, 640, 778,
	99, 642, 484, 393, 486, 777, 488, 255, 256, 768,
	762, 488, 486, 695, 522, 669, 535, 665, 612, 516,
	601, 495, 510, 587, 274, 249, 111, 7, 5, 740,
	689, 533, 530, 550, 545, 551, 6, 549, 552, 553,
	668, 786, 616, 531, 513, 647, 648, 649, 646, 645,
	644, 315, 132, 262, 312, 541, 526, 558, 108, 310,
	290, 284, 111, 562, 98, 387, 111, 524, 746, 539,
	565, 507, 542, 364, 618, 631, 632, 362, 147, 149,
	148, 132, 647, 648, 649, 646, 645, 644, 264, 640,
	686, 111, 642, 98, 127, 396, 476, 106, 172, 104,
	173, 145, 146, 150, 152, 151, 164, 165, 162, 163,
	166, 167, 168, 169, 170, 160, 161, 154, 155, 153,
	156, 158, 159, 226, 171, 223, 640, 208, 272, 642,
	127, 176, 748, 106, 127, 557, 157, 106, 175, 617,
	102, 174, 99, 129, 128, 125, 564, 107, 828, 479,
	287, 131, 569, 111, 242, 287, 287, 111, 544, 127,
	287, 241, 106, 358, 215, 137, 287, 111, 361, 709,
	826, 99, 586, 629, 114, 269, 589, 827, 269, 252,
	117, 118, 77, 78, 254, 302, 584, 647, 648, 649,
	646, 645, 644, 490, 693, 694, 663, 605, 305, 607,
	572, 570, 272, 254, 289, 611, 598, 595, 521, 704,
	4, 815, 514, 518, 588, 518, 785, 630, 286, 592,
	549, 635, 606, 140, 116, 603, 566, 8, 517, 111,
	111, 640, 716, 183, 642, 578, 650, 123, 283, 620,
	520, 216, 216, 568, 254, 111, 613, 255, 256, 489,
	214, 214, 664, 633, 655, 508, 500, 491, 254, 7,
	5, 349, 615, 258, 814, 485, 255, 256, 6, 356,
	706, 705, 117, 118, 636, 355, 678, 257, 631, 632,
	187, 671, 186, 661, 673, 185, 675, 598, 281, 269,
	518, 179, 171, 691, 216, 518, 518, 127, 676, 666,
	106, 188, 189, 214, 157, 630, 487, 255, 256, 683,
	775, 728, 729, 240, 667, 157, 549, 707, 576, 708,
	216, 255, 256, 701, 103, 45, 182, 710, 714, 214,
	690, 132, 698, 567, 743, 699, 387, 571, 712, 269,
	688, 111, 366, 98, 731, 728, 729, 180, 818, 104,
	791, 305, 711, 751, 574, 314, 577, 575, 718, 671,
	269, 598, 254, 184, 723, 292, 599, 250, 518, 651,
	518, 719, 630, 720, 674, 726, 722, 736, 113, 696,
	717, 730, 585, 732, 759, 537, 734, 744, 528, 747,
	102, 216, 755, 647, 648, 649, 646, 645, 644, 769,
	214, 737, 504, 1, 760, 246, 764, 776, 765, 127,
	58, 615, 106, 782, 215, 518, 781, 244, 81, 630,
	101, 99, 788, 498, 251, 255, 256, 784, 792, 360,
	112, 801, 280, 48, 800, 787, 190, 192, 191, 49,
	83, 573, 810, 73, 160, 161, 154, 155, 153, 156,
	158, 159, 809, 171, 850, 817, 156, 158, 159, 813,
	171, 798, 820, 799, 797, 157, 796, 801, 807, 794,
	800, 819, 157, 756, 823, 639, 752, 734, 702, 641,
	829, 830, 638, 637, 692, 780, 622, 619, 268, 835,
	266, 833, 347, 141, 138, 135, 836, 630, 608, 806,
	304, 841, 549, 837, 602, 840, 839, 15, 42, 14,
	147, 149, 148, 845, 41, 847, 47, 44, 848, 407,
	408, 409, 410, 411, 853, 412, 413, 414, 450, 451,
	172, 771, 173, 145, 146, 150, 152, 151, 164, 165,
	162, 163, 166, 167, 168, 169, 170, 160, 161, 154,
	155, 153, 156, 158, 159, 624, 171, 154, 155, 153,
	156, 158, 159, 626, 171, 37, 293, 3, 157, 398,
	745, 415, 697, 0, 0, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 416, 417, 0, 420, 421,
	422, 401, 402, 403, 404, 405, 406, 418, 419, 0,
	0, 397, 0, 98, 0, 0, 0, 0, 0, 0,
	423, 424, 425, 426, 427, 428, 429, 430, 431, 432,
	433, 453, 454, 455, 456, 457, 445, 446, 447, 448,
	449, 434, 435, 436, 437, 438, 439, 440, 441, 442,
	443, 444, 0, 465, 463, 464, 460, 461, 0, 452,
	458, 459, 466, 467, 469, 468, 470, 471, 0, 0,
	0, 772, 0, 60, 61, 62, 63, 64, 0, 462,
	473, 472, 74, 75, 0, 76, 0, 399, 0, 0,
	0, 99, 150, 152, 151, 164, 165, 162, 163, 166,
	167, 168, 169, 170, 160, 161, 154, 155, 153, 156,
	158, 159, 0, 171, 0, 0, 0, 0, 53, 54,
	0, 0, 0, 0, 55, 157, 56, 51, 52, 65,
	66, 67, 68, 69, 70, 71, 72, 0, 103, 85,
	50, 0, 0, 0, 0, 24, 77, 78, 0, 0,
	0, 0, 46, 86, 87, 35, 0, 98, 0, 26,
	0, 0, 0, 104, 25, 17, 16, 0, 18, 0,
	29, 0, 30, 0, 0, 19, 0, 0, 0, 20,
	21, 34, 36, 12, 22, 32, 0, 0, 33, 11,
	0, 23, 0, 28, 0, 59, 9, 38, 39, 40,
	0, 0, 0, 0, 102, 0, 95, 91, 92, 93,
	88, 89, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 10, 94, 90, 106, 0, 57, 148,
	31, 13, 593, 0, 97, 99, 60, 61, 62, 63,
	64, 0, 0, 0, 0, 74, 75, 172, 76, 173,
	145, 146, 150, 152, 151, 164, 165, 162, 163, 166,
	167, 168, 169, 170, 160, 161, 154, 155, 153, 156,
	158, 159, 0, 171, 0, 0, 0, 0, 0, 0,
	0, 53, 54, 0, 0, 157, 0, 55, 0, 56,
	51, 52, 65, 66, 67, 68, 69, 70, 71, 72,
	0, 103, 85, 50, 0, 0, 0, 0, 24, 77,
	78, 0, 0, 0, 0, 46, 86, 87, 35, 0,
	98, 0, 26, 0, 0, 0, 104, 25, 17, 16,
	0, 18, 0, 29, 0, 30, 0, 0, 19, 0,
	0, 0, 20, 21, 34, 36, 12, 22, 32, 0,
	0, 33, 11, 0, 23, 0, 28, 0, 59, 9,
	38, 39, 40, 0, 0, 0, 0, 102, 0, 95,
	91, 92, 93, 88, 89, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 10, 94, 90, 106,
	0, 57, 0, 31, 13, 511, 0, 97, 99, 60,
	61, 62, 63, 64, 0, 0, 0, 0, 74, 75,
	172, 76, 173, 145, 146, 150, 152, 151, 164, 165,
	162, 163, 166, 167, 168, 169, 170, 160, 161, 154,
	155, 153, 156, 158, 159, 0, 171, 0, 0, 0,
	0, 0, 0, 0, 53, 54, 0, 0, 157, 0,
	55, 0, 56, 51, 52, 65, 66, 67, 68, 69,
	70, 71, 72, 0, 103, 85, 50, 0, 0, 0,
	0, 24, 77, 78, 0, 0, 0, 0, 46, 86,
	87, 35, 0, 98, 0, 26, 0, 0, 0, 104,
	25, 17, 16, 0, 18, 0, 29, 0, 30, 0,
	0, 19, 0, 0, 0, 20, 21, 34, 36, 12,
	22, 32, 0, 0, 33, 11, 0, 23, 0, 28,
	0, 59, 9, 38, 39, 40, 0, 0, 0, 0,
	102, 0, 95, 91, 92, 93, 88, 89, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 10,
	94, 90, 106, 0, 57, 0, 31, 13, 392, 0,
	97, 99, 60, 61, 62, 63, 64, 0, 0, 0,
	0, 74, 75, 172, 76, 173, 145, 146, 150, 152,
	151, 164, 165, 162, 163, 166, 167, 168, 169, 170,
	160, 161, 154, 155, 153, 156, 158, 159, 0, 171,
	0, 0, 0, 0, 0, 0, 0, 53, 54, 0,
	0, 157, 0, 55, 0, 56, 51, 52, 65, 66,
	67, 68, 69, 70, 71, 72, 0, 103, 85, 50,
	0, 0, 0, 0, 24, 77, 78, 0, 0, 0,
	0, 46, 86, 87, 35, 0, 98, 0, 26, 0,
	0, 0, 104, 25, 17, 16, 0, 18, 0, 29,
	0, 30, 0, 0, 19, 0, 0, 0, 20, 21,
	34, 36, 0, 22, 32, 0, 0, 33, 0, 0,
	23, 0, 28, 0, 59, 300, 38, 39, 40, 0,
	0, 0, 0, 102, 0, 95, 91, 92, 93, 88,
	89, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 127, 94, 90, 106, 0, 57, 0, 31,
	13, 854, 0, 97, 99, 60, 61, 62, 63, 64,
	0, 0, 0, 0, 74, 75, 0, 76, 173, 145,
	146, 150, 152, 151, 164, 165, 162, 163, 166, 167,
	168, 169, 170, 160, 161, 154, 155, 153, 156, 158,
	159, 0, 171, 0, 0, 0, 0, 0, 0, 0,
	53, 54, 0, 0, 157, 0, 55, 0, 56, 51,
	52, 65, 66, 67, 68, 69, 70, 71, 72, 0,
	103, 85, 50, 0, 0, 0, 0, 24, 77, 78,
	0, 0, 0, 0, 46, 86, 87, 35, 0, 98,
	0, 26, 0, 0, 0, 104, 25, 17, 16, 0,
	18, 0, 29, 0, 30, 0, 0, 19, 0, 0,
	0, 20, 21, 34, 36, 0, 22, 32, 0, 0,
	33, 0, 0, 23, 0, 28, 0, 59, 300, 38,
	39, 40, 0, 0, 0, 0, 102, 0, 95, 91,
	92, 93, 88, 89, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 127, 94, 90, 106, 0,
	57, 0, 31, 13, 849, 0, 97, 99, 60, 61,
	62, 63, 64, 0, 0, 0, 0, 74, 75, 0,
	76, 146, 150, 152, 151, 164, 165, 162, 163, 166,
	167, 168, 169, 170, 160, 161, 154, 155, 153, 156,
	158, 159, 0, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 53, 54, 157, 0, 0, 0, 55,
	0, 56, 51, 52, 65, 66, 67, 68, 69, 70,
	71, 72, 0, 103, 85, 50, 0, 0, 0, 0,
	24, 77, 78, 0, 0, 0, 0, 46, 86, 87,
	35, 0, 98, 0, 26, 0, 0, 0, 104, 25,
	17, 16, 0, 18, 842, 29, 0, 30, 0, 0,
	19, 0, 0, 0, 20, 21, 34, 36, 0, 22,
	32, 0, 0, 33, 0, 0, 23, 0, 28, 0,
	59, 300, 38, 39, 40, 0, 0, 0, 0, 102,
	0, 95, 91, 92, 93, 88, 89, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 127, 94,
	90, 106, 0, 57, 0, 31, 13, 0, 0, 97,
	99, 60, 61, 62, 63, 64, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 152, 151, 164, 165,
	162, 163, 166, 167, 168, 169, 170, 160, 161, 154,
	155, 153, 156, 158, 159, 0, 171, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 53, 54, 157, 0,
	0, 0, 55, 0, 56, 51, 52, 65, 66, 67,
	68, 69, 70, 71, 72, 0, 103, 85, 50, 0,
	0, 0, 0, 24, 77, 78, 0, 0, 0, 0,
	46, 86, 87, 35, 0, 98, 0, 26, 0, 0,
	0, 104, 25, 17, 16, 0, 18, 0, 29, 0,
	30, 0, 0, 19, 0, 0, 0, 20, 21, 34,
	36, 0, 22, 32, 0, 0, 33, 0, 0, 23,
	0, 28, 0, 59, 300, 38, 39, 40, 0, 0,
	0, 0, 102, 0, 95, 91, 92, 93, 88, 89,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 127, 94, 90, 106, 0, 57, 0, 31, 13,
	834, 0, 97, 99, 60, 61, 62, 63, 64, 0,
	0, 0, 0, 74, 75, 0, 76, 151, 164, 165,
	162, 163, 166, 167, 168, 169, 170, 160, 161, 154,
	155, 153, 156, 158, 159, 0, 171, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 157, 53,
	54, 0, 0, 0, 0, 55, 0, 56, 51, 52,
	65, 66, 67, 68, 69, 70, 71, 72, 0, 103,
	85, 50, 0, 0, 0, 0, 24, 77, 78, 0,
	0, 0, 0, 46, 86, 87, 35, 0, 98, 0,
	26, 0, 0, 0, 104, 25, 17, 16, 0, 18,
	0, 29, 0, 30, 0, 0, 19, 0, 0, 0,
	20, 21, 34, 36, 0, 22, 32, 0, 0, 33,
	0, 0, 23, 0, 28, 0, 59, 300, 38, 39,
	40, 0, 0, 0, 0, 102, 0, 95, 91, 92,
	93, 88, 89, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 0, 127, 94, 90, 106, 0, 57,
	0, 31, 13, 816, 0, 97, 99, 60, 61, 62,
	63, 64, 0, 0, 0, 0, 74, 75, 0, 76,
	164, 165, 162, 163, 166, 167, 168, 169, 170, 160,
	161, 154, 155, 153, 156, 158, 159, 0, 171, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	157, 0, 53, 54, 0, 0, 0, 0, 55, 0,
	56, 51, 52, 65, 66, 67, 68, 69, 70, 71,
	72, 0, 103, 85, 50, 0, 0, 0, 0, 24,
	77, 78, 0, 0, 0, 0, 46, 86, 87, 35,
	0, 98, 0, 26, 0, 0, 0, 104, 25, 17,
	16, 0, 18, 0, 29, 812, 30, 0, 0, 19,
	0, 0, 0, 20, 21, 34, 36, 0, 22, 32,
	0, 0, 33, 0, 0, 23, 0, 28, 0, 59,
	300, 38, 39, 40, 0, 0, 0, 0, 102, 0,
	95, 91, 92, 93, 88, 89, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 127, 94, 90,
	106, 0, 57, 0, 31, 13, 0, 0, 97, 99,
	60, 61, 62, 63, 64, 0, 0, 0, 0, 74,
	75, 0, 76, 167, 168, 169, 170, 160, 161, 154,
	155, 153, 156, 158, 159, 0, 171, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 157, 0,
	0, 0, 0, 0, 0, 53, 54, 0, 0, 0,
	0, 55, 0, 56, 51, 52, 65, 66, 67, 68,
	69, 70, 71, 72, 0, 103, 85, 50, 0, 0,
	0, 0, 24, 77, 78, 0, 0, 0, 0, 46,
	86, 87, 35, 0, 98, 0, 26, 0, 0, 0,
	104, 25, 17, 16, 0, 18, 0, 29, 0, 30,
	739, 0, 19, 0, 0, 0, 20, 21, 34, 36,
	0, 22, 32, 0, 0, 33, 0, 0, 23, 0,
	28, 0, 59, 300, 38, 39, 40, 0, 0, 0,
	0, 102, 0, 95, 91, 92, 93, 88, 89, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	127, 94, 90, 106, 0, 57, 0, 31, 13, 0,
	0, 97, 99, 60, 61, 62, 63, 64, 0, 0,
	0, 0, 74, 75, 0, 76, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 194, 195, 196, 198, 199, 200, 201, 202, 203,
	204, 205, 197, 0, 0, 0, 0, 0, 53, 54,
	0, 0, 0, 0, 55, 0, 56, 51, 52, 65,
	66, 67, 68, 69, 70, 71, 72, 0, 103, 85,
	50, 206, 207, 0, 0, 24, 77, 78, 0, 0,
	0, 0, 46, 86, 87, 35, 0, 98, 0, 26,
	0, 0, 0, 104, 25, 17, 16, 724, 18, 0,
	29, 0, 30, 0, 0, 19, 0, 0, 0, 20,
	21, 34, 36, 0, 22, 32, 0, 0, 33, 0,
	0, 23, 0, 28, 0, 59, 300, 38, 39, 40,
	0, 0, 0, 0, 102, 0, 95, 91, 92, 93,
	88, 89, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 127, 94, 90, 106, 0, 57, 0,
	31, 13, 0, 0, 97, 99, 60, 61, 62, 63,
	64, 0, 0, 0, 0, 74, 75, 0, 76, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 53, 54, 0, 0, 0, 0, 55, 0, 56,
	51, 52, 65, 66, 67, 68, 69, 70, 71, 72,
	0, 103, 85, 50, 0, 0, 0, 654, 24, 77,
	78, 0, 0, 0, 0, 46, 86, 87, 35, 0,
	98, 0, 26, 0, 0, 0, 104, 25, 17, 16,
	0, 18, 0, 29, 0, 30, 0, 0, 19, 0,
	0, 0, 20, 21, 34, 36, 0, 22, 32, 0,
	0, 33, 0, 0, 23, 0, 28, 0, 59, 300,
	38, 39, 40, 0, 0, 0, 0, 102, 0, 95,
	91, 92, 93, 88, 89, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 127, 94, 90, 106,
	0, 57, 0, 31, 13, 0, 0, 97, 99, 60,
	61, 62, 63, 64, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 53, 54, 0, 0, 0, 0,
	55, 0, 56, 51, 52, 65, 66, 67, 68, 69,
	70, 71, 72, 0, 103, 85, 50, 0, 0, 0,
	0, 24, 77, 78, 0, 0, 0, 0, 46, 86,
	87, 35, 0, 98, 0, 26, 0, 0, 0, 104,
	25, 17, 16, 0, 18, 0, 29, 0, 30, 0,
	0, 19, 0, 0, 0, 20, 21, 34, 36, 0,
	22, 32, 0, 0, 33, 0, 0, 23, 0, 28,
	0, 59, 300, 38, 39, 40, 0, 0, 0, 0,
	102, 0, 95, 91, 92, 93, 88, 89, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 127,
	94, 90, 106, 0, 57, 0, 31, 13, 540, 0,
	97, 99, 60, 61, 62, 63, 64, 0, 0, 0,
	0, 74, 75, 0, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 53, 54, 0,
	0, 0, 0, 55, 0, 56, 51, 52, 65, 66,
	67, 68, 69, 70, 71, 72, 0, 103, 85, 50,
	0, 0, 0, 0, 24, 77, 78, 0, 0, 0,
	0, 46, 86, 87, 35, 0, 98, 0, 26, 0,
	0, 0, 104, 25, 17, 16, 0, 18, 0, 29,
	0, 30, 0, 0, 19, 0, 0, 0, 20, 21,
	34, 36, 0, 22, 32, 0, 0, 33, 0, 0,
	23, 0, 28, 0, 59, 300, 38, 39, 40, 0,
	0, 0, 0, 102, 0, 95, 91, 92, 93, 88,
	89, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 127, 94, 90, 106, 0, 57, 0, 31,
	13, 294, 0, 97, 99, 60, 61, 62, 63, 64,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 54, 0, 0, 0, 0, 55, 0, 56, 51,
	52, 65, 66, 67, 68, 69, 70, 71, 72, 0,
	103, 85, 50, 0, 0, 0, 0, 24, 77, 78,
	0, 0, 0, 0, 46, 86, 87, 35, 0, 98,
	0, 26, 0, 0, 0, 104, 25, 17, 16, 0,
	18, 0, 29, 0, 30, 0, 0, 19, 0, 0,
	0, 20, 21, 34, 36, 0, 22, 32, 0, 0,
	33, 0, 0, 23, 0, 28, 0, 59, 300, 38,
	39, 40, 0, 0, 0, 0, 102, 0, 95, 91,
	92, 93, 88, 89, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 127, 94, 90, 106, 0,
	57, 0, 31, 13, 149, 148, 97, 99, 407, 408,
	409, 410, 411, 0, 412, 413, 414, 450, 451, 0,
	0, 0, 0, 172, 0, 173, 145, 146, 150, 152,
	151, 164, 165, 162, 163, 166, 167, 168, 169, 170,
	160, 161, 154, 155, 153, 156, 158, 159, 0, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	415, 157, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 416, 417, 0, 420, 421, 422,
	401, 402, 403, 404, 405, 406, 418, 419, 0, 0,
	803, 0, 0, 0, 0, 0, 0, 0, 0, 423,
	424, 425, 426, 427, 428, 429, 430, 431, 432, 433,
	453, 454, 455, 456, 457, 445, 446, 447, 448, 449,
	434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	444, 0, 465, 463, 464, 460, 461, 0, 452, 458,
	459, 466, 467, 469, 468, 470, 471, 407, 408, 409,
	410, 411, 0, 412, 413, 414, 450, 451, 802, 473,
	472, 106, 0, 0, 0, 0, 0, 822, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 415,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 416, 417, 0, 420, 421, 422, 401,
	402, 403, 404, 405, 406, 418, 419, 0, 0, 803,
	0, 0, 0, 0, 0, 0, 0, 0, 423, 424,
	425, 426, 427, 428, 429, 430, 431, 432, 433, 453,
	454, 455, 456, 457, 445, 446, 447, 448, 449, 434,
	435, 436, 437, 438, 439, 440, 441, 442, 443, 444,
	0, 465, 463, 464, 460, 461, 0, 452, 458, 459,
	466, 467, 469, 468, 470, 471, 0, 0, 0, 0,
	0, 0, 60, 61, 62, 63, 64, 802, 473, 472,
	106, 74, 75, 0, 76, 0, 793, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 735,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 53, 54, 0,
	0, 0, 0, 55, 0, 56, 51, 52, 65, 66,
	67, 68, 69, 70, 71, 72, 0, 103, 85, 50,
	0, 0, 0, 0, 24, 0, 0, 0, 0, 0,
	0, 46, 86, 87, 35, 0, 98, 0, 26, 0,
	0, 0, 104, 25, 17, 16, 0, 18, 0, 29,
	0, 30, 0, 0, 19, 0, 0, 0, 20, 21,
	34, 0, 0, 22, 32, 0, 0, 33, 0, 0,
	23, 0, 28, 0, 59, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 0, 95, 91, 92, 93, 88,
	89, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 127, 94, 90, 106, 0, 57, 0, 31,
	13, 0, 0, 97, 99, 60, 61, 62, 63, 64,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 808, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 54, 0, 0, 0, 0, 55, 0, 56, 51,
	52, 65, 66, 67, 68, 69, 70, 71, 72, 0,
	103, 85, 50, 0, 0, 0, 0, 24, 0, 0,
	0, 0, 0, 0, 46, 86, 87, 35, 0, 98,
	0, 26, 0, 0, 0, 104, 25, 17, 16, 0,
	18, 0, 29, 0, 30, 0, 0, 19, 0, 0,
	0, 20, 21, 34, 0, 0, 22, 32, 0, 0,
	33, 0, 0, 23, 0, 28, 0, 59, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 0, 95, 91,
	92, 93, 88, 89, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 127, 94, 90, 106, 0,
	57, 0, 31, 13, 0, 0, 97, 99, 60, 61,
	62, 63, 64, 0, 0, 0, 0, 74, 75, 0,
	76, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 656, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 53, 54, 0, 0, 0, 0, 55,
	0, 56, 51, 52, 65, 66, 67, 68, 69, 70,
	71, 72, 0, 103, 85, 50, 0, 0, 0, 0,
	24, 0, 0, 0, 0, 0, 0, 46, 86, 87,
	35, 0, 98, 0, 26, 0, 0, 0, 104, 25,
	17, 16, 0, 18, 0, 29, 0, 30, 0, 0,
	19, 0, 0, 0, 20, 21, 34, 0, 0, 22,
	32, 0, 0, 33, 0, 0, 23, 0, 28, 0,
	59, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 95, 91, 92, 93, 88, 89, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 127, 94,
	90, 106, 0, 57, 0, 31, 13, 0, 0, 97,
	99, 60, 61, 62, 63, 64, 0, 0, 0, 0,
	74, 75, 0, 76, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 621, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 53, 54, 0, 0,
	0, 0, 55, 0, 56, 51, 52, 65, 66, 67,
	68, 69, 70, 71, 72, 0, 103, 85, 50, 0,
	0, 0, 0, 24, 0, 0, 0, 0, 0, 0,
	46, 86, 87, 35, 0, 98, 0, 26, 0, 0,
	0, 104, 25, 17, 16, 0, 18, 0, 29, 0,
	30, 0, 0, 19, 0, 0, 0, 20, 21, 34,
	0, 0, 22, 32, 0, 0, 33, 0, 0, 23,
	0, 28, 0, 59, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 0, 95, 91, 92, 93, 88, 89,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 127, 94, 90, 106, 0, 57, 0, 31, 13,
	0, 0, 97, 99, 60, 61, 62, 63, 64, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 53,
	54, 0, 0, 0, 0, 55, 0, 56, 51, 52,
	65, 66, 67, 68, 69, 70, 71, 72, 0, 103,
	85, 50, 0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 46, 86, 87, 35, 0, 98, 0,
	26, 0, 0, 0, 104, 25, 17, 16, 0, 18,
	0, 29, 0, 30, 0, 0, 19, 0, 0, 0,
	20, 21, 34, 0, 0, 22, 32, 0, 0, 33,
	0, 0, 23, 0, 28, 0, 59, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 0, 95, 91, 92,
	93, 88, 89, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 0, 127, 94, 90, 106, 0, 57,
	0, 31, 13, 0, 0, 97, 99, 60, 61, 62,
	63, 64, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 53, 54, 0, 0, 0, 0, 55, 0,
	56, 51, 52, 65, 66, 67, 68, 69, 70, 71,
	72, 0, 103, 85, 50, 0, 0, 0, 0, 24,
	0, 0, 0, 0, 0, 0, 46, 86, 87, 35,
	0, 98, 0, 26, 0, 0, 0, 104, 25, 17,
	16, 0, 18, 0, 29, 0, 30, 0, 0, 19,
	0, 0, 0, 20, 21, 34, 0, 0, 22, 32,
	0, 0, 33, 0, 0, 23, 0, 28, 0, 59,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 0,
	95, 91, 92, 93, 88, 89, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 127, 94, 90,
	106, 0, 57, 0, 31, 13, 0, 0, 97, 99,
	407, 408, 409, 410, 411, 0, 412, 413, 414, 450,
	451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 415, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 416, 417, 0, 420,
	421, 422, 401, 402, 403, 404, 405, 406, 418, 419,
	0, 0, 397, 0, 0, 0, 0, 0, 0, 0,
	0, 423, 424, 425, 426, 427, 428, 429, 430, 431,
	432, 433, 453, 454, 455, 456, 457, 445, 446, 447,
	448, 449, 434, 435, 436, 437, 438, 439, 440, 441,
	442, 443, 444, 0, 465, 463, 464, 460, 461, 0,
	452, 458, 459, 466, 467, 469, 468, 470, 471, 407,
	408, 409, 410, 411, 0, 412, 413, 414, 450, 451,
	462, 473, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 415, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 416, 417, 0, 420, 421,
	422, 647, 648, 649, 646, 645, 644, 418, 419, 0,
	0, 838, 0, 0, 0, 0, 0, 0, 0, 0,
	423, 424, 425, 426, 427, 428, 429, 430, 431, 432,
	433, 453, 454, 455, 456, 457, 445, 446, 447, 448,
	449, 434, 435, 436, 437, 438, 439, 440, 441, 442,
	443, 444, 0, 465, 463, 464, 460, 461, 0, 452,
	458, 459, 466, 467, 469, 468, 470, 471, 0, 0,
	0, 0, 0, 60, 61, 62, 63, 64, 0, 462,
	473, 472, 74, 75, 0, 76, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 53, 54,
	0, 0, 0, 0, 55, 0, 56, 51, 52, 65,
	66, 67, 68, 69, 70, 71, 72, 0, 103, 85,
	50, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 111, 0, 98, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 60, 61, 62,
	63, 64, 0, 0, 0, 59, 74, 75, 0, 76,
	0, 0, 0, 271, 102, 0, 95, 91, 92, 93,
	88, 89, 0, 0, 0, 0, 0, 0, 96, 0,
	590, 0, 0, 127, 94, 90, 106, 0, 57, 0,
	0, 0, 53, 54, 97, 99, 0, 0, 55, 0,
	56, 51, 52, 65, 66, 67, 68, 69, 70, 71,
	72, 0, 103, 85, 50, 0, 0, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 111,
	0, 98, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 60, 61, 62, 63, 64, 0, 0, 0, 59,
	74, 75, 0, 76, 0, 0, 0, 591, 102, 0,
	95, 91, 92, 93, 88, 89, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 127, 94, 90,
	106, 0, 57, 0, 0, 0, 53, 54, 97, 99,
	0, 0, 55, 0, 56, 51, 52, 65, 66, 67,
	68, 69, 70, 71, 72, 0, 103, 85, 50, 0,
	0, 0, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 111, 0, 98, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 60, 61, 62, 63, 64,
	0, 0, 0, 59, 74, 75, 0, 76, 0, 0,
	0, 0, 102, 0, 95, 91, 92, 93, 88, 89,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 127, 94, 90, 106, 501, 57, 497, 0, 0,
	53, 54, 97, 99, 0, 0, 55, 0, 56, 51,
	52, 65, 66, 67, 68, 69, 70, 71, 72, 0,
	103, 85, 50, 0, 0, 0, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 111, 0, 98,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	61, 62, 63, 64, 0, 0, 0, 59, 74, 75,
	0, 76, 0, 0, 0, 0, 102, 0, 95, 91,
	92, 93, 88, 89, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 127, 94, 90, 106, 501,
	57, 0, 0, 0, 53, 54, 97, 99, 0, 0,
	55, 0, 56, 51, 52, 65, 66, 67, 68, 69,
	70, 71, 72, 0, 103, 85, 50, 0, 0, 0,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 86,
	87, 111, 493, 98, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 60, 61, 62, 63, 64, 0, 0,
	0, 59, 74, 75, 0, 76, 0, 0, 0, 0,
	102, 0, 95, 91, 92, 93, 88, 89, 0, 0,
	0, 0, 0, 0, 96, 0, 368, 0, 0, 127,
	94, 90, 106, 0, 57, 0, 0, 0, 53, 54,
	97, 99, 0, 0, 55, 0, 56, 51, 52, 65,
	66, 67, 68, 69, 70, 71, 72, 0, 103, 85,
	50, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 111, 0, 98, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 60, 61, 62,
	63, 64, 0, 0, 0, 59, 74, 75, 0, 76,
	0, 0, 0, 0, 102, 0, 95, 91, 92, 93,
	88, 89, 0, 0, 345, 0, 0, 0, 96, 0,
	0, 0, 0, 127, 94, 90, 106, 0, 57, 0,
	0, 0, 53, 54, 97, 99, 0, 0, 55, 0,
	56, 51, 52, 65, 66, 67, 68, 69, 70, 71,
	72, 0, 103, 85, 50, 0, 0, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 111,
	0, 98, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 60, 61, 62, 63, 64, 0, 0, 0, 59,
	74, 75, 0, 76, 0, 0, 0, 0, 102, 0,
	95, 91, 92, 93, 88, 89, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 127, 94, 90,
	106, 0, 57, 0, 0, 0, 53, 54, 97, 99,
	0, 0, 55, 0, 56, 51, 52, 65, 66, 67,
	68, 69, 70, 71, 72, 0, 103, 85, 50, 0,
	147, 149, 148, 132, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 111, 0, 98, 0, 0, 0, 0,
	172, 104, 173, 145, 146, 150, 152, 151, 164, 165,
	162, 163, 166, 167, 168, 169, 170, 160, 161, 154,
	155, 153, 156, 158, 159, 0, 171, 0, 0, 0,
	0, 0, 0, 59, 0, 0, 0, 0, 157, 0,
	0, 0, 102, 0, 95, 91, 92, 93, 88, 89,
	0, 0, 0, 0, 0, 0, 96, 147, 149, 148,
	0, 127, 94, 90, 106, 0, 57, 0, 0, 0,
	0, 0, 97, 99, 0, 0, 0, 172, 0, 173,
	145, 146, 150, 152, 151, 164, 165, 162, 163, 166,
	167, 168, 169, 170, 160, 161, 154, 155, 153, 156,
	158, 159, 0, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 149, 148, 157, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 660, 173, 145, 146, 150, 152, 151,
	164, 165, 162, 163, 166, 167, 168, 169, 170, 160,
	161, 154, 155, 153, 156, 158, 159, 0, 171, 147,
	149, 148, 0, 0, 0, 0, 0, 0, 0, 0,
	157, 0, 0, 0, 0, 0, 0, 0, 0, 172,
	0, 173, 145, 146, 150, 152, 151, 164, 165, 162,
	163, 166, 167, 168, 169, 170, 160, 161, 154, 155,
	153, 156, 158, 159, 0, 171, 147, 149, 148, 0,
	658, 0, 0, 0, 0, 0, 0, 157, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 0, 173, 145,
	146, 150, 152, 151, 164, 165, 162, 163, 166, 167,
	168, 169, 170, 160, 161, 154, 155, 153, 156, 158,
	159, 0, 171, 147, 149, 148, 0, 0, 0, 0,
	0, 0, 0, 0, 157, 657, 0, 0, 0, 0,
	0, 0, 0, 172, 0, 173, 145, 146, 150, 152,
	151, 164, 165, 162, 163, 166, 167, 168, 169, 170,
	160, 161, 154, 155, 153, 156, 158, 159, 0, 171,
	147, 149, 148, 0, 0, 0, 0, 0, 0, 0,
	0, 157, 583, 0, 0, 0, 0, 0, 0, 0,
	172, 0, 173, 145, 146, 150, 152, 151, 164, 165,
	162, 163, 166, 167, 168, 169, 170, 160, 161, 154,
	155, 153, 156, 158, 159, 0, 171, 147, 149, 148,
	0, 0, 0, 0, 0, 0, 0, 0, 157, 579,
	0, 0, 0, 0, 0, 0, 0, 172, 0, 173,
	145, 146, 150, 152, 151, 164, 165, 162, 163, 166,
	167, 168, 169, 170, 160, 161, 154, 155, 153, 156,
	158, 159, 0, 171, 147, 149, 148, 0, 0, 0,
	0, 0, 0, 0, 0, 157, 556, 0, 0, 0,
	0, 0, 0, 0, 172, 0, 173, 145, 146, 150,
	152, 151, 164, 165, 162, 163, 166, 167, 168, 169,
	170, 160, 161, 154, 155, 153, 156, 158, 159, 0,
	171, 147, 149, 148, 0, 0, 0, 0, 0, 0,
	0, 353, 157, 0, 0, 0, 0, 0, 0, 0,
	0, 172, 0, 173, 145, 146, 150, 152, 151, 164,
	165, 162, 163, 166, 167, 168, 169, 170, 160, 161,
	154, 155, 153, 156, 158, 159, 0, 171, 147, 149,
	148, 0, 0, 0, 0, 0, 0, 0, 144, 157,
	0, 0, 0, 0, 0, 0, 0, 0, 172, 0,
	173, 145, 146, 150, 152, 151, 164, 165, 162, 163,
	166, 167, 168, 169, 170, 160, 161, 154, 155, 153,
	156, 158, 159, 0, 171, 147, 149, 148, 0, 0,
	0, 0, 0, 0, 679, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 172, 0, 173, 145, 146,
	150, 152, 151, 164, 165, 162, 163, 166, 167, 168,
	169, 170, 160, 161, 154, 155, 153, 156, 158, 159,
	0, 171, 147, 149, 148, 0, 0, 0, 0, 0,
	0, 653, 0, 157, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 0, 173, 145, 146, 150, 152, 151,
	164, 165, 162, 163, 166, 167, 168, 169, 170, 160,
	161, 154, 155, 153, 156, 158, 159, 0, 171, 147,
	149, 148, 0, 0, 0, 0, 0, 0, 652, 0,
	157, 0, 0, 0, 0, 0, 0, 0, 0, 172,
	0, 173, 145, 146, 150, 152, 151, 164, 165, 162,
	163, 166, 167, 168, 169, 170, 160, 161, 154, 155,
	153, 156, 158, 159, 0, 171, 147, 149, 148, 0,
	0, 0, 0, 0, 0, 561, 0, 157, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 0, 173, 145,
	146, 150, 152, 151, 164, 165, 162, 163, 166, 167,
	168, 169, 170, 160, 161, 154, 155, 153, 156, 158,
	159, 0, 171, 147, 149, 148, 0, 0, 0, 0,
	0, 0, 560, 0, 157, 0, 0, 0, 0, 0,
	0, 0, 0, 172, 0, 173, 145, 146, 150, 152,
	151, 164, 165, 162, 163, 166, 167, 168, 169, 170,
	160, 161, 154, 155, 153, 156, 158, 159, 0, 171,
	147, 149, 148, 0, 0, 0, 0, 0, 0, 559,
	0, 157, 0, 0, 0, 0, 0, 0, 0, 0,
	172, 0, 173, 145, 146, 150, 152, 151, 164, 165,
	162, 163, 166, 167, 168, 169, 170, 160, 161, 154,
	155, 153, 156, 158, 159, 0, 171, 147, 149, 148,
	0, 0, 0, 0, 0, 0, 554, 0, 157, 0,
	0, 0, 0, 0, 0, 0, 0, 172, 0, 173,
	145, 146, 150, 152, 151, 164, 165, 162, 163, 166,
	167, 168, 169, 170, 160, 161, 154, 155, 153, 156,
	158, 159, 0, 171, 147, 149, 148, 0, 0, 0,
	0, 0, 0, 529, 0, 157, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 0, 173, 145, 146, 150,
	152, 151, 164, 165, 162, 163, 166, 167, 168, 169,
	170, 160, 161, 154, 155, 153, 156, 158, 159, 0,
	171, 147, 149, 148, 0, 0, 0, 0, 0, 0,
	525, 0, 157, 0, 0, 0, 0, 0, 0, 0,
	0, 172, 534, 173, 145, 146, 150, 152, 151, 164,
	165, 162, 163, 166, 167, 168, 169, 170, 160, 161,
	154, 155, 153, 156, 158, 159, 0, 171, 0, 538,
	147, 149, 148, 0, 0, 505, 0, 389, 0, 157,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	172, 0, 173, 145, 146, 150, 152, 151, 164, 165,
	162, 163, 166, 167, 168, 169, 170, 160, 161, 154,
	155, 153, 156, 158, 159, 0, 171, 147, 149, 148,
	0, 0, 0, 0, 0, 0, 0, 0, 157, 0,
	0, 0, 0, 0, 0, 0, 0, 172, 0, 173,
	145, 146, 150, 152, 151, 164, 165, 162, 163, 166,
	167, 168, 169, 170, 160, 161, 154, 155, 153, 156,
	158, 159, 0, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 157,
}
var yyPact = [...]int{

	-1000, -1000, 1315, -1000, -1000, -1000, -1000, -1000, -1000, 318,
	58, 397, 481, -1000, -1000, -1000, 316, 4533, 315, 314,
	5777, 5777, 5777, 12, 465, 5777, -1000, 6207, 312, 309,
	302, -1000, 61, 5777, 535, 646, 619, 435, 529, 526,
	524, 558, 693, 2633, -1000, -1000, 298, -1000, -1000, 165,
	5777, 585, 585, 5777, 5777, 5777, 5777, 5777, -1000, 296,
	5777, 5777, 294, 5777, 5777, 5777, 5777, 5777, 5777, 5777,
	5777, 5777, 5777, -1000, 5777, 5777, 5777, -1000, -1000, -1000,
	574, -1000, 338, 331, -1000, 164, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 604, 500, -1000, 87,
	224, 224, 259, 4979, -1000, 301, 474, 194, 474, -50,
	-1000, -1000, 162, 411, 230, 391, 474, -1000, -1000, -1000,
	-1000, 229, -1000, 678, 3108, 5777, 418, 231, 5777, 5777,
	161, 6867, -1000, 159, 158, 228, -1000, -1000, 223, -1000,
	668, 220, -1000, 6867, -1000, 5777, 5777, 5777, 5777, 5777,
	5777, 5777, 5777, 5777, 5777, 5777, 5777, 5777, 5777, 5777,
	5777, 5777, 5777, 5777, 5777, 5777, 5777, 5777, 5777, 5777,
	5777, 306, 5663, 5777, 585, 5777, 481, -1000, 6160, 155,
	-1000, 519, -1000, 513, -1000, 362, 18, 367, 248, 4533,
	244, 153, 641, 5549, 5777, 5777, 5777, 5777, 5777, 5777,
	5777, 5777, 5777, 5777, 5777, 5777, -1000, -1000, 5777, 5777,
	5777, 52, -1000, -1000, 574, 5777, -1000, -1000, 577, 577,
	566, 577, 6677, 5777, 6867, 6867, 5777, 6867, 6867, 577,
	577, 577, 577, 577, 577, 577, 577, 1300, 1463, 1300,
	5777, 845, 845, 224, -1000, 326, 143, 224, -1000, -1000,
	445, -1000, 486, -1000, 454, 5435, 585, 186, 426, 5777,
	-1000, -1000, 5207, -1000, 4979, -61, 723, -1000, -1000, 6820,
	585, 242, 499, 301, 136, 301, -1000, -1000, 1152, -1000,
	134, 213, 385, 474, -1000, 401, 150, 484, 381, -1000,
	-1000, 481, 5777, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	238, 6630, 227, 133, 709, 6867, 6583, -1000, -1000, -1000,
	-1000, 12, -1000, 465, 5777, -1000, 5777, 1787, 977, 3423,
	1300, 1137, 1950, 2272, 2110, 734, 734, 734, 566, 577,
	566, 566, 838, 838, 2430, 2430, 2430, 2430, 2430, 727,
	727, 727, 727, -1000, 6771, 5777, 1626, 706, -1000, -1000,
	6724, 239, 2945, -1000, -1000, 226, 362, 356, 310, -1000,
	-19, 310, 5777, -1000, 5777, -1000, -1000, 1300, 5777, 1300,
	1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
	1300, 6536, -63, 6113, 224, -1000, 5777, -1000, 6489, -1000,
	6442, 6395, 5777, -65, -1000, 224, -1000, -1000, -1000, 5777,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 224, -1000, -1000, -1000, 12,
	5777, 5777, 52, 12, 362, -1000, -1000, -1000, -1000, -1000,
	598, 479, 6066, 50, -39, -1000, 6019, -1000, 703, -1000,
	6867, 5777, 193, -1000, 4979, 5093, -1000, 4979, -1000, -1000,
	989, -1000, -1000, -1000, 145, 380, -1000, 474, 375, 489,
	-1000, 139, -1000, 6867, 190, 4370, 5777, 5777, 5777, 96,
	-1000, -1000, 6867, -1000, 5777, 1626, 188, 585, 335, 4207,
	-1000, 473, 356, -21, 310, -1000, 441, -1000, 690, -1000,
	6348, 6301, 2782, 2272, 4044, -1000, -1000, -1000, 5972, -1000,
	-1000, -1000, 1300, -1000, -1000, 5917, -1000, -1000, -67, 5840,
	-1000, -1000, 356, -71, -1000, -1000, 437, -1000, -1000, -1000,
	-1000, 5777, -1000, -1000, 187, 5321, 6867, -1000, -1000, 6867,
	585, 211, 185, -1000, 474, 59, 695, -1000, -1000, 474,
	489, 130, -1000, -1000, -1000, 6254, 121, 6867, -1000, 120,
	117, 1626, 111, -1000, 260, -1000, 585, 201, 4979, -1000,
	-1000, -1000, 407, 183, 700, -1000, 625, -1000, -1000, 270,
	-1000, -1000, -1000, -25, -1000, 690, -1000, -1000, 451, 487,
	310, 647, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	336, 310, 4533, 637, 106, -1000, -1000, -1000, -1000, -1000,
	-1000, -26, -1000, -1000, 398, -1000, -1000, -1000, 4979, -1000,
	692, -1000, 474, -40, 489, -1000, 695, -1000, 2619, 103,
	5777, 84, -1000, 567, -1000, -1000, 3718, 335, -1000, 4979,
	-76, 2456, -1000, 200, -27, 633, 473, 240, -1000, -1000,
	-1000, 299, 119, -1000, 666, 4696, 619, 93, -1000, -1000,
	-1000, -1000, -1000, -1000, 3271, -1000, -41, 180, -42, 474,
	692, -1000, -1000, -43, 101, -1000, 179, -1000, 5777, 100,
	9, 98, 533, -1000, -1000, -1000, 175, 169, -1000, 90,
	310, -1000, -49, 473, -1000, 458, -1000, 208, -1000, -1000,
	451, 5777, 116, -1000, 663, 4696, -1000, -1000, 3573, 3271,
	110, -1000, -1000, -1000, -1000, -47, -1000, -1000, 3881, 830,
	-1000, -1000, -1000, -1000, -1000, 85, 2293, 3718, -1000, -1000,
	506, -1000, 2130, -1000, -1000, 661, -1000, -1000, 6867, -1000,
	4696, 5777, 112, -1000, 3434, -1000, 82, 81, 379, 402,
	325, -1000, 231, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3271, -1000, 74, -1000, 166, 310, -1000, 1967, 5777, -1000,
	6867, 473, -1000, -1000, -1000, -1000, 310, 4835, 4696, 1804,
	3271, -1000, -52, -1000, -1000, 6867, 97, 690, -1000, -1000,
	4696, -1000, 65, -1000, 633, -1000, -1000, 1641, -53, -1000,
	-1000, -1000, -1000, 1478, -1000,
}
var yyPgo = [...]int{

	0, 655, 902, 900, 15, 8, 899, 2, 897, 25,
	5, 74, 29, 896, 1, 895, 87, 79, 893, 3,
	13, 35, 4, 885, 20, 0, 847, 846, 53, 183,
	844, 839, 838, 837, 834, 24, 830, 829, 828, 28,
	92, 825, 50, 824, 59, 823, 44, 822, 38, 19,
	41, 39, 820, 818, 11, 89, 52, 817, 816, 815,
	814, 18, 813, 812, 809, 7, 808, 14, 806, 10,
	805, 6, 803, 799, 9, 796, 794, 793, 791, 784,
	773, 509, 83, 771, 42, 98, 770, 769, 33, 763,
	48, 696, 762, 760, 27, 30, 504, 31, 16, 63,
	78, 46, 759, 45, 40, 80, 753, 43, 750, 748,
	60, 747, 740, 84, 96, 735, 733, 17, 12,
}
var yyR1 = [...]int{

	0, 116, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 6,
	6, 6, 6, 6, 6, 6, 7, 7, 9, 9,
	10, 10, 10, 11, 11, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 91,
	91, 92, 92, 93, 93, 94, 94, 95, 95, 96,
	96, 97, 97, 98, 98, 99, 99, 14, 14, 13,
	13, 13, 13, 13, 13, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 58,
	58, 59, 59, 60, 60, 55, 55, 56, 57, 57,
	30, 30, 31, 31, 32, 32, 33, 33, 34, 34,
	35, 35, 36, 36, 111, 112, 112, 113, 113, 38,
	38, 38, 38, 39, 39, 39, 118, 118, 37, 37,
	49, 49, 49, 49, 50, 51, 51, 52, 52, 53,
	53, 53, 53, 53, 53, 54, 54, 41, 41, 42,
	43, 43, 44, 44, 45, 45, 46, 47, 47, 48,
	117, 117, 16, 16, 15, 15, 1, 1, 100, 101,
	103, 103, 102, 102, 104, 104, 61, 61, 62, 62,
	62, 62, 71, 71, 72, 72, 72, 73, 73, 74,
	74, 75, 76, 76, 76, 76, 77, 77, 78, 79,
	79, 63, 63, 68, 68, 69, 70, 70, 64, 64,
	65, 65, 65, 65, 65, 65, 66, 66, 67, 67,
	17, 22, 22, 23, 23, 24, 24, 18, 18, 4,
	4, 2, 2, 3, 3, 20, 20, 21, 21, 21,
	19, 19, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 81, 81, 81, 81, 82, 82, 82,
	82, 82, 82, 82, 83, 83, 83, 83, 84, 84,
	84, 85, 85, 114, 114, 86, 87, 87, 87, 108,
	108, 108, 88, 88, 88, 25, 25, 40, 40, 27,
	27, 27, 27, 27, 27, 109, 109, 109, 109, 110,
	110, 110, 105, 105, 106, 106, 107, 107, 28, 28,
	28, 90, 90, 90, 29, 29, 29, 89, 89, 115,
	115, 115, 115, 115, 115,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 2, 3, 2, 0, 1, 1, 1, 1, 1,
	4, 3, 5, 4, 3, 4, 3, 4, 3, 1,
	1, 6, 7, 6, 7, 3, 1, 3, 1, 3,
	1, 1, 2, 1, 3, 1, 2, 2, 0, 1,
	1, 1, 1, 1, 4, 3, 1, 1, 5, 7,
	9, 5, 3, 3, 3, 3, 3, 3, 1, 2,
	6, 7, 9, 5, 1, 6, 3, 3, 2, 0,
	9, 1, 3, 0, 4, 3, 1, 3, 1, 4,
	5, 6, 1, 3, 6, 7, 3, 6, 1, 4,
	0, 1, 3, 1, 7, 3, 2, 0, 1, 3,
	4, 4, 5, 0, 5, 4, 1, 1, 1, 4,
	1, 2, 4, 3, 1, 0, 1, 3, 1, 3,
	1, 4, 2, 6, 4, 1, 4, 3, 1, 1,
	3, 1, 1, 3, 3, 1, 1, 1, 3, 1,
	0, 1, 8, 7, 1, 2, 1, 1, 5, 6,
	0, 2, 0, 2, 0, 2, 2, 0, 3, 4,
	3, 9, 1, 3, 1, 2, 3, 1, 2, 2,
	2, 3, 3, 3, 4, 3, 1, 1, 3, 1,
	3, 1, 1, 3, 1, 3, 0, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 3, 1, 1, 3,
	10, 1, 0, 1, 3, 4, 6, 0, 1, 0,
	1, 0, 1, 0, 1, 1, 2, 1, 1, 1,
	0, 2, 3, 4, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 5, 4, 3, 4, 2, 2,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 1, 2, 1, 2, 4, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 3,
	3, 1, 1, 2, 2, 1, 2, 1, 4, 3,
	3, 3, 6, 3, 1, 1, 2, 1, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 3, 1, 1,
	3, 1, 4, 3, 1, 1, 1, 0, 1, 1,
	4, 4, 4, 4, 1, 2, 4, 4, 2, 1,
	3, 1, 2, 4, 1, 3, 1, 2, 1, 1,
	3, 1, 3, 1, 1, 4, 2, 3, 3, 1,
	4, 4, 3, 3, 3,
}
var yyChk = [...]int{

	-1000, -116, -11, -8, -12, -17, -16, -100, -101, 127,
	154, 120, 114, 162, -31, -33, 97, 96, 99, 106,
	110, 111, 115, 122, 76, 95, 90, -25, 124, 101,
	103, 161, 116, 119, 112, 86, 113, -15, 128, 129,
	130, -30, -32, -28, -26, -1, 83, -27, -89, -87,
	71, 58, 59, 49, 50, 55, 57, 159, -112, 126,
	4, 5, 6, 7, 8, 60, 61, 62, 63, 64,
	65, 66, 67, -80, 13, 14, 16, 77, 78, -29,
	-84, -109, -85, -86, -88, 70, 84, 85, 141, 142,
	156, 138, 139, 140, 155, 137, 149, 165, 88, 166,
	-10, -108, 135, 69, 94, -9, 157, 159, 157, -9,
	162, 86, -93, -91, -96, -9, 157, 113, 114, -99,
	-98, -55, -56, 86, -14, 159, -12, 154, 159, 159,
	-40, -25, 76, -40, -40, -41, -42, -29, -43, -44,
	88, -45, -46, -25, 161, 33, 34, 10, 12, 11,
	35, 37, 36, 51, 49, 50, 52, 68, 53, 54,
	47, 48, 40, 41, 38, 39, 42, 43, 44, 45,
	46, 56, 30, 32, 159, 159, 159, 162, -25, 86,
	31, -4, 37, 128, -1, 86, 86, 86, 73, 74,
	73, 75, 74, 17, 18, 19, 20, 29, 21, 22,
	23, 24, 25, 26, 27, 28, 58, 59, 159, 69,
	162, 133, -25, -28, -84, 159, -88, -28, -25, -25,
	-25, -25, -25, 159, -25, -25, 159, -25, -25, -25,
	-25, -25, -25, -25, -25, -25, -25, -25, -25, -25,
	69, 153, 153, -114, -111, -85, -115, 128, -10, -29,
	93, 150, -81, -82, 88, 151, 152, -81, 93, 162,
	-29, -105, 159, -105, 159, -50, -52, -51, -53, -25,
	37, 134, 157, -9, 160, -9, 161, 162, -11, 161,
	-92, -96, -9, 157, 161, 9, 157, 105, -9, -98,
	161, 9, 17, -13, 163, -12, -17, -16, -100, -101,
	127, -25, 97, -35, -36, -25, -25, 161, 161, 161,
	161, 9, 161, 9, 17, 161, 9, -25, -25, -25,
	-25, -25, -25, -25, -25, -25, -25, -25, -25, -25,
	-25, -25, -25, -25, -25, -25, -25, -25, -25, -25,
	-25, -25, -25, -114, -25, 31, -25, -47, -48, -28,
	-25, -55, -14, 161, 161, 86, 86, -103, 131, 162,
	-102, 131, 159, -12, 159, 161, 31, -25, 37, -25,
	-25, -25, -25, -25, -25, -25, -25, -25, -25, -25,
	-25, -25, -40, -25, -90, 86, 162, -29, -25, 160,
	-25, -25, 15, -40, -7, -110, -29, 86, -6, 162,
	-5, 76, 77, 78, 79, 80, 81, 4, 5, 6,
	7, 8, 10, 11, 12, 56, 70, 71, 82, 83,
	73, 74, 75, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 111, 112, 113, 114, 115,
	13, 14, 134, 106, 107, 108, 109, 110, 135, 136,
	131, 132, 154, 129, 130, 128, 137, 138, 140, 139,
	141, 142, 156, 155, -7, -110, -29, -113, -105, 153,
	69, 162, 133, 153, -113, 150, -82, 150, -82, 93,
	69, 133, -25, 87, -28, 165, -25, 160, -106, -107,
	-25, 158, -50, 164, 9, 15, -28, 159, 86, 161,
	-11, 163, 161, 161, 157, -9, -99, 157, -9, 162,
	86, 157, -56, -25, 159, 160, 159, 161, 9, 160,
	-42, -44, -25, -46, 31, -25, -117, 9, 105, 160,
	163, 159, -103, -104, 132, -10, -61, 162, -71, -10,
	-25, -25, -14, -25, 160, 164, 163, -105, -25, 160,
	160, 160, -25, 164, -105, -25, -105, -29, -40, -25,
	-90, -29, -103, -83, 86, 89, 50, 88, 86, 163,
	163, 69, 163, 163, -117, 9, -25, 160, -51, -25,
	37, 134, -50, 163, 162, 157, -94, -97, -98, -91,
	162, 160, -34, -12, 31, -25, -35, -25, -38, 162,
	31, -25, 160, -48, -49, -28, 37, 134, 69, -57,
	-12, 31, -58, -22, -23, -24, -18, -20, -21, 30,
	-10, 135, 136, -104, 162, -71, 163, -62, -63, -70,
	120, -64, 123, -65, 81, 80, 79, 76, 77, 78,
	-61, 9, 160, 160, 75, -12, 31, 163, 163, 164,
	163, -104, 164, 89, -25, 160, -107, -28, 159, 160,
	-95, -98, 162, -117, 9, -98, -94, 161, -14, 160,
	161, -39, 161, -39, 161, 161, 160, 15, -28, 159,
	-50, -14, -60, 117, 118, 160, 9, -2, 37, -21,
	162, -61, -66, -67, 88, 114, 113, -71, -65, 163,
	-10, -12, 31, 161, -14, 162, 164, -50, -117, 9,
	-95, 163, -97, -117, 98, 161, -35, 163, 108, 109,
	-39, 107, -39, -54, -12, 31, -49, -50, 164, 104,
	159, 162, -19, 31, -24, -3, 158, -61, 163, 161,
	9, 17, -68, -69, -7, -4, -72, 161, 162, -14,
	-61, 163, 160, 163, -98, -117, 163, 161, 160, -25,
	-118, 31, 161, 163, 161, 107, -14, 160, 160, 161,
	-59, -10, -14, 162, -20, 88, 163, -67, -25, 161,
	9, 17, -7, 163, -73, -74, -75, -76, -78, -77,
	-10, -7, 154, 86, 163, 163, -37, -12, 31, -118,
	-14, 161, 102, -54, 88, 35, 163, -14, 17, -69,
	-25, 159, 163, -74, 161, 161, 121, 105, 153, -14,
	-14, 161, 160, -10, 163, -25, -22, -71, 86, -5,
	-65, -7, 100, 162, 160, -7, 161, -14, -19, 163,
	-79, 161, 162, -14, 163,
}
var yyDef = [...]int{

	84, -2, 1, 83, 85, 86, 87, 88, 89, 0,
	0, 0, 0, 118, 126, 127, 0, 0, 0, 0,
	427, 427, 427, 0, 411, 0, 138, 0, 0, 0,
	0, 144, 0, 0, 0, 78, 289, 0, 0, 0,
	0, 162, 0, -2, 426, 224, 0, -2, 449, 415,
	0, 0, 0, 0, 0, 0, 0, 0, 353, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 371, 0, 373, 0, 226, 227, 429,
	392, 434, 0, 0, -2, 0, 377, 378, 379, 380,
	381, 382, 383, 384, 385, 386, 0, 0, 454, 0,
	-2, 0, 0, 195, 424, 80, 0, 0, 0, 0,
	84, 78, 0, 0, 0, 113, 0, 99, 100, 110,
	115, 0, 156, 0, 0, 0, 0, 0, 170, 0,
	0, 428, 411, 0, 0, 0, 208, 209, 0, 211,
	212, 0, 215, 216, 139, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	148, 0, 290, 0, 225, 230, 0, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 317, 319, 0, 427,
	0, 0, 304, -2, 0, 0, -2, -2, 338, 339,
	340, 341, 0, 0, 358, 359, 0, 361, 362, 363,
	364, 365, 366, 367, 368, 369, 370, 372, 374, 376,
	427, 0, 0, 177, 176, 413, 414, 177, 412, 459,
	0, 388, 0, 395, 397, 0, 0, 0, 0, 0,
	456, 435, 0, 438, 195, 0, 194, 198, 196, 200,
	0, 0, 0, 81, 0, 82, 91, 84, 0, 94,
	0, 0, 113, 0, 96, 0, 0, 0, 113, 116,
	98, 0, 0, 117, 125, 119, 120, 121, 122, 123,
	0, 0, 0, 0, 171, 173, 0, 132, 133, 134,
	135, 0, 136, 0, 0, 137, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 329, 330, 331, 332, 333,
	334, 335, 336, 337, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 351, 0, 0, 356, 220, 217, -2,
	0, 0, 0, 146, 147, 0, 230, 234, 0, 237,
	0, 0, 0, 163, 0, 166, 118, 302, 0, 305,
	306, 307, 308, 309, 310, 311, 312, 313, 314, 315,
	316, 0, 0, 0, 450, 451, 0, 453, 0, -2,
	0, 0, 0, 0, -2, 0, -2, 76, 77, 0,
	69, 70, 71, 72, 73, 74, 75, 2, 3, 4,
	5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
	15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
	25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
	35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, -2, 0, -2, 175, 178, 0,
	427, 0, 0, 0, 230, 387, 396, 390, 393, 394,
	0, 0, 0, 0, 416, 389, 0, 442, 220, 444,
	446, 0, 0, 423, 195, 0, -2, 195, 79, 90,
	0, 93, 95, 97, 0, 113, 109, 0, 113, 0,
	114, 0, 155, 157, 0, 0, 0, 170, 0, 0,
	207, 210, 213, 214, 0, 355, 0, 221, 0, 0,
	149, -2, 234, 0, 0, 231, 266, 237, 233, 242,
	0, 0, 0, 303, 0, 430, 432, 433, 0, -2,
	357, 360, 375, 431, 436, 0, 437, 463, 0, 0,
	462, 464, 234, 0, 404, 405, 0, 407, 399, 400,
	401, 0, 403, 455, 0, 221, 447, 422, 197, 199,
	0, 0, 0, 92, 0, 0, 220, 106, 111, 0,
	0, 0, 128, 168, 118, 0, 0, 172, 131, 183,
	183, 354, 0, 218, 0, -2, 0, 0, 195, 143,
	158, 118, 153, 0, 281, 283, 291, 288, 295, 0,
	297, 298, 299, 0, 237, 235, 228, 236, 0, 0,
	0, -2, 262, 268, 270, 271, 272, 273, 274, 275,
	266, 0, 0, 0, 0, 160, 118, 452, 440, 460,
	461, 0, 398, 406, 0, 443, 445, -2, 195, 204,
	220, 108, 0, 0, 221, 112, 220, 124, 0, 0,
	170, 0, 183, 0, 183, 140, 0, 0, -2, 195,
	0, 0, 145, 0, 0, 300, 287, 293, 292, 296,
	237, 266, 0, 277, 278, 0, 289, 0, 269, 229,
	243, 161, 118, 167, 164, 237, 0, 0, 0, 221,
	220, 103, 105, 0, 0, 129, 0, 179, 0, 0,
	0, 0, 0, 141, 205, 118, 0, 0, -2, 0,
	0, 118, 0, 0, 284, 0, 294, 266, 223, 238,
	0, 0, 0, 264, 0, 0, 240, 244, 0, 165,
	266, 402, 203, 101, 107, 0, 104, 169, 0, 0,
	118, 186, 187, 180, 181, 0, 0, 0, 192, 159,
	0, 151, 0, 118, 301, 285, 222, 276, 279, 239,
	0, 0, 0, 245, 0, 247, 0, 0, 257, 0,
	0, 256, 57, -2, 174, 102, 130, 188, 118, 118,
	185, 182, 0, 142, 0, 0, 154, 0, 0, 263,
	265, -2, 246, 248, 249, 250, 0, 0, 0, 0,
	184, 206, 0, 152, 280, 286, 0, 251, 252, 253,
	255, 258, 0, 118, 300, 254, 189, 0, 0, 150,
	241, 259, 118, 0, 260,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 55, 165, 3, 166, 54, 37, 3,
	159, 160, 52, 49, 9, 50, 51, 53, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 31, 161,
	43, 17, 45, 30, 67, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 69, 3, 164, 36, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 162, 35, 163, 57,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 10, 11, 12,
	13, 14, 15, 16, 18, 19, 20, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 32, 33, 34, 38,
	39, 40, 41, 42, 44, 46, 47, 48, 56, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 68, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 157, 158,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:314
		{
			fmt.Println(yyDollar[1].node)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:318
		{
			yyVAL.value = yyDollar[1].token
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:318
		{
			yyVAL.value = yyDollar[1].token
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:318
		{
			yyVAL.value = yyDollar[1].token
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:318
		{
			yyVAL.value = yyDollar[1].token
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:318
		{
			yyVAL.value = yyDollar[1].token
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:318
		{
			yyVAL.value = yyDollar[1].token
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:318
		{
			yyVAL.value = yyDollar[1].token
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:318
		{
			yyVAL.value = yyDollar[1].token
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:319
		{
			yyVAL.value = yyDollar[1].token
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:319
		{
			yyVAL.value = yyDollar[1].token
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:319
		{
			yyVAL.value = yyDollar[1].token
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:319
		{
			yyVAL.value = yyDollar[1].token
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:319
		{
			yyVAL.value = yyDollar[1].token
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:319
		{
			yyVAL.value = yyDollar[1].token
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:319
		{
			yyVAL.value = yyDollar[1].token
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:319
		{
			yyVAL.value = yyDollar[1].token
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:319
		{
			yyVAL.value = yyDollar[1].token
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:319
		{
			yyVAL.value = yyDollar[1].token
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:319
		{
			yyVAL.value = yyDollar[1].token
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:319
		{
			yyVAL.value = yyDollar[1].token
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:320
		{
			yyVAL.value = yyDollar[1].token
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:320
		{
			yyVAL.value = yyDollar[1].token
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:320
		{
			yyVAL.value = yyDollar[1].token
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:320
		{
			yyVAL.value = yyDollar[1].token
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:320
		{
			yyVAL.value = yyDollar[1].token
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:320
		{
			yyVAL.value = yyDollar[1].token
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:320
		{
			yyVAL.value = yyDollar[1].token
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:320
		{
			yyVAL.value = yyDollar[1].token
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:320
		{
			yyVAL.value = yyDollar[1].token
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:320
		{
			yyVAL.value = yyDollar[1].token
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:321
		{
			yyVAL.value = yyDollar[1].token
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:321
		{
			yyVAL.value = yyDollar[1].token
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:321
		{
			yyVAL.value = yyDollar[1].token
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:321
		{
			yyVAL.value = yyDollar[1].token
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:321
		{
			yyVAL.value = yyDollar[1].token
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:321
		{
			yyVAL.value = yyDollar[1].token
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:321
		{
			yyVAL.value = yyDollar[1].token
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:321
		{
			yyVAL.value = yyDollar[1].token
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:321
		{
			yyVAL.value = yyDollar[1].token
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:321
		{
			yyVAL.value = yyDollar[1].token
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:322
		{
			yyVAL.value = yyDollar[1].token
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:322
		{
			yyVAL.value = yyDollar[1].token
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:322
		{
			yyVAL.value = yyDollar[1].token
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:322
		{
			yyVAL.value = yyDollar[1].token
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:322
		{
			yyVAL.value = yyDollar[1].token
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:322
		{
			yyVAL.value = yyDollar[1].token
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:322
		{
			yyVAL.value = yyDollar[1].token
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:322
		{
			yyVAL.value = yyDollar[1].token
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:322
		{
			yyVAL.value = yyDollar[1].token
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:322
		{
			yyVAL.value = yyDollar[1].token
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:322
		{
			yyVAL.value = yyDollar[1].token
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:323
		{
			yyVAL.value = yyDollar[1].token
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:323
		{
			yyVAL.value = yyDollar[1].token
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:323
		{
			yyVAL.value = yyDollar[1].token
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:323
		{
			yyVAL.value = yyDollar[1].token
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:323
		{
			yyVAL.value = yyDollar[1].token
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:323
		{
			yyVAL.value = yyDollar[1].token
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:323
		{
			yyVAL.value = yyDollar[1].token
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:323
		{
			yyVAL.value = yyDollar[1].token
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:324
		{
			yyVAL.value = yyDollar[1].token
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:324
		{
			yyVAL.value = yyDollar[1].token
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:324
		{
			yyVAL.value = yyDollar[1].token
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:324
		{
			yyVAL.value = yyDollar[1].token
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:324
		{
			yyVAL.value = yyDollar[1].token
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:324
		{
			yyVAL.value = yyDollar[1].token
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:324
		{
			yyVAL.value = yyDollar[1].token
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:324
		{
			yyVAL.value = yyDollar[1].token
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:328
		{
			yyVAL.value = yyDollar[1].value
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:329
		{
			yyVAL.value = yyDollar[1].token
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:329
		{
			yyVAL.value = yyDollar[1].token
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:329
		{
			yyVAL.value = yyDollar[1].token
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:329
		{
			yyVAL.value = yyDollar[1].token
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:329
		{
			yyVAL.value = yyDollar[1].token
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:329
		{
			yyVAL.value = yyDollar[1].token
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:333
		{
			yyVAL.node = Node("identifier").attribute("value", yyDollar[1].token)
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:334
		{
			yyVAL.node = Node("identifier").attribute("value", yyDollar[1].value)
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:338
		{
			yyVAL.node = Node("NamespaceParts").append(Node(yyDollar[1].token))
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:339
		{
			yyVAL.node = yyDollar[1].node.append(Node(yyDollar[3].token))
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:343
		{
			yyVAL.node = Node("Name").append(yyDollar[1].node)
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:344
		{
			yyVAL.node = Node("Name").append(yyDollar[2].node).attribute("FullyQualified", "true")
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:345
		{
			yyVAL.node = Node("Name").append(yyDollar[3].node).attribute("Relative", "true")
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:349
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[2].node)
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:350
		{
			yyVAL.node = Node("Statements")
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:354
		{
			yyVAL.node = yyDollar[1].node
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:355
		{
			yyVAL.node = yyDollar[1].node
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:356
		{
			yyVAL.node = yyDollar[1].node
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:357
		{
			yyVAL.node = yyDollar[1].node
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:358
		{
			yyVAL.node = yyDollar[1].node
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:359
		{
			yyVAL.node = Node("THaltCompiler")
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:360
		{
			yyVAL.node = Node("Namespace").append(yyDollar[2].node)
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:362
		{
			yyVAL.node = Node("Namespace").append(yyDollar[2].node).append(yyDollar[4].node)
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:363
		{
			yyVAL.node = Node("Namespace").append(yyDollar[3].node)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:364
		{
			yyVAL.node = yyDollar[2].node
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:365
		{
			yyVAL.node = yyDollar[3].node.append(yyDollar[2].node)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:366
		{
			yyVAL.node = yyDollar[2].node
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:367
		{
			yyVAL.node = yyDollar[3].node.append(yyDollar[2].node)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:368
		{
			yyVAL.node = yyDollar[2].node
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:372
		{
			yyVAL.node = Node("FuncUseType")
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:373
		{
			yyVAL.node = Node("ConstUseType")
		}
	case 101:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:378
		{
			yyVAL.node = Node("GroupUse").append(yyDollar[1].node).append(yyDollar[4].node)
		}
	case 102:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:380
		{
			yyVAL.node = Node("GroupUse").append(yyDollar[2].node).append(yyDollar[5].node)
		}
	case 103:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:385
		{
			yyVAL.node = Node("MixedGroupUse").append(yyDollar[1].node).append(yyDollar[4].node)
		}
	case 104:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:387
		{
			yyVAL.node = Node("MixedGroupUse").append(yyDollar[2].node).append(yyDollar[5].node)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:392
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:393
		{
			yyVAL.node = Node("UseList").append(yyDollar[1].node)
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:397
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:398
		{
			yyVAL.node = Node("UseList").append(yyDollar[1].node)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:401
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:402
		{
			yyVAL.node = Node("UseList").append(yyDollar[1].node)
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:405
		{
			yyVAL.node = yyDollar[1].node
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:406
		{
			yyVAL.node = yyDollar[2].node.append(yyDollar[1].node)
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:409
		{
			yyVAL.node = Node("UseElem").append(yyDollar[1].node)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:410
		{
			yyVAL.node = Node("UseElem").append(yyDollar[1].node).append(Node("as").attribute("value", yyDollar[3].token))
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:413
		{
			yyVAL.node = yyDollar[1].node
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:414
		{
			yyVAL.node = yyDollar[2].node
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:418
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[2].node)
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:419
		{
			yyVAL.node = Node("stmt")
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:423
		{
			yyVAL.node = yyDollar[1].node
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:424
		{
			yyVAL.node = yyDollar[1].node
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:425
		{
			yyVAL.node = yyDollar[1].node
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:426
		{
			yyVAL.node = yyDollar[1].node
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:427
		{
			yyVAL.node = yyDollar[1].node
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:428
		{
			yyVAL.node = Node("THaltCompiler")
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:431
		{
			yyVAL.node = yyDollar[2].node
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:432
		{
			yyVAL.node = yyDollar[1].node
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:433
		{
			yyVAL.node = yyDollar[1].node
		}
	case 128:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:435
		{
			yyVAL.node = Node("While").
				append(Node("expr").append(yyDollar[3].node)).
				append(Node("stmt").append(yyDollar[5].node))
		}
	case 129:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:441
		{
			yyVAL.node = Node("DoWhile").
				append(Node("expr").append(yyDollar[5].node)).
				append(Node("stmt").append(yyDollar[2].node))
		}
	case 130:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:447
		{
			yyVAL.node = Node("For").
				append(Node("expr1").append(yyDollar[3].node)).
				append(Node("expr2").append(yyDollar[5].node)).
				append(Node("expr3").append(yyDollar[7].node)).
				append(Node("stmt").append(yyDollar[9].node))
		}
	case 131:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:454
		{
			yyVAL.node = Node("Switch").append(Node("expr").append(yyDollar[3].node)).append(yyDollar[5].node)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:455
		{
			yyVAL.node = Node("Break").append(yyDollar[2].node)
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:456
		{
			yyVAL.node = Node("Continue").append(yyDollar[2].node)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:457
		{
			yyVAL.node = Node("Return").append(yyDollar[2].node)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:458
		{
			yyVAL.node = yyDollar[2].node
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:459
		{
			yyVAL.node = yyDollar[2].node
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:460
		{
			yyVAL.node = yyDollar[2].node
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:461
		{
			yyVAL.node = Node("Echo").append(Node("InlineHtml").attribute("value", yyDollar[1].token))
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:462
		{
			yyVAL.node = yyDollar[1].node
		}
	case 140:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:464
		{
			yyVAL.node = Node("Unset").append(yyDollar[3].node)
		}
	case 141:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:466
		{
			yyVAL.node = Node("Foreach").
				append(Node("expr").append(yyDollar[3].node)).
				append(Node("ForeachVariable").append(yyDollar[5].node)).
				append(yyDollar[7].node)
		}
	case 142:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:473
		{
			yyVAL.node = Node("Foreach").
				append(Node("expr").append(yyDollar[3].node)).
				append(Node("ForeachKey").append(yyDollar[5].node)).
				append(Node("ForeachVariable").append(yyDollar[7].node)).
				append(yyDollar[9].node)
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:480
		{
			yyVAL.node = Node("Declare").append(yyDollar[3].node).append(yyDollar[5].node)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:481
		{
			yyVAL.node = Node("")
		}
	case 145:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:483
		{
			yyVAL.node = Node("Try").
				append(yyDollar[3].node).
				append(yyDollar[5].node).
				append(yyDollar[6].node)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:489
		{
			yyVAL.node = Node("Throw").append(yyDollar[2].node)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:490
		{
			yyVAL.node = Node("GoTo").attribute("Label", yyDollar[2].token)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:491
		{
			yyVAL.node = Node("Label").attribute("name", yyDollar[1].token)
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:494
		{
			yyVAL.node = Node("CatchList")
		}
	case 150:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:496
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[4].node).append(Node("Variable").attribute("name", yyDollar[5].token)).append(yyDollar[8].node)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:499
		{
			yyVAL.node = Node("CatchNameList").append(yyDollar[1].node)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:500
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:504
		{
			yyVAL.node = Node("")
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:505
		{
			yyVAL.node = Node("Finnaly").append(yyDollar[3].node)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:509
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:510
		{
			yyVAL.node = Node("ConstList").append(yyDollar[1].node)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:514
		{
			yyVAL.node = Node("Const").attribute("name", yyDollar[1].token).append(yyDollar[3].node)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:518
		{
			yyVAL.node = yyDollar[1].node
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:519
		{
			yyVAL.node = yyDollar[2].node
		}
	case 160:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:524
		{
			yyVAL.node = Node("If").append(Node("expr").append(yyDollar[3].node)).append(Node("stmt").append(yyDollar[5].node))
		}
	case 161:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:528
		{
			yyVAL.node = yyDollar[1].node.append(Node("ElseIf").append(Node("expr").append(yyDollar[4].node)).append(Node("stmt").append(yyDollar[6].node)))
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:534
		{
			yyVAL.node = yyDollar[1].node
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:536
		{
			yyVAL.node = yyDollar[1].node.append(Node("Else").append(Node("stmt").append(yyDollar[3].node)))
		}
	case 164:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:543
		{
			yyVAL.node = Node("AltIf").append(Node("expr").append(yyDollar[3].node)).append(Node("stmt").append(yyDollar[6].node))
		}
	case 165:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:547
		{
			yyVAL.node = yyDollar[1].node.append(Node("AltElseIf").append(Node("expr").append(yyDollar[4].node)).append(Node("stmt").append(yyDollar[7].node)))
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:553
		{
			yyVAL.node = yyDollar[1].node
		}
	case 167:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:555
		{
			yyVAL.node = yyDollar[1].node.append(Node("AltElse").append(Node("stmt").append(yyDollar[4].node)))
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:561
		{
			yyVAL.node = yyDollar[1].node
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:562
		{
			yyVAL.node = yyDollar[2].node
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:566
		{
			yyVAL.node = Node("")
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:567
		{
			yyVAL.node = yyDollar[1].node
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:570
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:571
		{
			yyVAL.node = Node("ExpressionList").append(yyDollar[1].node)
		}
	case 174:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:576
		{
			yyVAL.node = Node("AnonymousClass").
				attribute("name", yyDollar[1].token).
				append(yyDollar[2].node).
				append(yyDollar[3].node).
				append(yyDollar[4].node).
				append(yyDollar[6].node)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:587
		{
			yyVAL.node = Node("New").append(yyDollar[2].node).append(yyDollar[3].node)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:588
		{
			yyVAL.node = Node("New").append(yyDollar[2].node)
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:592
		{
			yyVAL.node = Node("ArgumentList")
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:593
		{
			yyVAL.node = yyDollar[1].node
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:597
		{
			yyVAL.node = yyDollar[2].node
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:598
		{
			yyVAL.node = yyDollar[3].node
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:599
		{
			yyVAL.node = yyDollar[2].node
		}
	case 182:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:600
		{
			yyVAL.node = yyDollar[3].node
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:604
		{
			yyVAL.node = Node("CaseList")
		}
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:606
		{
			yyVAL.node = yyDollar[1].node.append(Node("Case").append(Node("expr").append(yyDollar[3].node)).append(yyDollar[5].node))
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:610
		{
			yyVAL.node = yyDollar[1].node.append(Node("Default").append(yyDollar[4].node))
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:621
		{
			yyVAL.node = yyDollar[1].node
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:622
		{
			yyVAL.node = yyDollar[2].node
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:626
		{
			yyVAL.node = yyDollar[1].node
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:627
		{
			yyVAL.node = Node("Ref").append(yyDollar[2].node)
		}
	case 192:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:628
		{
			yyVAL.node = Node("List").append(yyDollar[3].node)
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:629
		{
			yyVAL.node = Node("ShortList").append(yyDollar[2].node)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:633
		{ /* TODO: allow single trailing comma */
			yyVAL.node = yyDollar[1].node
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:637
		{
			yyVAL.node = Node("")
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:638
		{
			yyVAL.node = yyDollar[1].node
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:643
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:644
		{
			yyVAL.node = Node("ArrayPairList").append(yyDollar[1].node)
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:648
		{
			yyVAL.node = Node("ArrayElement").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:649
		{
			yyVAL.node = Node("ArrayElement").append(yyDollar[1].node)
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:650
		{
			yyVAL.node = Node("ArrayElement").append(yyDollar[1].node).append(Node("Ref").append(yyDollar[4].node))
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:651
		{
			yyVAL.node = Node("ArrayElement").append(Node("Ref").append(yyDollar[2].node))
		}
	case 203:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:653
		{
			yyVAL.node = Node("ArrayElement").
				append(yyDollar[1].node).
				append(Node("ArrayList").append(yyDollar[5].node))
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:659
		{
			yyVAL.node = Node("ArrayElement").
				append(Node("ArrayList").append(yyDollar[3].node))
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:666
		{
			yyVAL.node = yyDollar[1].node
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:667
		{
			yyVAL.node = yyDollar[2].node
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:671
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:672
		{
			yyVAL.node = Node("GlobalVarList").append(yyDollar[1].node)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:676
		{
			yyVAL.node = yyDollar[1].node
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:680
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:681
		{
			yyVAL.node = Node("StaticVarList").append(yyDollar[1].node)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:685
		{
			yyVAL.node = Node("StaticVariable").attribute("Name", yyDollar[1].token)
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:686
		{
			yyVAL.node = Node("StaticVariable").attribute("Name", yyDollar[1].token).append(Node("expr").append(yyDollar[3].node))
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:690
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:691
		{
			yyVAL.node = Node("EchoList").append(yyDollar[1].node)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:695
		{
			yyVAL.node = Node("Echo").append(yyDollar[1].node)
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:699
		{
			yyVAL.node = Node("UnsetVariablesList").append(yyDollar[1].node)
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:700
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:704
		{
			yyVAL.node = yyDollar[1].node
		}
	case 222:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:714
		{
			yyVAL.node = Node("Class").
				attribute("name", yyDollar[3].token).
				append(yyDollar[1].node).
				append(Node("Extends").append(yyDollar[4].node)).
				append(Node("Implements").append(yyDollar[5].node)).
				append(yyDollar[7].node)
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:723
		{
			yyVAL.node = Node("Class").
				attribute("name", yyDollar[2].token).
				append(Node("Extends").append(yyDollar[3].node)).
				append(Node("Implements").append(yyDollar[4].node)).
				append(yyDollar[6].node)
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:733
		{
			yyVAL.node = Node("Class").attribute(yyDollar[1].value, "true")
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:734
		{
			yyVAL.node = yyDollar[1].node.attribute(yyDollar[2].value, "true")
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:738
		{
			yyVAL.value = "abstract"
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:739
		{
			yyVAL.value = "final"
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:743
		{
			yyVAL.node = Node("Trait").attribute("name", yyDollar[2].token).append(yyDollar[4].node)
		}
	case 229:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:748
		{
			yyVAL.node = Node("Interface").
				attribute("name", yyDollar[2].token).
				append(Node("Extends").append(yyDollar[3].node)).
				append(yyDollar[5].node)
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:757
		{
			yyVAL.node = Node("")
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:758
		{
			yyVAL.node = yyDollar[2].node
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:762
		{
			yyVAL.node = Node("")
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:763
		{
			yyVAL.node = yyDollar[2].node
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:767
		{
			yyVAL.node = Node("")
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:768
		{
			yyVAL.node = yyDollar[2].node
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:772
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[2].node)
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:773
		{
			yyVAL.node = Node("Stmt")
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:777
		{
			yyVAL.node = yyDollar[2].node.append(yyDollar[1].node)
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:778
		{
			yyVAL.node = yyDollar[3].node.append(yyDollar[1].node)
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:779
		{
			yyVAL.node = Node("Use").append(yyDollar[2].node).append(yyDollar[3].node)
		}
	case 241:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:782
		{
			yyVAL.node = Node("Function").
				append(yyDollar[1].node).
				append(Node("name").append(yyDollar[4].node)).
				attribute("returns_ref", yyDollar[3].value).
				append(yyDollar[6].node).
				append(yyDollar[8].node).
				append(yyDollar[9].node)
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:794
		{
			yyVAL.node = Node("NameList").append(yyDollar[1].node)
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:795
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:799
		{
			yyVAL.node = Node("")
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:800
		{
			yyVAL.node = Node("")
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:801
		{
			yyVAL.node = yyDollar[2].node
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:805
		{
			yyVAL.node = Node("TraitAdaptionList").append(yyDollar[1].node)
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:806
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[2].node)
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:810
		{
			yyVAL.node = yyDollar[1].node
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:811
		{
			yyVAL.node = yyDollar[1].node
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:816
		{
			yyVAL.node = Node("TraitPrecedence").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:820
		{
			yyVAL.node = yyDollar[1].node.append(Node("as").attribute("value", yyDollar[3].token))
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:822
		{
			yyVAL.node = yyDollar[1].node.append(Node("as").append(Node("reservedNonModifiers")))
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:824
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node).append(yyDollar[4].node)
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:825
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:828
		{
			yyVAL.node = Node("TraitMethodRef").append(yyDollar[1].node)
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:829
		{
			yyVAL.node = yyDollar[1].node
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:833
		{
			yyVAL.node = Node("TraitMethodRef").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:837
		{
			yyVAL.node = Node("")
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:838
		{
			yyVAL.node = yyDollar[2].node
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:842
		{
			yyVAL.node = yyDollar[1].node
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:843
		{
			yyVAL.node = Node("VarMemberModifier")
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:847
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:848
		{
			yyVAL.node = Node("ConstList").append(yyDollar[1].node)
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:852
		{
			yyVAL.node = Node("Const").append(yyDollar[3].node)
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:856
		{
			yyVAL.node = Node("PublicMemberModifier")
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:857
		{
			yyVAL.node = yyDollar[1].node
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:860
		{
			yyVAL.node = yyDollar[1].node
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:861
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[2].node)
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:864
		{
			yyVAL.node = Node("PublicMemberModifier")
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:865
		{
			yyVAL.node = Node("ProtectedMemberModifier")
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:866
		{
			yyVAL.node = Node("PrivateMemberModifier")
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:867
		{
			yyVAL.node = Node("StaticMemberModifier")
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:868
		{
			yyVAL.node = Node("AbstractMemberModifier")
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:869
		{
			yyVAL.node = Node("FinalMemberModifier")
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:873
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:874
		{
			yyVAL.node = Node("PropertyList").append(yyDollar[1].node)
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:877
		{
			yyVAL.node = Node("Property").attribute("name", yyDollar[1].token)
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:878
		{
			yyVAL.node = Node("Property").attribute("name", yyDollar[1].token).append(Node("Default").append(yyDollar[3].node))
		}
	case 280:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:883
		{
			yyVAL.node = Node("Function").
				attribute("name", yyDollar[3].token).
				attribute("returns_ref", yyDollar[2].value).
				append(yyDollar[5].node).
				append(yyDollar[7].node).
				append(yyDollar[9].node)
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:894
		{
			yyVAL.node = yyDollar[1].node
		}
	case 282:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:895
		{
			yyVAL.node = Node("Parameter list")
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:898
		{
			yyVAL.node = Node("Parameter list").append(yyDollar[1].node)
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:899
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:903
		{
			yyVAL.node = Node("Parameter").
				append(yyDollar[1].node).
				attribute("is_reference", yyDollar[2].value).
				attribute("is_variadic", yyDollar[3].value).
				attribute("var", yyDollar[4].token)
		}
	case 286:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:911
		{
			yyVAL.node = Node("Parameter").
				append(yyDollar[1].node).
				attribute("is_reference", yyDollar[2].value).
				attribute("is_variadic", yyDollar[3].value).
				attribute("var", yyDollar[4].token).
				append(yyDollar[6].node)
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:922
		{
			yyVAL.node = Node("No type")
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:923
		{
			yyVAL.node = yyDollar[1].node
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:927
		{
			yyVAL.value = "false"
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:928
		{
			yyVAL.value = "true"
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:932
		{
			yyVAL.value = "false"
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:933
		{
			yyVAL.value = "true"
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:937
		{
			yyVAL.value = "false"
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:938
		{
			yyVAL.value = "true"
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:942
		{
			yyVAL.node = yyDollar[1].node
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:943
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.attribute("nullable", "true")
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:947
		{
			yyVAL.node = yyDollar[1].node
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:948
		{
			yyVAL.node = Node("array type")
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:949
		{
			yyVAL.node = Node("callable type")
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:953
		{
			yyVAL.node = Node("No return type")
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:954
		{
			yyVAL.node = yyDollar[2].node
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:958
		{
			yyVAL.node = Node("Assign").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:959
		{
			yyVAL.node = Node("AssignRef").append(yyDollar[1].node).append(yyDollar[4].node)
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:960
		{
			yyVAL.node = Node("Clone").append(yyDollar[2].node)
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:961
		{
			yyVAL.node = Node("AssignAdd").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:962
		{
			yyVAL.node = Node("AssignSub").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:963
		{
			yyVAL.node = Node("AssignMul").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:964
		{
			yyVAL.node = Node("AssignPow").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:965
		{
			yyVAL.node = Node("AssignDiv").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:966
		{
			yyVAL.node = Node("AssignConcat").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:967
		{
			yyVAL.node = Node("AssignMod").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:968
		{
			yyVAL.node = Node("AssignAnd").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:969
		{
			yyVAL.node = Node("AssignOr").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:970
		{
			yyVAL.node = Node("AssignXor").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:971
		{
			yyVAL.node = Node("AssignShiftLeft").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:972
		{
			yyVAL.node = Node("AssignShiftRight").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:973
		{
			yyVAL.node = Node("PostIncrement").append(yyDollar[1].node)
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:974
		{
			yyVAL.node = Node("PreIncrement").append(yyDollar[2].node)
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:975
		{
			yyVAL.node = Node("PostDecrement").append(yyDollar[1].node)
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:976
		{
			yyVAL.node = Node("PreDecrement").append(yyDollar[2].node)
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:977
		{
			yyVAL.node = Node("Or").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:978
		{
			yyVAL.node = Node("And").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:979
		{
			yyVAL.node = Node("Or").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:980
		{
			yyVAL.node = Node("And").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:981
		{
			yyVAL.node = Node("Xor").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:982
		{
			yyVAL.node = Node("BitwiseOr").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:983
		{
			yyVAL.node = Node("BitwiseAnd").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:984
		{
			yyVAL.node = Node("BitwiseXor").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:985
		{
			yyVAL.node = Node("Concat").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:986
		{
			yyVAL.node = Node("Add").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:987
		{
			yyVAL.node = Node("Sub").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:988
		{
			yyVAL.node = Node("Mul").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:989
		{
			yyVAL.node = Node("Pow").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:990
		{
			yyVAL.node = Node("Div").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:991
		{
			yyVAL.node = Node("Mod").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:992
		{
			yyVAL.node = Node("ShiftLeft").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:993
		{
			yyVAL.node = Node("ShiftRight").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:994
		{
			yyVAL.node = Node("UnaryPlus").append(yyDollar[2].node)
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:995
		{
			yyVAL.node = Node("UnaryMinus").append(yyDollar[2].node)
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:996
		{
			yyVAL.node = Node("BooleanNot").append(yyDollar[2].node)
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:997
		{
			yyVAL.node = Node("BitwiseNot").append(yyDollar[2].node)
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:998
		{
			yyVAL.node = Node("Identical").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:999
		{
			yyVAL.node = Node("NotIdentical").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1000
		{
			yyVAL.node = Node("Equal").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1001
		{
			yyVAL.node = Node("NotEqual").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1002
		{
			yyVAL.node = Node("Spaceship").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1003
		{
			yyVAL.node = Node("Smaller").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1004
		{
			yyVAL.node = Node("SmallerOrEqual").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1005
		{
			yyVAL.node = Node("Greater").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1006
		{
			yyVAL.node = Node("GreaterOrEqual").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1007
		{
			yyVAL.node = Node("InstanceOf").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1008
		{
			yyVAL.node = yyDollar[2].node
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1009
		{
			yyVAL.node = yyDollar[1].node
		}
	case 354:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1010
		{
			yyVAL.node = Node("Ternary").append(yyDollar[1].node).append(yyDollar[3].node).append(yyDollar[5].node)
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1011
		{
			yyVAL.node = Node("Ternary").append(yyDollar[1].node).append(yyDollar[4].node)
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1012
		{
			yyVAL.node = Node("Coalesce").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1013
		{
			yyVAL.node = Node("Empty").append(yyDollar[3].node)
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1014
		{
			yyVAL.node = Node("Include").append(yyDollar[2].node)
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1015
		{
			yyVAL.node = Node("IncludeOnce").append(yyDollar[2].node)
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1016
		{
			yyVAL.node = Node("Eval").append(yyDollar[3].node)
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1017
		{
			yyVAL.node = Node("Require").append(yyDollar[2].node)
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1018
		{
			yyVAL.node = Node("RequireOnce").append(yyDollar[2].node)
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1019
		{
			yyVAL.node = Node("CastInt").append(yyDollar[2].node)
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1020
		{
			yyVAL.node = Node("CastDouble").append(yyDollar[2].node)
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1021
		{
			yyVAL.node = Node("CastString").append(yyDollar[2].node)
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1022
		{
			yyVAL.node = Node("CastArray").append(yyDollar[2].node)
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1023
		{
			yyVAL.node = Node("CastObject").append(yyDollar[2].node)
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1024
		{
			yyVAL.node = Node("CastBool").append(yyDollar[2].node)
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1025
		{
			yyVAL.node = Node("CastUnset").append(yyDollar[2].node)
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1026
		{
			yyVAL.node = Node("Silence").append(yyDollar[2].node)
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1027
		{
			yyVAL.node = yyDollar[1].node
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1028
		{
			yyVAL.node = Node("Print").append(yyDollar[2].node)
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1029
		{
			yyVAL.node = Node("Yield")
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1030
		{
			yyVAL.node = Node("Yield").append(yyDollar[2].node)
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1031
		{
			yyVAL.node = Node("Yield").append(yyDollar[2].node).append(yyDollar[4].node)
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1032
		{
			yyVAL.node = Node("YieldFrom").append(yyDollar[2].node)
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1036
		{
			yyVAL.node = Node("Scalar").append(Node("Lnumber").attribute("value", yyDollar[1].token))
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1037
		{
			yyVAL.node = Node("Scalar").append(Node("Dnumber").attribute("value", yyDollar[1].token))
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1038
		{
			yyVAL.node = Node("Scalar").append(Node("__LINE__"))
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1039
		{
			yyVAL.node = Node("Scalar").append(Node("__FILE__"))
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1040
		{
			yyVAL.node = Node("Scalar").append(Node("__DIR__"))
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1041
		{
			yyVAL.node = Node("Scalar").append(Node("__TRAIT__"))
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1042
		{
			yyVAL.node = Node("Scalar").append(Node("__METHOD__"))
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1043
		{
			yyVAL.node = Node("Scalar").append(Node("__FUNCTION__"))
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1044
		{
			yyVAL.node = Node("Scalar").append(Node("__NAMESPACE__"))
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1045
		{
			yyVAL.node = Node("Scalar").append(Node("__CLASS__"))
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1047
		{
			yyVAL.node = Node("Scalar").append(Node("Heredoc").attribute("value", yyDollar[2].token))
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1049
		{
			yyVAL.node = Node("Scalar").append(Node("Heredoc"))
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1050
		{
			yyVAL.node = yyDollar[2].node
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1051
		{
			yyVAL.node = yyDollar[2].node
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1052
		{
			yyVAL.node = yyDollar[1].node
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1053
		{
			yyVAL.node = yyDollar[1].node
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1057
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[2].node)
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1058
		{
			yyVAL.node = yyDollar[1].node.append(Node("String").attribute("value", yyDollar[2].token))
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1059
		{
			yyVAL.node = Node("EncapsList").append(yyDollar[1].node)
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1060
		{
			yyVAL.node = Node("EncapsList").append(Node("String").attribute("value", yyDollar[1].token)).append(yyDollar[2].node)
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1063
		{
			yyVAL.node = Node("Variable").attribute("value", yyDollar[1].token)
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1064
		{
			yyVAL.node = Node("Variable").attribute("value", yyDollar[1].token).append(Node("offset").append(yyDollar[3].node))
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1065
		{
			yyVAL.node = Node("Variable").attribute("value", yyDollar[1].token).append(Node("property").attribute("value", yyDollar[3].token))
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1066
		{
			yyVAL.node = Node("Variable").append(Node("expr").append(yyDollar[2].node))
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1067
		{
			yyVAL.node = Node("Variable").attribute("value", yyDollar[2].token)
		}
	case 402:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1069
		{
			yyVAL.node = Node("Variable").attribute("value", yyDollar[2].token).append(Node("offset").append(yyDollar[4].node))
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1070
		{
			yyVAL.node = yyDollar[2].node
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1073
		{
			yyVAL.node = Node("OffsetString").attribute("value", yyDollar[1].token)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1074
		{
			yyVAL.node = Node("OffsetNumString").attribute("value", yyDollar[1].token)
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1075
		{
			yyVAL.node = Node("OffsetNegateNumString").attribute("value", yyDollar[2].token)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1076
		{
			yyVAL.node = Node("OffsetVariable").attribute("value", yyDollar[1].token)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1080
		{
			yyVAL.node = Node("Const").append(yyDollar[1].node)
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1081
		{
			yyVAL.node = Node("Const").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1083
		{
			yyVAL.node = Node("Const").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1087
		{
			yyVAL.node = Node("Static")
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1088
		{
			yyVAL.node = yyDollar[1].node
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1092
		{
			yyVAL.node = yyDollar[1].node
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1093
		{
			yyVAL.node = yyDollar[1].node
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1097
		{
			yyVAL.node = yyDollar[1].node
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1101
		{
			yyVAL.node = yyDollar[1].node
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1102
		{
			yyVAL.node = yyDollar[2].node
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1103
		{
			yyVAL.node = yyDollar[1].node
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1107
		{
			yyVAL.node = yyDollar[1].node
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1108
		{
			yyVAL.node = yyDollar[2].node
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1109
		{
			yyVAL.node = yyDollar[1].node
		}
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1113
		{
			yyVAL.node = yyDollar[3].node
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1114
		{
			yyVAL.node = yyDollar[2].node
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1115
		{
			yyVAL.node = Node("String").attribute("value", yyDollar[1].token)
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1119
		{
			yyVAL.node = yyDollar[1].node
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1120
		{
			yyVAL.node = yyDollar[1].node
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1124
		{
			yyVAL.node = Node("")
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1125
		{
			yyVAL.node = yyDollar[1].node
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1129
		{
			yyVAL.node = yyDollar[1].node
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1130
		{
			yyVAL.node = Node("Dim").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1131
		{
			yyVAL.node = Node("Dim").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1132
		{
			yyVAL.node = Node("Dim").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 433:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1134
		{
			yyVAL.node = Node("MethodCall").append(yyDollar[1].node).append(yyDollar[3].node).append(yyDollar[4].node)
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1135
		{
			yyVAL.node = yyDollar[1].node
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1139
		{
			yyVAL.node = Node("FunctionCall").append(yyDollar[1].node).append(yyDollar[2].node)
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1141
		{
			yyVAL.node = Node("StaticCall").append(yyDollar[1].node).append(yyDollar[3].node).append(yyDollar[4].node)
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1143
		{
			yyVAL.node = Node("StaticCall").append(yyDollar[1].node).append(yyDollar[3].node).append(yyDollar[4].node)
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1144
		{
			yyVAL.node = Node("Call").append(yyDollar[1].node).append(yyDollar[2].node)
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1148
		{
			yyVAL.node = yyDollar[1].node
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1149
		{
			yyVAL.node = yyDollar[2].node
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1150
		{
			yyVAL.node = yyDollar[1].node
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1154
		{
			yyVAL.node = Node("ArgumentList")
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1155
		{
			yyVAL.node = yyDollar[2].node
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1158
		{
			yyVAL.node = Node("ArgumentList").append(yyDollar[1].node)
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1159
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1162
		{
			yyVAL.node = yyDollar[1].node
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1163
		{
			yyVAL.node = Node("Unpack").append(yyDollar[2].node)
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1167
		{
			yyVAL.node = yyDollar[1].node
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1168
		{
			yyVAL.node = yyDollar[1].node
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1169
		{
			yyVAL.node = Node("Property").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1173
		{
			yyVAL.node = Node("PropertyName").attribute("value", yyDollar[1].token)
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1174
		{
			yyVAL.node = yyDollar[2].node
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1175
		{
			yyVAL.node = yyDollar[1].node
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1179
		{
			yyVAL.node = Node("Variable").attribute("name", yyDollar[1].token)
		}
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1180
		{
			yyVAL.node = Node("Variable").append(yyDollar[3].node)
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1181
		{
			yyVAL.node = Node("Variable").append(yyDollar[2].node)
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1186
		{
			yyVAL.node = Node("StaticProp").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1188
		{
			yyVAL.node = Node("StaticProp").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1191
		{
			yyVAL.node = yyDollar[1].node
		}
	case 460:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1192
		{
			yyVAL.node = Node("Dim").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1193
		{
			yyVAL.node = Node("Dim").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1194
		{
			yyVAL.node = Node("Property").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1196
		{
			yyVAL.node = Node("StaticProperty").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1198
		{
			yyVAL.node = Node("StaticProperty").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	}
	goto yystack /* stack new state and value */
}
