//line parser.y:2
package main

import __yyfmt__ "fmt"

//line parser.y:2
import (
	"bytes"
	"fmt"
	"io"
	"os"
)

type node struct {
	name       string
	children   []node
	attributes map[string]string
}

func (n node) String() string {
	buf := new(bytes.Buffer)
	n.print(buf, " ")
	return buf.String()
}

func (n node) print(out io.Writer, indent string) {
	if len(n.attributes) > 0 {
		fmt.Fprintf(out, "\n%v%v %s", indent, n.name, n.attributes)
	} else {
		fmt.Fprintf(out, "\n%v%v", indent, n.name)
	}
	for _, nn := range n.children {
		nn.print(out, indent+"  ")
	}
}

func Node(name string) node {
	return node{name: name, attributes: make(map[string]string)}
}

func (n node) append(nn ...node) node {
	n.children = append(n.children, nn...)
	return n
}

func (n node) attribute(key string, value string) node {
	n.attributes[key] = value
	return n
}

//line parser.y:50
type yySymType struct {
	yys   int
	node  node
	token string
	value string
}

const T_INCLUDE = 57346
const T_INCLUDE_ONCE = 57347
const T_EVAL = 57348
const T_REQUIRE = 57349
const T_REQUIRE_ONCE = 57350
const T_LOGICAL_OR = 57351
const T_LOGICAL_XOR = 57352
const T_LOGICAL_AND = 57353
const T_PRINT = 57354
const T_YIELD = 57355
const T_DOUBLE_ARROW = 57356
const T_YIELD_FROM = 57357
const T_PLUS_EQUAL = 57358
const T_MINUS_EQUAL = 57359
const T_MUL_EQUAL = 57360
const T_DIV_EQUAL = 57361
const T_CONCAT_EQUAL = 57362
const T_MOD_EQUAL = 57363
const T_AND_EQUAL = 57364
const T_OR_EQUAL = 57365
const T_XOR_EQUAL = 57366
const T_SL_EQUAL = 57367
const T_SR_EQUAL = 57368
const T_POW_EQUAL = 57369
const T_COALESCE = 57370
const T_BOOLEAN_OR = 57371
const T_BOOLEAN_AND = 57372
const T_IS_EQUAL = 57373
const T_IS_NOT_EQUAL = 57374
const T_IS_IDENTICAL = 57375
const T_IS_NOT_IDENTICAL = 57376
const T_SPACESHIP = 57377
const T_IS_SMALLER_OR_EQUAL = 57378
const T_IS_GREATER_OR_EQUAL = 57379
const T_SL = 57380
const T_SR = 57381
const T_INSTANCEOF = 57382
const T_INC = 57383
const T_DEC = 57384
const T_INT_CAST = 57385
const T_DOUBLE_CAST = 57386
const T_STRING_CAST = 57387
const T_ARRAY_CAST = 57388
const T_OBJECT_CAST = 57389
const T_BOOL_CAST = 57390
const T_UNSET_CAST = 57391
const T_POW = 57392
const T_NEW = 57393
const T_CLONE = 57394
const T_NOELSE = 57395
const T_ELSEIF = 57396
const T_ELSE = 57397
const T_ENDIF = 57398
const T_STATIC = 57399
const T_ABSTRACT = 57400
const T_FINAL = 57401
const T_PRIVATE = 57402
const T_PROTECTED = 57403
const T_PUBLIC = 57404
const T_EXIT = 57405
const T_IF = 57406
const T_LNUMBER = 57407
const T_DNUMBER = 57408
const T_STRING = 57409
const T_STRING_VARNAME = 57410
const T_VARIABLE = 57411
const T_NUM_STRING = 57412
const T_INLINE_HTML = 57413
const T_CHARACTER = 57414
const T_BAD_CHARACTER = 57415
const T_ENCAPSED_AND_WHITESPACE = 57416
const T_CONSTANT_ENCAPSED_STRING = 57417
const T_ECHO = 57418
const T_DO = 57419
const T_WHILE = 57420
const T_ENDWHILE = 57421
const T_FOR = 57422
const T_ENDFOR = 57423
const T_FOREACH = 57424
const T_ENDFOREACH = 57425
const T_DECLARE = 57426
const T_ENDDECLARE = 57427
const T_AS = 57428
const T_SWITCH = 57429
const T_ENDSWITCH = 57430
const T_CASE = 57431
const T_DEFAULT = 57432
const T_BREAK = 57433
const T_CONTINUE = 57434
const T_GOTO = 57435
const T_FUNCTION = 57436
const T_CONST = 57437
const T_RETURN = 57438
const T_TRY = 57439
const T_CATCH = 57440
const T_FINALLY = 57441
const T_THROW = 57442
const T_USE = 57443
const T_INSTEADOF = 57444
const T_GLOBAL = 57445
const T_VAR = 57446
const T_UNSET = 57447
const T_ISSET = 57448
const T_EMPTY = 57449
const T_HALT_COMPILER = 57450
const T_CLASS = 57451
const T_TRAIT = 57452
const T_INTERFACE = 57453
const T_EXTENDS = 57454
const T_IMPLEMENTS = 57455
const T_OBJECT_OPERATOR = 57456
const T_LIST = 57457
const T_ARRAY = 57458
const T_CALLABLE = 57459
const T_CLASS_C = 57460
const T_TRAIT_C = 57461
const T_METHOD_C = 57462
const T_FUNC_C = 57463
const T_LINE = 57464
const T_FILE = 57465
const T_COMMENT = 57466
const T_DOC_COMMENT = 57467
const T_OPEN_TAG = 57468
const T_OPEN_TAG_WITH_ECHO = 57469
const T_CLOSE_TAG = 57470
const T_WHITESPACE = 57471
const T_START_HEREDOC = 57472
const T_END_HEREDOC = 57473
const T_DOLLAR_OPEN_CURLY_BRACES = 57474
const T_CURLY_OPEN = 57475
const T_PAAMAYIM_NEKUDOTAYIM = 57476
const T_NAMESPACE = 57477
const T_NS_C = 57478
const T_DIR = 57479
const T_NS_SEPARATOR = 57480
const T_ELLIPSIS = 57481

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"T_INCLUDE",
	"T_INCLUDE_ONCE",
	"T_EVAL",
	"T_REQUIRE",
	"T_REQUIRE_ONCE",
	"','",
	"T_LOGICAL_OR",
	"T_LOGICAL_XOR",
	"T_LOGICAL_AND",
	"T_PRINT",
	"T_YIELD",
	"T_DOUBLE_ARROW",
	"T_YIELD_FROM",
	"'='",
	"T_PLUS_EQUAL",
	"T_MINUS_EQUAL",
	"T_MUL_EQUAL",
	"T_DIV_EQUAL",
	"T_CONCAT_EQUAL",
	"T_MOD_EQUAL",
	"T_AND_EQUAL",
	"T_OR_EQUAL",
	"T_XOR_EQUAL",
	"T_SL_EQUAL",
	"T_SR_EQUAL",
	"T_POW_EQUAL",
	"'?'",
	"':'",
	"T_COALESCE",
	"T_BOOLEAN_OR",
	"T_BOOLEAN_AND",
	"'|'",
	"'^'",
	"'&'",
	"T_IS_EQUAL",
	"T_IS_NOT_EQUAL",
	"T_IS_IDENTICAL",
	"T_IS_NOT_IDENTICAL",
	"T_SPACESHIP",
	"'<'",
	"T_IS_SMALLER_OR_EQUAL",
	"'>'",
	"T_IS_GREATER_OR_EQUAL",
	"T_SL",
	"T_SR",
	"'+'",
	"'-'",
	"'.'",
	"'*'",
	"'/'",
	"'%'",
	"'!'",
	"T_INSTANCEOF",
	"'~'",
	"T_INC",
	"T_DEC",
	"T_INT_CAST",
	"T_DOUBLE_CAST",
	"T_STRING_CAST",
	"T_ARRAY_CAST",
	"T_OBJECT_CAST",
	"T_BOOL_CAST",
	"T_UNSET_CAST",
	"'@'",
	"T_POW",
	"'['",
	"T_NEW",
	"T_CLONE",
	"T_NOELSE",
	"T_ELSEIF",
	"T_ELSE",
	"T_ENDIF",
	"T_STATIC",
	"T_ABSTRACT",
	"T_FINAL",
	"T_PRIVATE",
	"T_PROTECTED",
	"T_PUBLIC",
	"T_EXIT",
	"T_IF",
	"T_LNUMBER",
	"T_DNUMBER",
	"T_STRING",
	"T_STRING_VARNAME",
	"T_VARIABLE",
	"T_NUM_STRING",
	"T_INLINE_HTML",
	"T_CHARACTER",
	"T_BAD_CHARACTER",
	"T_ENCAPSED_AND_WHITESPACE",
	"T_CONSTANT_ENCAPSED_STRING",
	"T_ECHO",
	"T_DO",
	"T_WHILE",
	"T_ENDWHILE",
	"T_FOR",
	"T_ENDFOR",
	"T_FOREACH",
	"T_ENDFOREACH",
	"T_DECLARE",
	"T_ENDDECLARE",
	"T_AS",
	"T_SWITCH",
	"T_ENDSWITCH",
	"T_CASE",
	"T_DEFAULT",
	"T_BREAK",
	"T_CONTINUE",
	"T_GOTO",
	"T_FUNCTION",
	"T_CONST",
	"T_RETURN",
	"T_TRY",
	"T_CATCH",
	"T_FINALLY",
	"T_THROW",
	"T_USE",
	"T_INSTEADOF",
	"T_GLOBAL",
	"T_VAR",
	"T_UNSET",
	"T_ISSET",
	"T_EMPTY",
	"T_HALT_COMPILER",
	"T_CLASS",
	"T_TRAIT",
	"T_INTERFACE",
	"T_EXTENDS",
	"T_IMPLEMENTS",
	"T_OBJECT_OPERATOR",
	"T_LIST",
	"T_ARRAY",
	"T_CALLABLE",
	"T_CLASS_C",
	"T_TRAIT_C",
	"T_METHOD_C",
	"T_FUNC_C",
	"T_LINE",
	"T_FILE",
	"T_COMMENT",
	"T_DOC_COMMENT",
	"T_OPEN_TAG",
	"T_OPEN_TAG_WITH_ECHO",
	"T_CLOSE_TAG",
	"T_WHITESPACE",
	"T_START_HEREDOC",
	"T_END_HEREDOC",
	"T_DOLLAR_OPEN_CURLY_BRACES",
	"T_CURLY_OPEN",
	"T_PAAMAYIM_NEKUDOTAYIM",
	"T_NAMESPACE",
	"T_NS_C",
	"T_DIR",
	"T_NS_SEPARATOR",
	"T_ELLIPSIS",
	"';'",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"']'",
	"'\"'",
	"'$'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1001
const src = `<?php

$a = $test->{$test->test};

`

func main() {
	yyDebug = 0
	yyErrorVerbose = true
	l := newLexer(bytes.NewBufferString(src), os.Stdout, "file.name")
	yyParse(l)
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 36,
	133, 369,
	153, 369,
	-2, 375,
	-1, 74,
	133, 371,
	153, 371,
	-2, 346,
	-1, 90,
	153, 367,
	-2, 363,
	-1, 184,
	133, 369,
	153, 369,
	-2, 275,
	-1, 190,
	133, 369,
	153, 369,
	-2, 277,
	-1, 276,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 299,
	-1, 277,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 300,
	-1, 278,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 301,
	-1, 279,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 302,
	-1, 280,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 303,
	-1, 281,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 304,
	-1, 282,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 305,
	-1, 283,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 306,
	-1, 284,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 307,
	-1, 290,
	133, 369,
	153, 369,
	-2, 184,
	-1, 328,
	133, 370,
	153, 370,
	-2, 308,
	-1, 428,
	133, 369,
	153, 369,
	-2, 167,
	-1, 449,
	163, 239,
	-2, 244,
	-1, 492,
	133, 369,
	153, 369,
	-2, 155,
	-1, 518,
	88, 218,
	-2, 224,
	-1, 536,
	133, 369,
	153, 369,
	-2, 166,
	-1, 549,
	133, 369,
	153, 369,
	-2, 156,
	-1, 590,
	133, 373,
	153, 373,
	-2, 158,
	-1, 649,
	105, 76,
	-2, 78,
	-1, 665,
	163, 239,
	-2, 244,
}

const yyPrivate = 57344

const yyLast = 5925

var yyAct = [...]int{

	22, 100, 604, 594, 520, 336, 502, 567, 641, 603,
	585, 616, 563, 506, 491, 156, 107, 107, 107, 504,
	245, 119, 507, 289, 240, 451, 293, 4, 229, 153,
	90, 118, 542, 227, 74, 115, 88, 102, 590, 112,
	533, 425, 73, 548, 183, 446, 688, 191, 192, 193,
	194, 195, 676, 197, 198, 218, 200, 201, 202, 203,
	204, 205, 206, 207, 208, 209, 71, 210, 211, 212,
	72, 624, 36, 623, 614, 189, 189, 612, 556, 188,
	188, 538, 489, 473, 665, 113, 592, 186, 186, 607,
	550, 537, 449, 231, 432, 429, 303, 580, 581, 301,
	580, 581, 243, 470, 226, 247, 248, 199, 524, 525,
	526, 523, 522, 521, 89, 185, 185, 184, 190, 196,
	181, 151, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 284, 285, 287,
	619, 291, 517, 579, 295, 519, 225, 493, 524, 525,
	526, 523, 522, 521, 88, 150, 149, 306, 308, 309,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	189, 219, 320, 105, 188, 104, 416, 302, 327, 495,
	508, 547, 186, 561, 611, 469, 108, 329, 99, 445,
	330, 101, 517, 695, 696, 519, 99, 471, 88, 322,
	687, 88, 635, 629, 93, 593, 332, 410, 600, 450,
	185, 419, 290, 300, 152, 423, 690, 231, 487, 258,
	617, 255, 675, 253, 669, 598, 224, 668, 99, 608,
	609, 97, 89, 513, 220, 221, 99, 510, 511, 324,
	655, 625, 189, 620, 494, 91, 188, 438, 422, 119,
	424, 613, 577, 189, 186, 572, 103, 188, 546, 95,
	545, 413, 543, 415, 103, 186, 541, 95, 415, 413,
	333, 411, 187, 323, 433, 304, 89, 441, 297, 89,
	439, 437, 185, 436, 421, 510, 511, 251, 250, 249,
	237, 235, 452, 185, 453, 428, 103, 454, 455, 95,
	672, 123, 125, 124, 103, 99, 326, 95, 325, 214,
	113, 213, 182, 670, 457, 219, 671, 417, 554, 555,
	416, 147, 461, 148, 121, 122, 126, 128, 127, 140,
	141, 138, 139, 142, 143, 144, 145, 146, 136, 137,
	130, 131, 129, 132, 134, 135, 219, 486, 618, 219,
	244, 223, 634, 94, 215, 92, 566, 565, 599, 133,
	534, 98, 108, 219, 123, 125, 124, 564, 631, 257,
	219, 254, 99, 252, 88, 116, 97, 414, 220, 221,
	93, 418, 333, 411, 147, 294, 148, 121, 122, 126,
	128, 127, 140, 141, 138, 139, 142, 143, 144, 145,
	146, 136, 137, 130, 131, 129, 132, 134, 135, 220,
	221, 216, 220, 221, 621, 580, 581, 231, 475, 659,
	231, 91, 133, 482, 247, 484, 220, 221, 69, 70,
	467, 488, 412, 220, 221, 583, 580, 581, 500, 430,
	103, 299, 465, 95, 483, 474, 480, 217, 187, 234,
	298, 236, 89, 478, 99, 574, 160, 490, 154, 133,
	497, 535, 157, 499, 189, 189, 512, 559, 188, 188,
	509, 530, 658, 539, 161, 162, 186, 186, 463, 158,
	466, 464, 163, 165, 164, 595, 231, 132, 134, 135,
	552, 524, 525, 526, 523, 522, 521, 189, 38, 571,
	305, 188, 155, 133, 185, 185, 290, 492, 662, 186,
	544, 636, 601, 569, 189, 447, 256, 540, 188, 551,
	607, 560, 557, 573, 443, 434, 186, 426, 231, 509,
	241, 159, 247, 5, 222, 442, 1, 185, 568, 536,
	106, 231, 570, 136, 137, 130, 131, 129, 132, 134,
	135, 321, 578, 588, 185, 41, 549, 109, 110, 42,
	87, 575, 586, 610, 133, 462, 582, 596, 584, 189,
	65, 615, 605, 188, 589, 694, 644, 242, 509, 622,
	6, 186, 645, 643, 642, 628, 130, 131, 129, 132,
	134, 135, 633, 640, 606, 516, 602, 562, 637, 630,
	518, 515, 647, 632, 514, 133, 553, 626, 654, 185,
	501, 492, 496, 627, 292, 230, 509, 653, 228, 288,
	117, 661, 114, 111, 657, 485, 650, 664, 638, 651,
	646, 246, 479, 647, 10, 663, 35, 9, 586, 667,
	34, 40, 37, 503, 673, 674, 505, 32, 343, 344,
	345, 346, 347, 679, 348, 349, 350, 386, 387, 238,
	2, 646, 680, 96, 3, 685, 684, 683, 681, 335,
	597, 558, 0, 0, 0, 0, 0, 689, 0, 691,
	677, 0, 692, 0, 0, 0, 509, 0, 697, 0,
	0, 568, 0, 0, 0, 0, 0, 0, 0, 0,
	351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 352, 353, 0, 356, 357, 358,
	337, 338, 339, 340, 341, 342, 354, 355, 0, 0,
	334, 0, 88, 0, 0, 0, 0, 0, 0, 359,
	360, 361, 362, 363, 364, 365, 366, 367, 368, 369,
	389, 390, 391, 392, 393, 381, 382, 383, 384, 385,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	380, 0, 401, 399, 400, 396, 397, 0, 388, 394,
	395, 402, 403, 405, 404, 406, 407, 343, 344, 345,
	346, 347, 0, 348, 349, 350, 386, 387, 398, 409,
	408, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	89, 148, 121, 122, 126, 128, 127, 140, 141, 138,
	139, 142, 143, 144, 145, 146, 136, 137, 130, 131,
	129, 132, 134, 135, 0, 0, 0, 0, 0, 351,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 0,
	0, 0, 0, 352, 353, 0, 356, 357, 358, 337,
	338, 339, 340, 341, 342, 354, 355, 0, 0, 649,
	0, 0, 0, 0, 0, 0, 0, 0, 359, 360,
	361, 362, 363, 364, 365, 366, 367, 368, 369, 389,
	390, 391, 392, 393, 381, 382, 383, 384, 385, 370,
	371, 372, 373, 374, 375, 376, 377, 378, 379, 380,
	0, 401, 399, 400, 396, 397, 0, 388, 394, 395,
	402, 403, 405, 404, 406, 407, 343, 344, 345, 346,
	347, 124, 348, 349, 350, 386, 387, 648, 409, 408,
	95, 0, 0, 0, 666, 0, 0, 0, 0, 147,
	0, 148, 121, 122, 126, 128, 127, 140, 141, 138,
	139, 142, 143, 144, 145, 146, 136, 137, 130, 131,
	129, 132, 134, 135, 0, 0, 0, 0, 351, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 0,
	0, 0, 352, 353, 0, 356, 357, 358, 337, 338,
	339, 340, 341, 342, 354, 355, 0, 0, 649, 0,
	0, 0, 0, 0, 0, 0, 0, 359, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 389, 390,
	391, 392, 393, 381, 382, 383, 384, 385, 370, 371,
	372, 373, 374, 375, 376, 377, 378, 379, 380, 0,
	401, 399, 400, 396, 397, 0, 388, 394, 395, 402,
	403, 405, 404, 406, 407, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 648, 409, 408, 95,
	331, 0, 0, 639, 52, 53, 54, 55, 56, 0,
	0, 0, 0, 66, 67, 147, 68, 148, 121, 122,
	126, 128, 127, 140, 141, 138, 139, 142, 143, 144,
	145, 146, 136, 137, 130, 131, 129, 132, 134, 135,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 46,
	47, 0, 0, 133, 0, 48, 0, 49, 44, 45,
	57, 58, 59, 60, 61, 62, 63, 64, 0, 92,
	0, 43, 0, 0, 0, 0, 19, 69, 70, 0,
	0, 0, 0, 39, 75, 76, 30, 0, 88, 0,
	21, 0, 0, 0, 93, 20, 12, 11, 0, 13,
	0, 24, 0, 25, 0, 0, 14, 0, 0, 0,
	15, 16, 29, 31, 0, 17, 27, 0, 0, 28,
	0, 0, 18, 0, 23, 0, 51, 0, 33, 0,
	0, 0, 0, 0, 0, 91, 0, 84, 80, 81,
	82, 77, 78, 0, 0, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 103, 83, 79, 95, 0, 26,
	8, 698, 50, 0, 0, 86, 89, 52, 53, 54,
	55, 56, 0, 0, 0, 0, 66, 67, 0, 68,
	148, 121, 122, 126, 128, 127, 140, 141, 138, 139,
	142, 143, 144, 145, 146, 136, 137, 130, 131, 129,
	132, 134, 135, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 46, 47, 0, 0, 133, 0, 48, 0,
	49, 44, 45, 57, 58, 59, 60, 61, 62, 63,
	64, 0, 92, 0, 43, 0, 0, 0, 0, 19,
	69, 70, 0, 0, 0, 0, 39, 75, 76, 30,
	0, 88, 0, 21, 0, 0, 0, 93, 20, 12,
	11, 0, 13, 0, 24, 0, 25, 0, 0, 14,
	0, 0, 0, 15, 16, 29, 31, 0, 17, 27,
	0, 0, 28, 0, 0, 18, 0, 23, 0, 51,
	0, 33, 0, 0, 0, 0, 0, 0, 91, 0,
	84, 80, 81, 82, 77, 78, 0, 0, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 103, 83, 79,
	95, 0, 26, 8, 693, 50, 0, 0, 86, 89,
	52, 53, 54, 55, 56, 0, 0, 0, 0, 66,
	67, 0, 68, 122, 126, 128, 127, 140, 141, 138,
	139, 142, 143, 144, 145, 146, 136, 137, 130, 131,
	129, 132, 134, 135, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 46, 47, 133, 0, 0,
	0, 48, 0, 49, 44, 45, 57, 58, 59, 60,
	61, 62, 63, 64, 0, 92, 0, 43, 0, 0,
	0, 0, 19, 69, 70, 0, 0, 0, 0, 39,
	75, 76, 30, 0, 88, 0, 21, 0, 0, 0,
	93, 20, 12, 11, 0, 13, 686, 24, 0, 25,
	0, 0, 14, 0, 0, 0, 15, 16, 29, 31,
	0, 17, 27, 0, 0, 28, 0, 0, 18, 0,
	23, 0, 51, 0, 33, 0, 0, 0, 0, 0,
	0, 91, 0, 84, 80, 81, 82, 77, 78, 0,
	0, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	103, 83, 79, 95, 0, 26, 8, 0, 50, 0,
	0, 86, 89, 52, 53, 54, 55, 56, 0, 0,
	0, 0, 66, 67, 0, 68, 0, 126, 128, 127,
	140, 141, 138, 139, 142, 143, 144, 145, 146, 136,
	137, 130, 131, 129, 132, 134, 135, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 46, 47,
	133, 0, 0, 0, 48, 0, 49, 44, 45, 57,
	58, 59, 60, 61, 62, 63, 64, 0, 92, 0,
	43, 0, 0, 0, 0, 19, 69, 70, 0, 0,
	0, 0, 39, 75, 76, 30, 0, 88, 0, 21,
	0, 0, 0, 93, 20, 12, 11, 0, 13, 0,
	24, 0, 25, 0, 0, 14, 0, 0, 0, 15,
	16, 29, 31, 0, 17, 27, 0, 0, 28, 0,
	0, 18, 0, 23, 0, 51, 0, 33, 0, 0,
	0, 0, 0, 0, 91, 0, 84, 80, 81, 82,
	77, 78, 0, 0, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 103, 83, 79, 95, 0, 26, 8,
	678, 50, 0, 0, 86, 89, 52, 53, 54, 55,
	56, 0, 0, 0, 0, 66, 67, 0, 68, 0,
	0, 128, 127, 140, 141, 138, 139, 142, 143, 144,
	145, 146, 136, 137, 130, 131, 129, 132, 134, 135,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 46, 47, 133, 0, 0, 0, 48, 0, 49,
	44, 45, 57, 58, 59, 60, 61, 62, 63, 64,
	0, 92, 0, 43, 0, 0, 0, 0, 19, 69,
	70, 0, 0, 0, 0, 39, 75, 76, 30, 0,
	88, 0, 21, 0, 0, 0, 93, 20, 12, 11,
	0, 13, 0, 24, 0, 25, 0, 0, 14, 0,
	0, 0, 15, 16, 29, 31, 0, 17, 27, 0,
	0, 28, 0, 0, 18, 0, 23, 0, 51, 0,
	33, 0, 0, 0, 0, 0, 0, 91, 0, 84,
	80, 81, 82, 77, 78, 0, 0, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 103, 83, 79, 95,
	0, 26, 8, 660, 50, 0, 0, 86, 89, 52,
	53, 54, 55, 56, 0, 0, 0, 0, 66, 67,
	0, 68, 127, 140, 141, 138, 139, 142, 143, 144,
	145, 146, 136, 137, 130, 131, 129, 132, 134, 135,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 46, 47, 0, 0, 0, 0,
	48, 0, 49, 44, 45, 57, 58, 59, 60, 61,
	62, 63, 64, 0, 92, 0, 43, 0, 0, 0,
	0, 19, 69, 70, 0, 0, 0, 0, 39, 75,
	76, 30, 0, 88, 0, 21, 0, 0, 0, 93,
	20, 12, 11, 0, 13, 0, 24, 656, 25, 0,
	0, 14, 0, 0, 0, 15, 16, 29, 31, 0,
	17, 27, 0, 0, 28, 0, 0, 18, 0, 23,
	0, 51, 0, 33, 0, 0, 0, 0, 0, 0,
	91, 0, 84, 80, 81, 82, 77, 78, 0, 0,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 103,
	83, 79, 95, 0, 26, 8, 0, 50, 0, 0,
	86, 89, 52, 53, 54, 55, 56, 0, 0, 0,
	0, 66, 67, 0, 68, 140, 141, 138, 139, 142,
	143, 144, 145, 146, 136, 137, 130, 131, 129, 132,
	134, 135, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 46, 47, 0,
	0, 0, 0, 48, 0, 49, 44, 45, 57, 58,
	59, 60, 61, 62, 63, 64, 0, 92, 0, 43,
	0, 0, 0, 0, 19, 69, 70, 0, 0, 0,
	0, 39, 75, 76, 30, 0, 88, 0, 21, 0,
	0, 0, 93, 20, 12, 11, 0, 13, 0, 24,
	0, 25, 591, 0, 14, 0, 0, 0, 15, 16,
	29, 31, 0, 17, 27, 0, 0, 28, 0, 0,
	18, 0, 23, 0, 51, 0, 33, 0, 0, 0,
	0, 0, 0, 91, 0, 84, 80, 81, 82, 77,
	78, 0, 0, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 103, 83, 79, 95, 0, 26, 8, 0,
	50, 0, 0, 86, 89, 52, 53, 54, 55, 56,
	0, 0, 0, 0, 66, 67, 0, 68, 143, 144,
	145, 146, 136, 137, 130, 131, 129, 132, 134, 135,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 0, 0,
	46, 47, 0, 0, 0, 0, 48, 0, 49, 44,
	45, 57, 58, 59, 60, 61, 62, 63, 64, 0,
	92, 0, 43, 0, 0, 0, 0, 19, 69, 70,
	0, 0, 0, 0, 39, 75, 76, 30, 0, 88,
	0, 21, 0, 0, 0, 93, 20, 12, 11, 576,
	13, 0, 24, 0, 25, 0, 0, 14, 0, 0,
	0, 15, 16, 29, 31, 0, 17, 27, 0, 0,
	28, 0, 0, 18, 0, 23, 0, 51, 0, 33,
	0, 0, 0, 0, 0, 0, 91, 0, 84, 80,
	81, 82, 77, 78, 0, 0, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 103, 83, 79, 95, 0,
	26, 8, 0, 50, 0, 0, 86, 89, 52, 53,
	54, 55, 56, 0, 0, 0, 0, 66, 67, 0,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 166, 167, 168, 169, 171,
	172, 173, 174, 175, 176, 177, 178, 170, 0, 0,
	0, 0, 0, 46, 47, 0, 0, 0, 0, 48,
	0, 49, 44, 45, 57, 58, 59, 60, 61, 62,
	63, 64, 0, 92, 0, 43, 179, 180, 0, 529,
	19, 69, 70, 0, 0, 0, 0, 39, 75, 76,
	30, 0, 88, 0, 21, 0, 0, 0, 93, 20,
	12, 11, 0, 13, 0, 24, 0, 25, 0, 0,
	14, 0, 0, 0, 15, 16, 29, 31, 0, 17,
	27, 0, 0, 28, 0, 0, 18, 0, 23, 0,
	51, 0, 33, 0, 0, 0, 0, 0, 0, 91,
	0, 84, 80, 81, 82, 77, 78, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 103, 83,
	79, 95, 0, 26, 8, 0, 50, 0, 0, 86,
	89, 52, 53, 54, 55, 56, 0, 0, 0, 0,
	66, 67, 0, 68, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 46, 47, 0, 0,
	0, 0, 48, 0, 49, 44, 45, 57, 58, 59,
	60, 61, 62, 63, 64, 0, 92, 0, 43, 0,
	0, 0, 0, 19, 69, 70, 0, 0, 0, 0,
	39, 75, 76, 30, 0, 88, 0, 21, 0, 0,
	0, 93, 20, 12, 11, 0, 13, 0, 24, 0,
	25, 0, 0, 14, 0, 0, 0, 15, 16, 29,
	31, 0, 17, 27, 0, 0, 28, 0, 0, 18,
	0, 23, 0, 51, 0, 33, 0, 0, 0, 0,
	0, 0, 91, 0, 84, 80, 81, 82, 77, 78,
	0, 0, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 103, 83, 79, 95, 0, 26, 8, 448, 50,
	0, 0, 86, 89, 52, 53, 54, 55, 56, 0,
	0, 0, 0, 66, 67, 0, 68, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 46,
	47, 0, 0, 0, 0, 48, 0, 49, 44, 45,
	57, 58, 59, 60, 61, 62, 63, 64, 0, 92,
	0, 43, 0, 0, 0, 0, 19, 69, 70, 0,
	0, 0, 0, 39, 75, 76, 30, 0, 88, 0,
	21, 0, 0, 0, 93, 20, 12, 11, 0, 13,
	0, 24, 0, 25, 0, 0, 14, 0, 0, 0,
	15, 16, 29, 31, 0, 17, 27, 0, 0, 28,
	0, 0, 18, 0, 23, 0, 51, 0, 33, 0,
	0, 0, 0, 0, 0, 91, 0, 84, 80, 81,
	82, 77, 78, 0, 0, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 103, 83, 79, 95, 0, 26,
	8, 239, 50, 0, 0, 86, 89, 52, 53, 54,
	55, 56, 0, 0, 0, 0, 66, 67, 0, 68,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 46, 47, 0, 0, 0, 0, 48, 0,
	49, 44, 45, 57, 58, 59, 60, 61, 62, 63,
	64, 0, 92, 0, 43, 0, 0, 0, 0, 19,
	69, 70, 0, 0, 0, 0, 39, 75, 76, 30,
	0, 88, 0, 21, 0, 0, 0, 93, 20, 12,
	11, 0, 13, 0, 24, 0, 25, 0, 0, 14,
	0, 0, 0, 15, 16, 29, 31, 0, 17, 27,
	0, 0, 28, 0, 0, 18, 0, 23, 0, 51,
	0, 33, 0, 0, 0, 0, 0, 0, 91, 0,
	84, 80, 81, 82, 77, 78, 0, 0, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 103, 83, 79,
	95, 0, 26, 8, 0, 50, 0, 0, 86, 89,
	52, 53, 54, 55, 56, 0, 0, 0, 0, 66,
	67, 0, 68, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 46, 47, 0, 0, 0,
	0, 48, 0, 49, 44, 45, 57, 58, 59, 60,
	61, 62, 63, 64, 0, 92, 0, 43, 0, 0,
	0, 0, 19, 69, 70, 0, 0, 0, 0, 39,
	75, 76, 30, 0, 88, 0, 21, 0, 0, 0,
	93, 20, 12, 11, 0, 13, 0, 24, 0, 25,
	0, 0, 14, 0, 0, 0, 15, 16, 29, 31,
	0, 17, 27, 0, 0, 28, 0, 0, 18, 0,
	23, 0, 51, 0, 33, 0, 0, 0, 0, 0,
	0, 91, 0, 84, 80, 81, 82, 77, 78, 0,
	0, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	7, 83, 79, 95, 0, 26, 8, 0, 50, 0,
	0, 86, 89, 52, 53, 54, 55, 56, 0, 0,
	0, 0, 66, 67, 0, 68, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	587, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 46, 47,
	0, 0, 0, 0, 48, 0, 49, 44, 45, 57,
	58, 59, 60, 61, 62, 63, 64, 0, 92, 0,
	43, 0, 0, 0, 0, 19, 0, 0, 0, 0,
	0, 0, 39, 75, 76, 30, 0, 88, 0, 21,
	0, 0, 0, 93, 20, 12, 11, 0, 13, 0,
	24, 0, 25, 0, 0, 14, 0, 0, 0, 15,
	16, 29, 0, 0, 17, 27, 0, 0, 28, 0,
	0, 18, 0, 23, 0, 51, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 0, 84, 80, 81, 82,
	77, 78, 0, 0, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 103, 83, 79, 95, 0, 26, 8,
	0, 50, 0, 0, 86, 89, 52, 53, 54, 55,
	56, 0, 0, 0, 0, 66, 67, 0, 68, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 652, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 46, 47, 0, 0, 0, 0, 48, 0, 49,
	44, 45, 57, 58, 59, 60, 61, 62, 63, 64,
	0, 92, 0, 43, 0, 0, 0, 0, 19, 0,
	0, 0, 0, 0, 0, 39, 75, 76, 30, 0,
	88, 0, 21, 0, 0, 0, 93, 20, 12, 11,
	0, 13, 0, 24, 0, 25, 0, 0, 14, 0,
	0, 0, 15, 16, 29, 0, 0, 17, 27, 0,
	0, 28, 0, 0, 18, 0, 23, 0, 51, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 0, 84,
	80, 81, 82, 77, 78, 0, 0, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 103, 83, 79, 95,
	0, 26, 8, 0, 50, 0, 0, 86, 89, 52,
	53, 54, 55, 56, 0, 0, 0, 0, 66, 67,
	0, 68, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 46, 47, 0, 0, 0, 0,
	48, 0, 49, 44, 45, 57, 58, 59, 60, 61,
	62, 63, 64, 0, 92, 0, 43, 0, 0, 0,
	0, 19, 0, 0, 0, 0, 0, 0, 39, 75,
	76, 30, 0, 88, 0, 21, 0, 0, 0, 93,
	20, 12, 11, 0, 13, 0, 24, 0, 25, 0,
	0, 14, 0, 0, 0, 15, 16, 29, 0, 0,
	17, 27, 0, 0, 28, 0, 0, 18, 0, 23,
	0, 51, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 0, 84, 80, 81, 82, 77, 78, 0, 0,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 103,
	83, 79, 95, 0, 26, 8, 0, 50, 0, 0,
	86, 89, 52, 53, 54, 55, 56, 0, 0, 0,
	0, 66, 67, 0, 68, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 498,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 46, 47, 0,
	0, 0, 0, 48, 0, 49, 44, 45, 57, 58,
	59, 60, 61, 62, 63, 64, 0, 92, 0, 43,
	0, 0, 0, 0, 19, 0, 0, 0, 0, 0,
	0, 39, 75, 76, 30, 0, 88, 0, 21, 0,
	0, 0, 93, 20, 12, 11, 0, 13, 0, 24,
	0, 25, 0, 0, 14, 0, 0, 0, 15, 16,
	29, 0, 0, 17, 27, 0, 0, 28, 0, 0,
	18, 0, 23, 0, 51, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 0, 84, 80, 81, 82, 77,
	78, 0, 0, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 103, 83, 79, 95, 0, 26, 8, 0,
	50, 0, 0, 86, 89, 52, 53, 54, 55, 56,
	0, 0, 0, 0, 66, 67, 0, 68, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 481, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	46, 47, 0, 0, 0, 0, 48, 0, 49, 44,
	45, 57, 58, 59, 60, 61, 62, 63, 64, 0,
	92, 0, 43, 0, 0, 0, 0, 19, 0, 0,
	0, 0, 0, 0, 39, 75, 76, 30, 0, 88,
	0, 21, 0, 0, 0, 93, 20, 12, 11, 0,
	13, 0, 24, 0, 25, 0, 0, 14, 0, 0,
	0, 15, 16, 29, 0, 0, 17, 27, 0, 0,
	28, 0, 0, 18, 0, 23, 0, 51, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 0, 84, 80,
	81, 82, 77, 78, 0, 0, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 103, 83, 79, 95, 0,
	26, 8, 0, 50, 0, 0, 86, 89, 52, 53,
	54, 55, 56, 0, 0, 0, 0, 66, 67, 0,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 46, 47, 0, 0, 0, 0, 48,
	0, 49, 44, 45, 57, 58, 59, 60, 61, 62,
	63, 64, 0, 92, 0, 43, 0, 0, 0, 0,
	19, 0, 0, 0, 0, 0, 0, 39, 75, 76,
	30, 0, 88, 0, 21, 0, 0, 0, 93, 20,
	12, 11, 0, 13, 0, 24, 0, 25, 0, 0,
	14, 0, 0, 0, 15, 16, 29, 0, 0, 17,
	27, 0, 0, 28, 0, 0, 18, 0, 23, 0,
	51, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	0, 84, 80, 81, 82, 77, 78, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 103, 83,
	79, 95, 0, 26, 8, 0, 50, 125, 124, 86,
	89, 343, 344, 345, 346, 347, 0, 348, 349, 350,
	386, 387, 0, 0, 0, 0, 147, 0, 148, 121,
	122, 126, 128, 127, 140, 141, 138, 139, 142, 143,
	144, 145, 146, 136, 137, 130, 131, 129, 132, 134,
	135, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 351, 133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 352, 353, 0,
	356, 357, 358, 337, 338, 339, 340, 341, 342, 354,
	355, 0, 0, 334, 0, 0, 0, 0, 0, 0,
	0, 0, 359, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 389, 390, 391, 392, 393, 381, 382,
	383, 384, 385, 370, 371, 372, 373, 374, 375, 376,
	377, 378, 379, 380, 0, 401, 399, 400, 396, 397,
	0, 388, 394, 395, 402, 403, 405, 404, 406, 407,
	343, 344, 345, 346, 347, 0, 348, 349, 350, 386,
	387, 398, 409, 408, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 352, 353, 0, 356,
	357, 358, 524, 525, 526, 523, 522, 521, 354, 355,
	0, 0, 682, 0, 0, 0, 0, 0, 0, 0,
	0, 359, 360, 361, 362, 363, 364, 365, 366, 367,
	368, 369, 389, 390, 391, 392, 393, 381, 382, 383,
	384, 385, 370, 371, 372, 373, 374, 375, 376, 377,
	378, 379, 380, 0, 401, 399, 400, 396, 397, 0,
	388, 394, 395, 402, 403, 405, 404, 406, 407, 0,
	0, 0, 0, 0, 52, 53, 54, 55, 56, 0,
	398, 409, 408, 66, 67, 0, 68, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 46,
	47, 0, 0, 0, 0, 48, 0, 49, 44, 45,
	57, 58, 59, 60, 61, 62, 63, 64, 0, 92,
	0, 43, 0, 123, 125, 124, 108, 0, 0, 0,
	0, 0, 0, 0, 75, 76, 99, 0, 88, 0,
	0, 0, 0, 147, 93, 148, 121, 122, 126, 128,
	127, 140, 141, 138, 139, 142, 143, 144, 145, 146,
	136, 137, 130, 131, 129, 132, 134, 135, 52, 53,
	54, 55, 56, 0, 0, 0, 51, 66, 67, 0,
	68, 133, 0, 0, 233, 91, 0, 84, 80, 81,
	82, 77, 78, 0, 0, 0, 0, 0, 0, 85,
	0, 476, 0, 0, 103, 83, 79, 95, 0, 0,
	0, 0, 50, 46, 47, 86, 89, 0, 0, 48,
	0, 49, 44, 45, 57, 58, 59, 60, 61, 62,
	63, 64, 0, 92, 0, 43, 0, 0, 0, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 75, 76,
	99, 0, 88, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 528, 0, 0, 0,
	0, 0, 52, 53, 54, 55, 56, 0, 0, 0,
	51, 66, 67, 0, 68, 0, 0, 0, 477, 91,
	0, 84, 80, 81, 82, 77, 78, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 103, 83,
	79, 95, 0, 0, 0, 0, 50, 46, 47, 86,
	89, 0, 0, 48, 0, 49, 44, 45, 57, 58,
	59, 60, 61, 62, 63, 64, 0, 92, 0, 43,
	0, 123, 125, 124, 108, 0, 0, 0, 0, 0,
	0, 0, 75, 76, 99, 420, 88, 0, 0, 0,
	0, 147, 93, 148, 121, 122, 126, 128, 127, 140,
	141, 138, 139, 142, 143, 144, 145, 146, 136, 137,
	130, 131, 129, 132, 134, 135, 52, 53, 54, 55,
	56, 0, 0, 0, 51, 66, 67, 0, 68, 133,
	0, 0, 0, 91, 0, 84, 80, 81, 82, 77,
	78, 0, 0, 0, 0, 0, 0, 85, 0, 307,
	0, 0, 103, 83, 79, 95, 0, 0, 0, 0,
	50, 46, 47, 86, 89, 0, 0, 48, 0, 49,
	44, 45, 57, 58, 59, 60, 61, 62, 63, 64,
	0, 92, 0, 43, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 0, 0, 0, 75, 76, 99, 0,
	88, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 527, 0, 0, 0, 0, 0,
	52, 53, 54, 55, 56, 0, 0, 0, 51, 66,
	67, 0, 68, 0, 0, 0, 0, 91, 0, 84,
	80, 81, 82, 77, 78, 0, 0, 286, 0, 0,
	0, 85, 0, 0, 0, 0, 103, 83, 79, 95,
	0, 0, 0, 0, 50, 46, 47, 86, 89, 0,
	0, 48, 0, 49, 44, 45, 57, 58, 59, 60,
	61, 62, 63, 64, 0, 92, 0, 43, 0, 123,
	125, 124, 108, 0, 0, 0, 0, 0, 0, 0,
	75, 76, 99, 0, 88, 0, 0, 0, 0, 147,
	93, 148, 121, 122, 126, 128, 127, 140, 141, 138,
	139, 142, 143, 144, 145, 146, 136, 137, 130, 131,
	129, 132, 134, 135, 52, 53, 54, 55, 56, 0,
	0, 0, 51, 66, 67, 0, 68, 133, 0, 0,
	0, 91, 0, 84, 80, 81, 82, 77, 78, 0,
	0, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	103, 83, 79, 95, 0, 0, 0, 0, 50, 46,
	47, 86, 89, 0, 0, 48, 0, 49, 44, 45,
	57, 58, 59, 60, 61, 62, 63, 64, 0, 92,
	0, 43, 0, 0, 0, 0, 108, 0, 0, 0,
	0, 0, 0, 0, 75, 76, 99, 0, 88, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 51, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 0, 84, 80, 81,
	82, 77, 78, 0, 0, 0, 0, 0, 0, 85,
	123, 125, 124, 0, 103, 83, 79, 95, 0, 0,
	0, 0, 50, 0, 0, 86, 89, 0, 0, 0,
	147, 0, 148, 121, 122, 126, 128, 127, 140, 141,
	138, 139, 142, 143, 144, 145, 146, 136, 137, 130,
	131, 129, 132, 134, 135, 123, 125, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 0, 0, 0, 0, 147, 0, 148, 121, 122,
	126, 128, 127, 140, 141, 138, 139, 142, 143, 144,
	145, 146, 136, 137, 130, 131, 129, 132, 134, 135,
	123, 125, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 0, 0,
	147, 0, 148, 121, 122, 126, 128, 127, 140, 141,
	138, 139, 142, 143, 144, 145, 146, 136, 137, 130,
	131, 129, 132, 134, 135, 123, 125, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 0, 0, 459, 0, 147, 0, 148, 121, 122,
	126, 128, 127, 140, 141, 138, 139, 142, 143, 144,
	145, 146, 136, 137, 130, 131, 129, 132, 134, 135,
	123, 125, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 458, 0,
	147, 0, 148, 121, 122, 126, 128, 127, 140, 141,
	138, 139, 142, 143, 144, 145, 146, 136, 137, 130,
	131, 129, 132, 134, 135, 123, 125, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 0, 0, 456, 0, 147, 0, 148, 121, 122,
	126, 128, 127, 140, 141, 138, 139, 142, 143, 144,
	145, 146, 136, 137, 130, 131, 129, 132, 134, 135,
	123, 125, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 435, 0,
	147, 0, 148, 121, 122, 126, 128, 127, 140, 141,
	138, 139, 142, 143, 144, 145, 146, 136, 137, 130,
	131, 129, 132, 134, 135, 123, 125, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 0, 0, 431, 0, 147, 0, 148, 121, 122,
	126, 128, 127, 140, 141, 138, 139, 142, 143, 144,
	145, 146, 136, 137, 130, 131, 129, 132, 134, 135,
	123, 125, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 328, 0,
	147, 0, 148, 121, 122, 126, 128, 127, 140, 141,
	138, 139, 142, 143, 144, 145, 146, 136, 137, 130,
	131, 129, 132, 134, 135, 123, 125, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 532, 0, 0, 0, 147, 617, 148, 121, 122,
	126, 128, 127, 140, 141, 138, 139, 142, 143, 144,
	145, 146, 136, 137, 130, 131, 129, 132, 134, 135,
	123, 125, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 472, 0, 0, 0,
	147, 0, 148, 121, 122, 126, 128, 127, 140, 141,
	138, 139, 142, 143, 144, 145, 146, 136, 137, 130,
	131, 129, 132, 134, 135, 123, 125, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 468, 0, 0, 0, 147, 0, 148, 121, 122,
	126, 128, 127, 140, 141, 138, 139, 142, 143, 144,
	145, 146, 136, 137, 130, 131, 129, 132, 134, 135,
	123, 125, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 618, 0, 0, 0, 0, 0,
	147, 0, 148, 121, 122, 126, 128, 127, 140, 141,
	138, 139, 142, 143, 144, 145, 146, 136, 137, 130,
	131, 129, 132, 134, 135, 123, 125, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 296,
	0, 0, 0, 0, 0, 147, 440, 148, 121, 122,
	126, 128, 127, 140, 141, 138, 139, 142, 143, 144,
	145, 146, 136, 137, 130, 131, 129, 132, 134, 135,
	0, 123, 125, 124, 0, 444, 427, 0, 0, 0,
	0, 0, 0, 133, 120, 0, 0, 0, 0, 0,
	0, 147, 0, 148, 121, 122, 126, 128, 127, 140,
	141, 138, 139, 142, 143, 144, 145, 146, 136, 137,
	130, 131, 129, 132, 134, 135, 123, 125, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	0, 0, 0, 0, 0, 0, 147, 0, 148, 121,
	122, 126, 128, 127, 140, 141, 138, 139, 142, 143,
	144, 145, 146, 136, 137, 130, 131, 129, 132, 134,
	135, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133,
}
var yyPact = [...]int{

	-1000, -1000, 3046, -1000, -1000, -1000, -1000, 229, -1000, -1000,
	-1000, 39, 4024, 23, 21, 5040, 5040, 5040, -52, 297,
	5040, -1000, 5675, 4, 3, -41, -1000, 64, 5040, 382,
	481, 435, 361, 380, 411, 419, 2408, -1000, -1000, -42,
	-1000, -1000, 189, 5040, 296, 296, 5040, 5040, 5040, 5040,
	5040, -43, 5040, 5040, -55, 5040, 5040, 5040, 5040, 5040,
	5040, 5040, 5040, 5040, 5040, -1000, 5040, 5040, 5040, -1000,
	-1000, -1000, 168, 166, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 271, 268, -1000, -1000, 76,
	-1000, -58, 4470, -1000, -1000, 378, 144, 378, 141, -1000,
	2720, 5040, 263, 84, 5040, 5040, 140, 5856, -1000, 139,
	138, 224, -1000, -1000, 222, -1000, 509, 220, -1000, 5856,
	-1000, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040,
	5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040,
	5040, 5040, 5040, 5040, 5040, 5040, 5040, 4926, 5040, 296,
	5040, 309, -1000, 5630, 129, -1000, 374, -1000, 365, -1000,
	63, -63, 4024, -66, 126, 479, 4812, 5040, 5040, 5040,
	5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, -1000,
	-1000, 5040, 123, -1000, -1000, 165, 163, 5040, -1000, -1000,
	-1000, 401, 401, 401, 401, 5405, 5040, 5856, 5856, 5040,
	5856, 5856, 401, 401, 401, 401, 401, 401, 401, 401,
	789, 1075, 789, 654, 654, 292, -1000, 237, -1000, 258,
	4698, 296, 93, 285, 5040, -1000, 4470, -123, 528, -1000,
	-1000, 5811, 296, -67, -1000, 363, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 5360, -68, 125, 526, 5856, 5315, -1000,
	-1000, -1000, -1000, -52, -1000, 297, 5040, -1000, 5040, 1399,
	1562, 4176, 789, 929, 1725, 2047, 1885, 445, 445, 445,
	401, 401, 401, 401, 547, 547, 2205, 2205, 2205, 2205,
	2205, 506, 506, 506, 506, 5765, 5040, 1238, 525, -1000,
	-1000, 5720, 36, -1000, 508, 2557, -1000, -1000, -70, 59,
	-1000, 5040, -1000, 5040, -1000, -1000, 789, 5040, 789, 789,
	789, 789, 789, 789, 789, 789, 789, 789, 789, 789,
	5270, -1000, -1000, 5040, -1000, -52, -52, 5225, -1000, 5180,
	4989, 5040, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 402, 354, 5540,
	34, 46, -1000, 5495, -80, -1000, 4470, 4584, -1000, 4470,
	-1000, 3861, 5040, 5040, 5040, 197, -1000, -1000, 5856, -1000,
	5040, 1238, -81, 296, 120, 3698, 309, 5040, -1000, 160,
	-1000, 82, 4761, 4533, 2394, 2047, 3535, 5450, -1000, -1000,
	-1000, 789, -124, -1000, -1000, 281, -1000, -1000, -1000, -1000,
	5040, -1000, -1000, -1000, -1000, 5856, 296, -71, -82, -1000,
	-1000, -1000, 364, 117, 5856, -1000, 113, 111, 1238, 109,
	-1000, 28, -1000, 296, -72, 4470, -1000, -1000, -1000, -1000,
	5856, 211, -85, 523, -1000, 440, -1000, -1000, 112, -1000,
	-1000, -1000, 32, -1000, -1000, 289, 253, 152, 425, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 4024, 478, 106,
	-1000, -1000, -1000, -1000, -1000, 301, -1000, 4470, -1000, 2231,
	103, 5040, -8, -1000, 338, -1000, -1000, 3209, 120, -1000,
	4470, -126, 2068, -1000, -76, 55, 464, 160, 77, -1000,
	-1000, -1000, 209, -1000, 505, 4187, 435, 80, -1000, -1000,
	-1000, -1000, -1000, 2883, 33, -86, 102, -1000, -89, -1000,
	5040, 199, -11, 94, 317, -1000, -1000, -1000, -90, -92,
	-1000, 92, 152, -1000, 53, 160, -1000, 290, -1000, -1000,
	289, 5040, 203, -1000, 504, 4187, -1000, 152, -1000, 932,
	2883, -1000, -1000, -1000, 3372, 5585, -1000, -1000, -1000, -1000,
	-1000, 91, 1905, 3209, -1000, -1000, 394, -1000, 1742, -1000,
	-1000, 501, -1000, 5856, -1000, 4187, 5040, -78, -1000, -1000,
	793, -1000, 78, 75, 202, 221, 157, -1000, 84, -1000,
	-1000, -1000, -1000, -1000, 2883, -1000, 73, -1000, -111, 152,
	-1000, 1579, 5040, -1000, 5856, 160, -1000, -1000, -1000, -1000,
	152, 4326, 4187, 1416, 2883, -1000, 50, -1000, -1000, 5856,
	-117, 521, -1000, -1000, 4187, -1000, 67, -1000, 464, -1000,
	-1000, 1253, 44, -1000, -1000, -1000, -1000, 1090, -1000,
}
var yyPgo = [...]int{

	0, 508, 681, 680, 15, 5, 679, 2, 674, 363,
	673, 30, 670, 24, 669, 1, 657, 587, 540, 656,
	3, 13, 22, 6, 653, 19, 0, 652, 651, 72,
	66, 650, 647, 646, 644, 642, 20, 641, 636, 635,
	32, 550, 633, 39, 632, 35, 630, 31, 629, 23,
	14, 33, 28, 628, 625, 10, 624, 26, 622, 620,
	617, 616, 25, 614, 611, 610, 4, 607, 12, 606,
	9, 605, 7, 604, 603, 8, 594, 593, 592, 586,
	585, 580, 457, 55, 575, 570, 70, 42, 569, 34,
	565, 561, 546, 545, 11,
}
var yyR1 = [...]int{

	0, 92, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 6,
	6, 6, 6, 6, 6, 6, 7, 7, 10, 10,
	9, 11, 11, 11, 12, 12, 8, 8, 8, 8,
	15, 15, 14, 14, 14, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 59,
	59, 60, 60, 61, 61, 56, 56, 57, 58, 58,
	31, 31, 32, 32, 33, 33, 34, 34, 35, 35,
	36, 36, 37, 37, 39, 39, 39, 39, 40, 40,
	40, 94, 94, 38, 38, 50, 50, 50, 50, 51,
	52, 52, 53, 53, 54, 54, 54, 54, 54, 54,
	55, 55, 42, 42, 43, 44, 44, 45, 45, 46,
	46, 47, 48, 48, 49, 93, 93, 17, 17, 16,
	16, 1, 1, 62, 62, 63, 63, 63, 63, 72,
	72, 73, 73, 73, 74, 74, 75, 75, 76, 77,
	77, 77, 77, 78, 78, 79, 80, 80, 64, 64,
	69, 69, 70, 71, 71, 65, 65, 66, 66, 66,
	66, 66, 66, 67, 67, 68, 68, 18, 23, 23,
	24, 24, 25, 25, 19, 19, 4, 4, 2, 2,
	3, 3, 21, 21, 22, 22, 22, 20, 20, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 82, 82,
	82, 82, 83, 83, 83, 83, 83, 83, 83, 84,
	84, 84, 84, 85, 85, 85, 86, 86, 87, 88,
	88, 88, 89, 89, 89, 26, 26, 41, 41, 28,
	29, 29, 29, 91, 91, 91, 30, 30, 30, 90,
	90,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 1, 2, 3, 2, 0, 1, 1, 1, 3,
	2, 0, 1, 1, 1, 3, 1, 1, 5, 7,
	9, 5, 3, 3, 3, 3, 3, 3, 1, 2,
	6, 7, 9, 5, 1, 6, 3, 3, 2, 0,
	9, 1, 3, 0, 4, 3, 1, 3, 1, 4,
	5, 6, 1, 3, 6, 7, 3, 6, 1, 4,
	0, 1, 3, 1, 3, 4, 4, 5, 0, 5,
	4, 1, 1, 1, 4, 1, 2, 4, 3, 1,
	0, 1, 3, 1, 3, 1, 4, 2, 6, 4,
	1, 4, 3, 1, 1, 3, 1, 1, 3, 3,
	1, 1, 1, 3, 1, 0, 1, 6, 5, 1,
	2, 1, 1, 2, 0, 3, 4, 3, 9, 1,
	3, 1, 2, 3, 1, 2, 2, 2, 3, 3,
	3, 4, 3, 1, 1, 3, 1, 3, 1, 1,
	3, 1, 3, 0, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 3, 10, 1, 0,
	1, 3, 4, 6, 0, 1, 0, 1, 0, 1,
	0, 1, 1, 2, 1, 1, 1, 0, 2, 3,
	4, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	4, 3, 4, 2, 2, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 2, 1, 2,
	4, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 3, 3, 1, 1, 2, 2,
	1, 2, 1, 4, 3, 3, 3, 6, 3, 1,
	1, 2, 1, 1, 3, 3, 1, 1, 1, 1,
	3, 1, 4, 3, 1, 1, 1, 0, 1, 1,
	1, 1, 3, 1, 3, 1, 1, 4, 2, 3,
	3,
}
var yyChk = [...]int{

	-1000, -92, -12, -8, -13, -18, -17, 154, 160, -32,
	-34, 97, 96, 99, 106, 110, 111, 115, 122, 76,
	95, 90, -26, 124, 101, 103, 159, 116, 119, 112,
	86, 113, -16, 128, -31, -33, -29, -27, -1, 83,
	-28, -90, -88, 71, 58, 59, 49, 50, 55, 57,
	162, 126, 4, 5, 6, 7, 8, 60, 61, 62,
	63, 64, 65, 66, 67, -81, 13, 14, 16, 77,
	78, -30, -86, -87, -89, 84, 85, 141, 142, 156,
	138, 139, 140, 155, 137, 149, 165, -85, 88, 166,
	-11, 135, 69, 94, -9, 157, -10, 157, -9, 86,
	-15, 162, -13, 154, 162, 162, -41, -26, 76, -41,
	-41, -42, -43, -30, -44, -45, 88, -46, -47, -26,
	159, 33, 34, 10, 12, 11, 35, 37, 36, 51,
	49, 50, 52, 68, 53, 54, 47, 48, 40, 41,
	38, 39, 42, 43, 44, 45, 46, 30, 32, 162,
	162, 162, 160, -26, 86, 31, -4, 37, 128, -1,
	86, 73, 74, 73, 75, 74, 17, 18, 19, 20,
	29, 21, 22, 23, 24, 25, 26, 27, 28, 58,
	59, 162, 133, -26, -29, -86, -87, 162, -89, -11,
	-29, -26, -26, -26, -26, -26, 162, -26, -26, 162,
	-26, -26, -26, -26, -26, -26, -26, -26, -26, -26,
	-26, -26, -26, 153, 153, 93, 150, -82, -83, 88,
	151, 152, -82, 93, 160, -30, 162, -51, -53, -52,
	-54, -26, 37, 134, -9, 157, -9, 159, -14, 161,
	-13, -18, -17, -26, 97, -36, -37, -26, -26, 159,
	159, 159, 159, 9, 159, 9, 17, 159, 9, -26,
	-26, -26, -26, -26, -26, -26, -26, -26, -26, -26,
	-26, -26, -26, -26, -26, -26, -26, -26, -26, -26,
	-26, -26, -26, -26, -26, -26, 31, -26, -48, -49,
	-29, -26, -56, -57, 86, -15, 159, 159, 86, 86,
	160, 162, -13, 162, 159, 31, -26, 37, -26, -26,
	-26, -26, -26, -26, -26, -26, -26, -26, -26, -26,
	-26, -91, 86, 160, -30, 153, 153, -26, 163, -26,
	-26, 15, -7, -30, 86, -6, -5, 76, 77, 78,
	79, 80, 81, 4, 5, 6, 7, 8, 10, 11,
	12, 56, 70, 71, 82, 83, 73, 74, 75, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 111, 112, 113, 114, 115, 13, 14, 134, 106,
	107, 108, 109, 110, 135, 136, 131, 132, 154, 129,
	130, 128, 137, 138, 140, 139, 141, 142, 156, 155,
	-7, -30, 150, -83, 150, -83, 93, 69, 133, -26,
	87, -29, 165, -26, -51, 164, 9, 15, -29, 162,
	86, 163, 162, 159, 9, 163, -43, -45, -26, -47,
	31, -26, -93, 9, 105, 163, 9, 17, 161, 162,
	160, -62, -26, -26, -15, -26, 163, -26, 163, 163,
	163, -26, -84, 86, 89, 50, 88, 86, 161, 161,
	69, 161, 161, 163, -52, -26, 37, 134, -51, -35,
	-13, 31, -26, -36, -26, -39, 160, 31, -26, 163,
	-49, -50, -29, 37, 134, 69, -58, -13, 31, -57,
	-26, -59, -23, -24, -25, -19, -21, -22, 30, -11,
	135, 136, -62, 161, -63, -64, -71, 120, -65, 123,
	-66, 81, 80, 79, 76, 77, 78, 163, 163, 75,
	-13, 31, 161, 164, 89, -26, -29, 162, 163, -15,
	163, 159, -40, 159, -40, 159, 159, 163, 15, -29,
	162, -51, -15, -61, 117, 118, 163, 9, -2, 37,
	-22, 161, -67, -68, 88, 114, 113, -72, -11, -66,
	-13, 31, 159, -15, 164, -51, 98, 159, -36, 161,
	108, 109, -40, 107, -40, -55, -13, 31, -50, -51,
	164, 104, 162, 160, -20, 31, -25, -3, 158, 159,
	9, 17, -69, -70, -7, -4, -73, 9, 159, 160,
	-15, 161, 163, 159, 163, -26, -94, 31, 159, 161,
	159, 107, -15, 163, 163, 159, -60, -11, -15, 160,
	-21, 88, -68, -26, 159, 9, 17, -7, -11, 161,
	-74, -75, -76, -77, -79, -78, -11, -7, 154, 86,
	-38, -13, 31, -94, -15, 159, 102, -55, 88, 35,
	161, -15, 17, -70, -26, 162, 161, -75, 159, 159,
	121, 105, 153, -15, -15, 159, 163, -11, 161, -26,
	-23, -72, 86, -5, -66, -7, 100, 160, 163, -7,
	159, -15, -20, 161, -80, 159, 160, -15, 161,
}
var yyDef = [...]int{

	85, -2, 1, 84, 86, 87, 88, 0, 91, 96,
	97, 0, 0, 0, 0, 377, 377, 377, 0, 366,
	0, 108, 0, 0, 0, 0, 114, 0, 0, 0,
	78, 246, 0, 0, 132, 0, -2, 376, 189, 0,
	380, 381, 368, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 328, 0, 191,
	192, 379, 0, 0, -2, 332, 333, 334, 335, 336,
	337, 338, 339, 340, 341, 0, 0, 347, 386, 0,
	-2, 0, 160, 374, 81, 0, 80, 0, 0, 78,
	0, 0, 0, 0, 140, 0, 0, 378, 366, 0,
	0, 0, 173, 174, 0, 176, 177, 0, 180, 181,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 0, 0, 118, 0, 247, 0, 190,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	276, 0, 0, 261, -2, 0, 0, 0, 371, 367,
	-2, 295, 296, 297, 298, 0, 0, 313, 314, 0,
	316, 317, 318, 319, 320, 321, 322, 323, 324, 325,
	327, 329, 331, 0, 0, 0, 343, 0, 350, 352,
	0, 0, 0, 0, 0, 388, 160, 0, 159, 163,
	161, 165, 0, 0, 82, 0, 83, 89, 90, 95,
	92, 93, 94, 0, 0, 0, 141, 143, 0, 102,
	103, 104, 105, 0, 106, 0, 0, 107, 0, 278,
	279, 280, 281, 282, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 0, 0, 311, 185, 182,
	-2, 0, 0, 126, 0, 0, 116, 117, 0, 0,
	194, 0, 133, 0, 136, 91, 259, 0, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 382, 383, 0, 385, 0, 0, 0, -2, 0,
	0, 0, 364, 389, 76, 77, 69, 70, 71, 72,
	73, 74, 75, 2, 3, 4, 5, 6, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
	29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
	39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	365, 390, 342, 351, 345, 348, 349, 0, 0, 0,
	0, 369, 344, 0, 0, 373, 160, 0, -2, 160,
	79, 0, 0, 140, 0, 0, 172, 175, 178, 179,
	0, 310, 0, 186, 0, 0, 0, 0, 119, -2,
	194, 223, 0, 0, 0, 260, 0, 0, 370, 312,
	315, 330, 0, 359, 360, 0, 362, 354, 355, 356,
	0, 358, 387, 372, 162, 164, 0, 0, 0, 98,
	138, 91, 0, 0, 142, 101, 148, 148, 309, 0,
	183, 0, -2, 0, 0, 160, 113, 128, 91, 125,
	127, 123, 0, 238, 240, 248, 245, 252, 0, 254,
	255, 256, 223, 188, 193, 0, 0, 0, -2, 219,
	225, 227, 228, 229, 230, 231, 232, 0, 0, 0,
	130, 91, 384, 353, 361, 0, -2, 160, 169, 0,
	0, 140, 0, 148, 0, 148, 110, 0, 0, -2,
	160, 0, 0, 115, 0, 0, 257, 244, 250, 249,
	253, 187, 0, 234, 235, 0, 246, 0, 199, 226,
	131, 91, 137, 134, 0, 0, 0, 99, 0, 144,
	0, 0, 0, 0, 0, 111, 170, 91, 0, 0,
	-2, 0, 0, 91, 0, 0, 241, 0, 251, 195,
	0, 0, 0, 221, 0, 0, 197, 0, 201, 0,
	135, 357, 168, 139, 0, 0, 91, 151, 152, 145,
	146, 0, 0, 0, 157, 129, 0, 121, 0, 91,
	258, 242, 233, 236, 196, 0, 0, 0, 200, 202,
	0, 204, 0, 0, 214, 0, 0, 213, 57, -2,
	100, 153, 91, 91, 150, 147, 0, 112, 0, 0,
	124, 0, 0, 220, 222, -2, 203, 205, 206, 207,
	0, 0, 0, 0, 149, 171, 0, 122, 237, 243,
	0, 208, 209, 210, 212, 215, 0, 91, 257, 211,
	154, 0, 0, 120, 198, 216, 91, 0, 217,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 55, 165, 3, 166, 54, 37, 3,
	162, 163, 52, 49, 9, 50, 51, 53, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 31, 159,
	43, 17, 45, 30, 67, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 69, 3, 164, 36, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 160, 35, 161, 57,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 10, 11, 12,
	13, 14, 15, 16, 18, 19, 20, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 32, 33, 34, 38,
	39, 40, 41, 42, 44, 46, 47, 48, 56, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 68, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 157, 158,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:290
		{
			fmt.Println(yyDollar[1].node)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:294
		{
			yyVAL.value = yyDollar[1].token
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:294
		{
			yyVAL.value = yyDollar[1].token
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:294
		{
			yyVAL.value = yyDollar[1].token
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:294
		{
			yyVAL.value = yyDollar[1].token
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:294
		{
			yyVAL.value = yyDollar[1].token
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:294
		{
			yyVAL.value = yyDollar[1].token
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:294
		{
			yyVAL.value = yyDollar[1].token
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:294
		{
			yyVAL.value = yyDollar[1].token
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:295
		{
			yyVAL.value = yyDollar[1].token
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:295
		{
			yyVAL.value = yyDollar[1].token
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:295
		{
			yyVAL.value = yyDollar[1].token
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:295
		{
			yyVAL.value = yyDollar[1].token
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:295
		{
			yyVAL.value = yyDollar[1].token
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:295
		{
			yyVAL.value = yyDollar[1].token
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:295
		{
			yyVAL.value = yyDollar[1].token
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:295
		{
			yyVAL.value = yyDollar[1].token
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:295
		{
			yyVAL.value = yyDollar[1].token
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:295
		{
			yyVAL.value = yyDollar[1].token
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:295
		{
			yyVAL.value = yyDollar[1].token
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:295
		{
			yyVAL.value = yyDollar[1].token
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:296
		{
			yyVAL.value = yyDollar[1].token
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:296
		{
			yyVAL.value = yyDollar[1].token
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:296
		{
			yyVAL.value = yyDollar[1].token
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:296
		{
			yyVAL.value = yyDollar[1].token
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:296
		{
			yyVAL.value = yyDollar[1].token
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:296
		{
			yyVAL.value = yyDollar[1].token
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:296
		{
			yyVAL.value = yyDollar[1].token
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:296
		{
			yyVAL.value = yyDollar[1].token
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:296
		{
			yyVAL.value = yyDollar[1].token
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:296
		{
			yyVAL.value = yyDollar[1].token
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:297
		{
			yyVAL.value = yyDollar[1].token
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:297
		{
			yyVAL.value = yyDollar[1].token
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:297
		{
			yyVAL.value = yyDollar[1].token
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:297
		{
			yyVAL.value = yyDollar[1].token
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:297
		{
			yyVAL.value = yyDollar[1].token
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:297
		{
			yyVAL.value = yyDollar[1].token
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:297
		{
			yyVAL.value = yyDollar[1].token
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:297
		{
			yyVAL.value = yyDollar[1].token
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:297
		{
			yyVAL.value = yyDollar[1].token
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:297
		{
			yyVAL.value = yyDollar[1].token
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:298
		{
			yyVAL.value = yyDollar[1].token
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:298
		{
			yyVAL.value = yyDollar[1].token
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:298
		{
			yyVAL.value = yyDollar[1].token
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:298
		{
			yyVAL.value = yyDollar[1].token
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:298
		{
			yyVAL.value = yyDollar[1].token
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:298
		{
			yyVAL.value = yyDollar[1].token
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:298
		{
			yyVAL.value = yyDollar[1].token
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:298
		{
			yyVAL.value = yyDollar[1].token
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:298
		{
			yyVAL.value = yyDollar[1].token
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:298
		{
			yyVAL.value = yyDollar[1].token
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:298
		{
			yyVAL.value = yyDollar[1].token
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:299
		{
			yyVAL.value = yyDollar[1].token
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:299
		{
			yyVAL.value = yyDollar[1].token
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:299
		{
			yyVAL.value = yyDollar[1].token
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:299
		{
			yyVAL.value = yyDollar[1].token
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:299
		{
			yyVAL.value = yyDollar[1].token
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:299
		{
			yyVAL.value = yyDollar[1].token
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:299
		{
			yyVAL.value = yyDollar[1].token
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:299
		{
			yyVAL.value = yyDollar[1].token
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:300
		{
			yyVAL.value = yyDollar[1].token
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:300
		{
			yyVAL.value = yyDollar[1].token
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:300
		{
			yyVAL.value = yyDollar[1].token
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:300
		{
			yyVAL.value = yyDollar[1].token
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:300
		{
			yyVAL.value = yyDollar[1].token
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:300
		{
			yyVAL.value = yyDollar[1].token
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:300
		{
			yyVAL.value = yyDollar[1].token
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:300
		{
			yyVAL.value = yyDollar[1].token
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:304
		{
			yyVAL.value = yyDollar[1].value
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:305
		{
			yyVAL.value = yyDollar[1].token
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:305
		{
			yyVAL.value = yyDollar[1].token
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:305
		{
			yyVAL.value = yyDollar[1].token
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:305
		{
			yyVAL.value = yyDollar[1].token
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:305
		{
			yyVAL.value = yyDollar[1].token
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:305
		{
			yyVAL.value = yyDollar[1].token
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:309
		{
			yyVAL.node = Node("identifier").attribute("value", yyDollar[1].token)
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:310
		{
			yyVAL.node = Node("identifier").attribute("value", yyDollar[1].value)
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:314
		{
			yyVAL.node = Node("NamespaceParts").append(Node(yyDollar[1].token))
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:315
		{
			yyVAL.node = yyDollar[1].node.append(Node(yyDollar[3].token))
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:319
		{
			yyVAL.node = yyDollar[1].node
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:323
		{
			yyVAL.node = Node("Name").append(yyDollar[1].node)
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:324
		{
			yyVAL.node = Node("Name").append(yyDollar[2].node).attribute("FullyQualified", "true")
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:325
		{
			yyVAL.node = Node("Name").append(yyDollar[3].node).attribute("Relative", "true")
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:329
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[2].node)
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:330
		{
			yyVAL.node = Node("Statements")
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:334
		{
			yyVAL.node = yyDollar[1].node
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:335
		{
			yyVAL.node = yyDollar[1].node
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:336
		{
			yyVAL.node = yyDollar[1].node
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:337
		{
			yyVAL.node = Node("Namespace").append(yyDollar[2].node)
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:341
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[2].node)
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:342
		{
			yyVAL.node = Node("stmt")
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:346
		{
			yyVAL.node = yyDollar[1].node
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:347
		{
			yyVAL.node = yyDollar[1].node
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:348
		{
			yyVAL.node = yyDollar[1].node
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:351
		{
			yyVAL.node = yyDollar[2].node
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:352
		{
			yyVAL.node = yyDollar[1].node
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:353
		{
			yyVAL.node = yyDollar[1].node
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:355
		{
			yyVAL.node = Node("While").
				append(Node("expr").append(yyDollar[3].node)).
				append(Node("stmt").append(yyDollar[5].node))
		}
	case 99:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:361
		{
			yyVAL.node = Node("DoWhile").
				append(Node("expr").append(yyDollar[5].node)).
				append(Node("stmt").append(yyDollar[2].node))
		}
	case 100:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:367
		{
			yyVAL.node = Node("For").
				append(Node("expr1").append(yyDollar[3].node)).
				append(Node("expr2").append(yyDollar[5].node)).
				append(Node("expr3").append(yyDollar[7].node)).
				append(Node("stmt").append(yyDollar[9].node))
		}
	case 101:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:374
		{
			yyVAL.node = Node("Switch").append(Node("expr").append(yyDollar[3].node)).append(yyDollar[5].node)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:375
		{
			yyVAL.node = Node("Break").append(yyDollar[2].node)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:376
		{
			yyVAL.node = Node("Continue").append(yyDollar[2].node)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:377
		{
			yyVAL.node = Node("Return").append(yyDollar[2].node)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:378
		{
			yyVAL.node = yyDollar[2].node
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:379
		{
			yyVAL.node = yyDollar[2].node
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:380
		{
			yyVAL.node = yyDollar[2].node
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:381
		{
			yyVAL.node = Node("Echo").append(Node("InlineHtml").attribute("value", yyDollar[1].token))
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:382
		{
			yyVAL.node = yyDollar[1].node
		}
	case 110:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:384
		{
			yyVAL.node = Node("Unset").append(yyDollar[3].node)
		}
	case 111:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:386
		{
			yyVAL.node = Node("Foreach").
				append(Node("expr").append(yyDollar[3].node)).
				append(Node("ForeachVariable").append(yyDollar[5].node)).
				append(yyDollar[7].node)
		}
	case 112:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:393
		{
			yyVAL.node = Node("Foreach").
				append(Node("expr").append(yyDollar[3].node)).
				append(Node("ForeachKey").append(yyDollar[5].node)).
				append(Node("ForeachVariable").append(yyDollar[7].node)).
				append(yyDollar[9].node)
		}
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:400
		{
			yyVAL.node = Node("Declare").append(yyDollar[3].node).append(yyDollar[5].node)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:401
		{
			yyVAL.node = Node("")
		}
	case 115:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:403
		{
			yyVAL.node = Node("Try").
				append(yyDollar[3].node).
				append(yyDollar[5].node).
				append(yyDollar[6].node)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:409
		{
			yyVAL.node = Node("Throw").append(yyDollar[2].node)
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:410
		{
			yyVAL.node = Node("GoTo").attribute("Label", yyDollar[2].token)
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:411
		{
			yyVAL.node = Node("Label").attribute("name", yyDollar[1].token)
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:414
		{
			yyVAL.node = Node("CatchList")
		}
	case 120:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:416
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[4].node).append(Node("Variable").attribute("name", yyDollar[5].token)).append(yyDollar[8].node)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:419
		{
			yyVAL.node = Node("CatchNameList").append(yyDollar[1].node)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:420
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:424
		{
			yyVAL.node = Node("")
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:425
		{
			yyVAL.node = Node("Finnaly").append(yyDollar[3].node)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:429
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:430
		{
			yyVAL.node = Node("ConstList").append(yyDollar[1].node)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:434
		{
			yyVAL.node = Node("Const").attribute("name", yyDollar[1].token).append(yyDollar[3].node)
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:438
		{
			yyVAL.node = yyDollar[1].node
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:439
		{
			yyVAL.node = yyDollar[2].node
		}
	case 130:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:444
		{
			yyVAL.node = Node("If").append(Node("expr").append(yyDollar[3].node)).append(Node("stmt").append(yyDollar[5].node))
		}
	case 131:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:448
		{
			yyVAL.node = yyDollar[1].node.append(Node("ElseIf").append(Node("expr").append(yyDollar[4].node)).append(Node("stmt").append(yyDollar[6].node)))
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:454
		{
			yyVAL.node = yyDollar[1].node
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:456
		{
			yyVAL.node = yyDollar[1].node.append(Node("Else").append(Node("stmt").append(yyDollar[3].node)))
		}
	case 134:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:463
		{
			yyVAL.node = Node("AltIf").append(Node("expr").append(yyDollar[3].node)).append(Node("stmt").append(yyDollar[6].node))
		}
	case 135:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:467
		{
			yyVAL.node = yyDollar[1].node.append(Node("AltElseIf").append(Node("expr").append(yyDollar[4].node)).append(Node("stmt").append(yyDollar[7].node)))
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:473
		{
			yyVAL.node = yyDollar[1].node
		}
	case 137:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:475
		{
			yyVAL.node = yyDollar[1].node.append(Node("AltElse").append(Node("stmt").append(yyDollar[4].node)))
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:481
		{
			yyVAL.node = yyDollar[1].node
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:482
		{
			yyVAL.node = yyDollar[2].node
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:486
		{
			yyVAL.node = Node("")
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:487
		{
			yyVAL.node = yyDollar[1].node
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:490
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:491
		{
			yyVAL.node = Node("ExpressionList").append(yyDollar[1].node)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:495
		{
			yyVAL.node = yyDollar[2].node
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:496
		{
			yyVAL.node = yyDollar[3].node
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:497
		{
			yyVAL.node = yyDollar[2].node
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:498
		{
			yyVAL.node = yyDollar[3].node
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:502
		{
			yyVAL.node = Node("CaseList")
		}
	case 149:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:504
		{
			yyVAL.node = yyDollar[1].node.append(Node("Case").append(Node("expr").append(yyDollar[3].node)).append(yyDollar[5].node))
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:508
		{
			yyVAL.node = yyDollar[1].node.append(Node("Default").append(yyDollar[4].node))
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:519
		{
			yyVAL.node = yyDollar[1].node
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:520
		{
			yyVAL.node = yyDollar[2].node
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:524
		{
			yyVAL.node = yyDollar[1].node
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:525
		{
			yyVAL.node = Node("Ref").append(yyDollar[2].node)
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:526
		{
			yyVAL.node = Node("List").append(yyDollar[3].node)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:527
		{
			yyVAL.node = Node("ShortList").append(yyDollar[2].node)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:531
		{ /* TODO: allow single trailing comma */
			yyVAL.node = yyDollar[1].node
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:535
		{
			yyVAL.node = Node("")
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:536
		{
			yyVAL.node = yyDollar[1].node
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:541
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:542
		{
			yyVAL.node = Node("ArrayPairList").append(yyDollar[1].node)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:546
		{
			yyVAL.node = Node("ArrayElement").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:547
		{
			yyVAL.node = Node("ArrayElement").append(yyDollar[1].node)
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:548
		{
			yyVAL.node = Node("ArrayElement").append(yyDollar[1].node).append(Node("Ref").append(yyDollar[4].node))
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:549
		{
			yyVAL.node = Node("ArrayElement").append(Node("Ref").append(yyDollar[2].node))
		}
	case 168:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:551
		{
			yyVAL.node = Node("ArrayElement").
				append(yyDollar[1].node).
				append(Node("ArrayList").append(yyDollar[5].node))
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:557
		{
			yyVAL.node = Node("ArrayElement").
				append(Node("ArrayList").append(yyDollar[3].node))
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:564
		{
			yyVAL.node = yyDollar[1].node
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:565
		{
			yyVAL.node = yyDollar[2].node
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:569
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:570
		{
			yyVAL.node = Node("GlobalVarList").append(yyDollar[1].node)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:574
		{
			yyVAL.node = yyDollar[1].node
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:578
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:579
		{
			yyVAL.node = Node("StaticVarList").append(yyDollar[1].node)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:583
		{
			yyVAL.node = Node("StaticVariable").attribute("Name", yyDollar[1].token)
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:584
		{
			yyVAL.node = Node("StaticVariable").attribute("Name", yyDollar[1].token).append(Node("expr").append(yyDollar[3].node))
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:588
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:589
		{
			yyVAL.node = Node("EchoList").append(yyDollar[1].node)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:593
		{
			yyVAL.node = Node("Echo").append(yyDollar[1].node)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:597
		{
			yyVAL.node = Node("UnsetVariablesList").append(yyDollar[1].node)
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:598
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:602
		{
			yyVAL.node = yyDollar[1].node
		}
	case 187:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:612
		{
			yyVAL.node = yyDollar[1].node.attribute("name", yyDollar[3].token).append(yyDollar[5].node)
		}
	case 188:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:613
		{
			yyVAL.node = Node("Class").attribute("name", yyDollar[2].token).append(yyDollar[4].node)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:617
		{
			yyVAL.node = Node("Class").attribute(yyDollar[1].value, "true")
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:618
		{
			yyVAL.node = yyDollar[1].node.attribute(yyDollar[2].value, "true")
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:622
		{
			yyVAL.value = "abstract"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:623
		{
			yyVAL.value = "final"
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:627
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[2].node)
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:628
		{
			yyVAL.node = Node("Stmt")
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:632
		{
			yyVAL.node = yyDollar[2].node.append(yyDollar[1].node)
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:633
		{
			yyVAL.node = yyDollar[3].node.append(yyDollar[1].node)
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:634
		{
			yyVAL.node = Node("Use").append(yyDollar[2].node).append(yyDollar[3].node)
		}
	case 198:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:637
		{
			yyVAL.node = Node("Function").
				append(yyDollar[1].node).
				append(Node("name").append(yyDollar[4].node)).
				attribute("returns_ref", yyDollar[3].value).
				append(yyDollar[6].node).
				append(yyDollar[8].node).
				append(yyDollar[9].node)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:649
		{
			yyVAL.node = Node("NameList").append(yyDollar[1].node)
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:650
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:654
		{
			yyVAL.node = Node("")
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:655
		{
			yyVAL.node = Node("")
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:656
		{
			yyVAL.node = yyDollar[2].node
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:660
		{
			yyVAL.node = Node("TraitAdaptionList").append(yyDollar[1].node)
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:661
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[2].node)
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:665
		{
			yyVAL.node = yyDollar[1].node
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:666
		{
			yyVAL.node = yyDollar[1].node
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:671
		{
			yyVAL.node = Node("TraitPrecedence").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:675
		{
			yyVAL.node = yyDollar[1].node.append(Node("as").attribute("value", yyDollar[3].token))
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:677
		{
			yyVAL.node = yyDollar[1].node.append(Node("as").append(Node("reservedNonModifiers")))
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:679
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node).append(yyDollar[4].node)
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:680
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:683
		{
			yyVAL.node = Node("TraitMethodRef").append(yyDollar[1].node)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:684
		{
			yyVAL.node = yyDollar[1].node
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:688
		{
			yyVAL.node = Node("TraitMethodRef").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:692
		{
			yyVAL.node = Node("")
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:693
		{
			yyVAL.node = yyDollar[2].node
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:697
		{
			yyVAL.node = yyDollar[1].node
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:698
		{
			yyVAL.node = Node("VarMemberModifier")
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:702
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:703
		{
			yyVAL.node = Node("ConstList").append(yyDollar[1].node)
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:707
		{
			yyVAL.node = Node("Const").append(yyDollar[3].node)
		}
	case 223:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:711
		{
			yyVAL.node = Node("PublicMemberModifier")
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:712
		{
			yyVAL.node = yyDollar[1].node
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:715
		{
			yyVAL.node = yyDollar[1].node
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:716
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[2].node)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:719
		{
			yyVAL.node = Node("PublicMemberModifier")
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:720
		{
			yyVAL.node = Node("ProtectedMemberModifier")
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:721
		{
			yyVAL.node = Node("PrivateMemberModifier")
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:722
		{
			yyVAL.node = Node("StaticMemberModifier")
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:723
		{
			yyVAL.node = Node("AbstractMemberModifier")
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:724
		{
			yyVAL.node = Node("FinalMemberModifier")
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:728
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:729
		{
			yyVAL.node = Node("PropertyList").append(yyDollar[1].node)
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:732
		{
			yyVAL.node = Node("Property").attribute("name", yyDollar[1].token)
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:733
		{
			yyVAL.node = Node("Property").attribute("name", yyDollar[1].token).append(Node("Default").append(yyDollar[3].node))
		}
	case 237:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:738
		{
			yyVAL.node = Node("Function").
				attribute("name", yyDollar[3].token).
				attribute("returns_ref", yyDollar[2].value).
				append(yyDollar[5].node).
				append(yyDollar[7].node).
				append(yyDollar[9].node)
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:749
		{
			yyVAL.node = yyDollar[1].node
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:750
		{
			yyVAL.node = Node("Parameter list")
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:753
		{
			yyVAL.node = Node("Parameter list").append(yyDollar[1].node)
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:754
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:758
		{
			yyVAL.node = Node("Parameter").
				append(yyDollar[1].node).
				attribute("is_reference", yyDollar[2].value).
				attribute("is_variadic", yyDollar[3].value).
				attribute("var", yyDollar[4].token)
		}
	case 243:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:766
		{
			yyVAL.node = Node("Parameter").
				append(yyDollar[1].node).
				attribute("is_reference", yyDollar[2].value).
				attribute("is_variadic", yyDollar[3].value).
				attribute("var", yyDollar[4].token).
				append(yyDollar[6].node)
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:777
		{
			yyVAL.node = Node("No type")
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:778
		{
			yyVAL.node = yyDollar[1].node
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:782
		{
			yyVAL.value = "false"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:783
		{
			yyVAL.value = "true"
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:787
		{
			yyVAL.value = "false"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:788
		{
			yyVAL.value = "true"
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:792
		{
			yyVAL.value = "false"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:793
		{
			yyVAL.value = "true"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:797
		{
			yyVAL.node = yyDollar[1].node
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:798
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.attribute("nullable", "true")
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:802
		{
			yyVAL.node = yyDollar[1].node
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:803
		{
			yyVAL.node = Node("array type")
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:804
		{
			yyVAL.node = Node("callable type")
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:808
		{
			yyVAL.node = Node("void")
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:809
		{
			yyVAL.node = yyDollar[2].node
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:813
		{
			yyVAL.node = Node("Assign").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:814
		{
			yyVAL.node = Node("AssignRef").append(yyDollar[1].node).append(yyDollar[4].node)
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:815
		{
			yyVAL.node = Node("Clone").append(yyDollar[2].node)
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:816
		{
			yyVAL.node = Node("AssignAdd").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:817
		{
			yyVAL.node = Node("AssignSub").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:818
		{
			yyVAL.node = Node("AssignMul").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:819
		{
			yyVAL.node = Node("AssignPow").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:820
		{
			yyVAL.node = Node("AssignDiv").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:821
		{
			yyVAL.node = Node("AssignConcat").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:822
		{
			yyVAL.node = Node("AssignMod").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:823
		{
			yyVAL.node = Node("AssignAnd").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:824
		{
			yyVAL.node = Node("AssignOr").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:825
		{
			yyVAL.node = Node("AssignXor").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:826
		{
			yyVAL.node = Node("AssignShiftLeft").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:827
		{
			yyVAL.node = Node("AssignShiftRight").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:828
		{
			yyVAL.node = Node("PostIncrement").append(yyDollar[1].node)
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:829
		{
			yyVAL.node = Node("PreIncrement").append(yyDollar[2].node)
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:830
		{
			yyVAL.node = Node("PostDecrement").append(yyDollar[1].node)
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:831
		{
			yyVAL.node = Node("PreDecrement").append(yyDollar[2].node)
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:832
		{
			yyVAL.node = Node("Or").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:833
		{
			yyVAL.node = Node("And").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:834
		{
			yyVAL.node = Node("Or").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:835
		{
			yyVAL.node = Node("And").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:836
		{
			yyVAL.node = Node("Xor").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:837
		{
			yyVAL.node = Node("BitwiseOr").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:838
		{
			yyVAL.node = Node("BitwiseAnd").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:839
		{
			yyVAL.node = Node("BitwiseXor").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:840
		{
			yyVAL.node = Node("Concat").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:841
		{
			yyVAL.node = Node("Add").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:842
		{
			yyVAL.node = Node("Sub").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:843
		{
			yyVAL.node = Node("Mul").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:844
		{
			yyVAL.node = Node("Pow").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:845
		{
			yyVAL.node = Node("Div").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:846
		{
			yyVAL.node = Node("Mod").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:847
		{
			yyVAL.node = Node("ShiftLeft").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:848
		{
			yyVAL.node = Node("ShiftRight").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:849
		{
			yyVAL.node = Node("UnaryPlus").append(yyDollar[2].node)
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:850
		{
			yyVAL.node = Node("UnaryMinus").append(yyDollar[2].node)
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:851
		{
			yyVAL.node = Node("BooleanNot").append(yyDollar[2].node)
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:852
		{
			yyVAL.node = Node("BitwiseNot").append(yyDollar[2].node)
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:853
		{
			yyVAL.node = Node("Identical").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:854
		{
			yyVAL.node = Node("NotIdentical").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:855
		{
			yyVAL.node = Node("Equal").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:856
		{
			yyVAL.node = Node("NotEqual").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:857
		{
			yyVAL.node = Node("Spaceship").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:858
		{
			yyVAL.node = Node("Smaller").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:859
		{
			yyVAL.node = Node("SmallerOrEqual").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:860
		{
			yyVAL.node = Node("Greater").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:861
		{
			yyVAL.node = Node("GreaterOrEqual").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:862
		{
			yyVAL.node = yyDollar[2].node
		}
	case 309:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:863
		{
			yyVAL.node = Node("Ternary").append(yyDollar[1].node).append(yyDollar[3].node).append(yyDollar[5].node)
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:864
		{
			yyVAL.node = Node("Ternary").append(yyDollar[1].node).append(yyDollar[4].node)
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:865
		{
			yyVAL.node = Node("Coalesce").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:866
		{
			yyVAL.node = Node("Empty").append(yyDollar[3].node)
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:867
		{
			yyVAL.node = Node("Include").append(yyDollar[2].node)
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:868
		{
			yyVAL.node = Node("IncludeOnce").append(yyDollar[2].node)
		}
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:869
		{
			yyVAL.node = Node("Eval").append(yyDollar[3].node)
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:870
		{
			yyVAL.node = Node("Require").append(yyDollar[2].node)
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:871
		{
			yyVAL.node = Node("RequireOnce").append(yyDollar[2].node)
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:872
		{
			yyVAL.node = Node("CastInt").append(yyDollar[2].node)
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:873
		{
			yyVAL.node = Node("CastDouble").append(yyDollar[2].node)
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:874
		{
			yyVAL.node = Node("CastString").append(yyDollar[2].node)
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:875
		{
			yyVAL.node = Node("CastArray").append(yyDollar[2].node)
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:876
		{
			yyVAL.node = Node("CastObject").append(yyDollar[2].node)
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:877
		{
			yyVAL.node = Node("CastBool").append(yyDollar[2].node)
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:878
		{
			yyVAL.node = Node("CastUnset").append(yyDollar[2].node)
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:879
		{
			yyVAL.node = Node("Silence").append(yyDollar[2].node)
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:880
		{
			yyVAL.node = yyDollar[1].node
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:881
		{
			yyVAL.node = Node("Print").append(yyDollar[2].node)
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:882
		{
			yyVAL.node = Node("Yield")
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:883
		{
			yyVAL.node = Node("Yield").append(yyDollar[2].node)
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:884
		{
			yyVAL.node = Node("Yield").append(yyDollar[2].node).append(yyDollar[4].node)
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:885
		{
			yyVAL.node = Node("YieldFrom").append(yyDollar[2].node)
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:889
		{
			yyVAL.node = Node("Scalar").append(Node("Lnumber").attribute("value", yyDollar[1].token))
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:890
		{
			yyVAL.node = Node("Scalar").append(Node("Dnumber").attribute("value", yyDollar[1].token))
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:891
		{
			yyVAL.node = Node("Scalar").append(Node("__LINE__"))
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:892
		{
			yyVAL.node = Node("Scalar").append(Node("__FILE__"))
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:893
		{
			yyVAL.node = Node("Scalar").append(Node("__DIR__"))
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:894
		{
			yyVAL.node = Node("Scalar").append(Node("__TRAIT__"))
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:895
		{
			yyVAL.node = Node("Scalar").append(Node("__METHOD__"))
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:896
		{
			yyVAL.node = Node("Scalar").append(Node("__FUNCTION__"))
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:897
		{
			yyVAL.node = Node("Scalar").append(Node("__NAMESPACE__"))
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:898
		{
			yyVAL.node = Node("Scalar").append(Node("__CLASS__"))
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:900
		{
			yyVAL.node = Node("Scalar").append(Node("Heredoc").attribute("value", yyDollar[2].token))
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:902
		{
			yyVAL.node = Node("Scalar").append(Node("Heredoc"))
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:903
		{
			yyVAL.node = yyDollar[2].node
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:904
		{
			yyVAL.node = yyDollar[2].node
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:905
		{
			yyVAL.node = yyDollar[1].node
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:906
		{
			yyVAL.node = yyDollar[1].node
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:910
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[2].node)
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:911
		{
			yyVAL.node = yyDollar[1].node.append(Node("String").attribute("value", yyDollar[2].token))
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:912
		{
			yyVAL.node = Node("EncapsList").append(yyDollar[1].node)
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:913
		{
			yyVAL.node = Node("EncapsList").append(Node("String").attribute("value", yyDollar[1].token)).append(yyDollar[2].node)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:916
		{
			yyVAL.node = Node("Variable").attribute("value", yyDollar[1].token)
		}
	case 353:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:917
		{
			yyVAL.node = Node("Variable").attribute("value", yyDollar[1].token).append(Node("offset").append(yyDollar[3].node))
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:918
		{
			yyVAL.node = Node("Variable").attribute("value", yyDollar[1].token).append(Node("property").attribute("value", yyDollar[3].token))
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:919
		{
			yyVAL.node = Node("Variable").append(Node("expr").append(yyDollar[2].node))
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:920
		{
			yyVAL.node = Node("Variable").attribute("value", yyDollar[2].token)
		}
	case 357:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:922
		{
			yyVAL.node = Node("Variable").attribute("value", yyDollar[2].token).append(Node("offset").append(yyDollar[4].node))
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:923
		{
			yyVAL.node = yyDollar[2].node
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:926
		{
			yyVAL.node = Node("OffsetString").attribute("value", yyDollar[1].token)
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:927
		{
			yyVAL.node = Node("OffsetNumString").attribute("value", yyDollar[1].token)
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:928
		{
			yyVAL.node = Node("OffsetNegateNumString").attribute("value", yyDollar[2].token)
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:929
		{
			yyVAL.node = Node("OffsetVariable").attribute("value", yyDollar[1].token)
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:933
		{
			yyVAL.node = Node("Const").append(yyDollar[1].node)
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:934
		{
			yyVAL.node = Node("Const").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:936
		{
			yyVAL.node = Node("Const").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:940
		{
			yyVAL.node = Node("Static")
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:941
		{
			yyVAL.node = yyDollar[1].node
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:945
		{
			yyVAL.node = yyDollar[1].node
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:949
		{
			yyVAL.node = yyDollar[1].node
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:950
		{
			yyVAL.node = yyDollar[2].node
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:951
		{
			yyVAL.node = yyDollar[1].node
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:955
		{
			yyVAL.node = yyDollar[3].node
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:956
		{
			yyVAL.node = yyDollar[2].node
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:957
		{
			yyVAL.node = Node("String").attribute("value", yyDollar[1].token)
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:961
		{
			yyVAL.node = yyDollar[1].node
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:962
		{
			yyVAL.node = yyDollar[1].node
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:966
		{
			yyVAL.node = Node("")
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:967
		{
			yyVAL.node = yyDollar[1].node
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:971
		{
			yyVAL.node = yyDollar[1].node
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:975
		{
			yyVAL.node = yyDollar[1].node
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:976
		{
			yyVAL.node = yyDollar[1].node
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:977
		{
			yyVAL.node = Node("Property").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:981
		{
			yyVAL.node = Node("PropertyName").attribute("value", yyDollar[1].token)
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:982
		{
			yyVAL.node = yyDollar[2].node
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:983
		{
			yyVAL.node = yyDollar[1].node
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:987
		{
			yyVAL.node = Node("Variable").attribute("name", yyDollar[1].token)
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:988
		{
			yyVAL.node = Node("Variable").append(yyDollar[3].node)
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:989
		{
			yyVAL.node = Node("Variable").append(yyDollar[2].node)
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:994
		{
			yyVAL.node = Node("StaticProp").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:996
		{
			yyVAL.node = Node("StaticProp").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	}
	goto yystack /* stack new state and value */
}
