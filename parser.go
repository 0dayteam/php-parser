//line parser.y:2
package main

import __yyfmt__ "fmt"

//line parser.y:2
import (
	"bytes"
	"fmt"
	"io"
	"os"
)

type node struct {
	name       string
	children   []node
	attributes map[string]string
}

func (n node) String() string {
	buf := new(bytes.Buffer)
	n.print(buf, " ")
	return buf.String()
}

func (n node) print(out io.Writer, indent string) {
	if len(n.attributes) > 0 {
		fmt.Fprintf(out, "\n%v%v %s", indent, n.name, n.attributes)
	} else {
		fmt.Fprintf(out, "\n%v%v", indent, n.name)
	}
	for _, nn := range n.children {
		nn.print(out, indent+"  ")
	}
}

func Node(name string) node {
	return node{name: name, attributes: make(map[string]string)}
}

func (n node) append(nn ...node) node {
	n.children = append(n.children, nn...)
	return n
}

func (n node) attribute(key string, value string) node {
	n.attributes[key] = value
	return n
}

//line parser.y:50
type yySymType struct {
	yys   int
	node  node
	token string
	value string
}

const T_INCLUDE = 57346
const T_INCLUDE_ONCE = 57347
const T_EVAL = 57348
const T_REQUIRE = 57349
const T_REQUIRE_ONCE = 57350
const T_LOGICAL_OR = 57351
const T_LOGICAL_XOR = 57352
const T_LOGICAL_AND = 57353
const T_PRINT = 57354
const T_YIELD = 57355
const T_DOUBLE_ARROW = 57356
const T_YIELD_FROM = 57357
const T_PLUS_EQUAL = 57358
const T_MINUS_EQUAL = 57359
const T_MUL_EQUAL = 57360
const T_DIV_EQUAL = 57361
const T_CONCAT_EQUAL = 57362
const T_MOD_EQUAL = 57363
const T_AND_EQUAL = 57364
const T_OR_EQUAL = 57365
const T_XOR_EQUAL = 57366
const T_SL_EQUAL = 57367
const T_SR_EQUAL = 57368
const T_POW_EQUAL = 57369
const T_COALESCE = 57370
const T_BOOLEAN_OR = 57371
const T_BOOLEAN_AND = 57372
const T_IS_EQUAL = 57373
const T_IS_NOT_EQUAL = 57374
const T_IS_IDENTICAL = 57375
const T_IS_NOT_IDENTICAL = 57376
const T_SPACESHIP = 57377
const T_IS_SMALLER_OR_EQUAL = 57378
const T_IS_GREATER_OR_EQUAL = 57379
const T_SL = 57380
const T_SR = 57381
const T_INSTANCEOF = 57382
const T_INC = 57383
const T_DEC = 57384
const T_INT_CAST = 57385
const T_DOUBLE_CAST = 57386
const T_STRING_CAST = 57387
const T_ARRAY_CAST = 57388
const T_OBJECT_CAST = 57389
const T_BOOL_CAST = 57390
const T_UNSET_CAST = 57391
const T_POW = 57392
const T_NEW = 57393
const T_CLONE = 57394
const T_NOELSE = 57395
const T_ELSEIF = 57396
const T_ELSE = 57397
const T_ENDIF = 57398
const T_STATIC = 57399
const T_ABSTRACT = 57400
const T_FINAL = 57401
const T_PRIVATE = 57402
const T_PROTECTED = 57403
const T_PUBLIC = 57404
const T_EXIT = 57405
const T_IF = 57406
const T_LNUMBER = 57407
const T_DNUMBER = 57408
const T_STRING = 57409
const T_STRING_VARNAME = 57410
const T_VARIABLE = 57411
const T_NUM_STRING = 57412
const T_INLINE_HTML = 57413
const T_CHARACTER = 57414
const T_BAD_CHARACTER = 57415
const T_ENCAPSED_AND_WHITESPACE = 57416
const T_CONSTANT_ENCAPSED_STRING = 57417
const T_ECHO = 57418
const T_DO = 57419
const T_WHILE = 57420
const T_ENDWHILE = 57421
const T_FOR = 57422
const T_ENDFOR = 57423
const T_FOREACH = 57424
const T_ENDFOREACH = 57425
const T_DECLARE = 57426
const T_ENDDECLARE = 57427
const T_AS = 57428
const T_SWITCH = 57429
const T_ENDSWITCH = 57430
const T_CASE = 57431
const T_DEFAULT = 57432
const T_BREAK = 57433
const T_CONTINUE = 57434
const T_GOTO = 57435
const T_FUNCTION = 57436
const T_CONST = 57437
const T_RETURN = 57438
const T_TRY = 57439
const T_CATCH = 57440
const T_FINALLY = 57441
const T_THROW = 57442
const T_USE = 57443
const T_INSTEADOF = 57444
const T_GLOBAL = 57445
const T_VAR = 57446
const T_UNSET = 57447
const T_ISSET = 57448
const T_EMPTY = 57449
const T_HALT_COMPILER = 57450
const T_CLASS = 57451
const T_TRAIT = 57452
const T_INTERFACE = 57453
const T_EXTENDS = 57454
const T_IMPLEMENTS = 57455
const T_OBJECT_OPERATOR = 57456
const T_LIST = 57457
const T_ARRAY = 57458
const T_CALLABLE = 57459
const T_CLASS_C = 57460
const T_TRAIT_C = 57461
const T_METHOD_C = 57462
const T_FUNC_C = 57463
const T_LINE = 57464
const T_FILE = 57465
const T_COMMENT = 57466
const T_DOC_COMMENT = 57467
const T_OPEN_TAG = 57468
const T_OPEN_TAG_WITH_ECHO = 57469
const T_CLOSE_TAG = 57470
const T_WHITESPACE = 57471
const T_START_HEREDOC = 57472
const T_END_HEREDOC = 57473
const T_DOLLAR_OPEN_CURLY_BRACES = 57474
const T_CURLY_OPEN = 57475
const T_PAAMAYIM_NEKUDOTAYIM = 57476
const T_NAMESPACE = 57477
const T_NS_C = 57478
const T_DIR = 57479
const T_NS_SEPARATOR = 57480
const T_ELLIPSIS = 57481

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"T_INCLUDE",
	"T_INCLUDE_ONCE",
	"T_EVAL",
	"T_REQUIRE",
	"T_REQUIRE_ONCE",
	"','",
	"T_LOGICAL_OR",
	"T_LOGICAL_XOR",
	"T_LOGICAL_AND",
	"T_PRINT",
	"T_YIELD",
	"T_DOUBLE_ARROW",
	"T_YIELD_FROM",
	"'='",
	"T_PLUS_EQUAL",
	"T_MINUS_EQUAL",
	"T_MUL_EQUAL",
	"T_DIV_EQUAL",
	"T_CONCAT_EQUAL",
	"T_MOD_EQUAL",
	"T_AND_EQUAL",
	"T_OR_EQUAL",
	"T_XOR_EQUAL",
	"T_SL_EQUAL",
	"T_SR_EQUAL",
	"T_POW_EQUAL",
	"'?'",
	"':'",
	"T_COALESCE",
	"T_BOOLEAN_OR",
	"T_BOOLEAN_AND",
	"'|'",
	"'^'",
	"'&'",
	"T_IS_EQUAL",
	"T_IS_NOT_EQUAL",
	"T_IS_IDENTICAL",
	"T_IS_NOT_IDENTICAL",
	"T_SPACESHIP",
	"'<'",
	"T_IS_SMALLER_OR_EQUAL",
	"'>'",
	"T_IS_GREATER_OR_EQUAL",
	"T_SL",
	"T_SR",
	"'+'",
	"'-'",
	"'.'",
	"'*'",
	"'/'",
	"'%'",
	"'!'",
	"T_INSTANCEOF",
	"'~'",
	"T_INC",
	"T_DEC",
	"T_INT_CAST",
	"T_DOUBLE_CAST",
	"T_STRING_CAST",
	"T_ARRAY_CAST",
	"T_OBJECT_CAST",
	"T_BOOL_CAST",
	"T_UNSET_CAST",
	"'@'",
	"T_POW",
	"'['",
	"T_NEW",
	"T_CLONE",
	"T_NOELSE",
	"T_ELSEIF",
	"T_ELSE",
	"T_ENDIF",
	"T_STATIC",
	"T_ABSTRACT",
	"T_FINAL",
	"T_PRIVATE",
	"T_PROTECTED",
	"T_PUBLIC",
	"T_EXIT",
	"T_IF",
	"T_LNUMBER",
	"T_DNUMBER",
	"T_STRING",
	"T_STRING_VARNAME",
	"T_VARIABLE",
	"T_NUM_STRING",
	"T_INLINE_HTML",
	"T_CHARACTER",
	"T_BAD_CHARACTER",
	"T_ENCAPSED_AND_WHITESPACE",
	"T_CONSTANT_ENCAPSED_STRING",
	"T_ECHO",
	"T_DO",
	"T_WHILE",
	"T_ENDWHILE",
	"T_FOR",
	"T_ENDFOR",
	"T_FOREACH",
	"T_ENDFOREACH",
	"T_DECLARE",
	"T_ENDDECLARE",
	"T_AS",
	"T_SWITCH",
	"T_ENDSWITCH",
	"T_CASE",
	"T_DEFAULT",
	"T_BREAK",
	"T_CONTINUE",
	"T_GOTO",
	"T_FUNCTION",
	"T_CONST",
	"T_RETURN",
	"T_TRY",
	"T_CATCH",
	"T_FINALLY",
	"T_THROW",
	"T_USE",
	"T_INSTEADOF",
	"T_GLOBAL",
	"T_VAR",
	"T_UNSET",
	"T_ISSET",
	"T_EMPTY",
	"T_HALT_COMPILER",
	"T_CLASS",
	"T_TRAIT",
	"T_INTERFACE",
	"T_EXTENDS",
	"T_IMPLEMENTS",
	"T_OBJECT_OPERATOR",
	"T_LIST",
	"T_ARRAY",
	"T_CALLABLE",
	"T_CLASS_C",
	"T_TRAIT_C",
	"T_METHOD_C",
	"T_FUNC_C",
	"T_LINE",
	"T_FILE",
	"T_COMMENT",
	"T_DOC_COMMENT",
	"T_OPEN_TAG",
	"T_OPEN_TAG_WITH_ECHO",
	"T_CLOSE_TAG",
	"T_WHITESPACE",
	"T_START_HEREDOC",
	"T_END_HEREDOC",
	"T_DOLLAR_OPEN_CURLY_BRACES",
	"T_CURLY_OPEN",
	"T_PAAMAYIM_NEKUDOTAYIM",
	"T_NAMESPACE",
	"T_NS_C",
	"T_DIR",
	"T_NS_SEPARATOR",
	"T_ELLIPSIS",
	"';'",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"']'",
	"'\"'",
	"'$'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:984
const src = `<?php

$a = +22 . $b;

$a = "str {${$a+$b}} str$b";

`

func main() {
	yyDebug = 0
	yyErrorVerbose = true
	l := newLexer(bytes.NewBufferString(src), os.Stdout, "file.name")
	yyParse(l)
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 36,
	153, 369,
	-2, 375,
	-1, 82,
	153, 371,
	-2, 346,
	-1, 89,
	153, 367,
	-2, 363,
	-1, 269,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 299,
	-1, 270,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 300,
	-1, 271,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 301,
	-1, 272,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 302,
	-1, 273,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 303,
	-1, 274,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 304,
	-1, 275,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 305,
	-1, 276,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 306,
	-1, 277,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 307,
	-1, 314,
	153, 370,
	-2, 308,
	-1, 433,
	163, 239,
	-2, 244,
	-1, 500,
	88, 218,
	-2, 224,
	-1, 630,
	105, 76,
	-2, 78,
	-1, 646,
	163, 239,
	-2, 244,
}

const yyPrivate = 57344

const yyLast = 5712

var yyAct = [...]int{

	22, 99, 585, 575, 484, 89, 502, 339, 622, 548,
	566, 584, 597, 544, 488, 155, 106, 106, 106, 486,
	233, 118, 473, 4, 218, 238, 489, 435, 523, 152,
	36, 220, 286, 101, 117, 114, 282, 571, 111, 84,
	514, 529, 181, 430, 209, 184, 185, 186, 187, 188,
	331, 190, 191, 669, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 657, 203, 204, 205, 69, 605,
	604, 595, 593, 182, 183, 537, 519, 471, 455, 84,
	646, 588, 573, 531, 518, 433, 416, 112, 222, 335,
	296, 294, 217, 452, 192, 189, 561, 562, 180, 150,
	490, 236, 149, 148, 240, 241, 561, 562, 104, 103,
	100, 506, 507, 508, 505, 504, 503, 85, 676, 677,
	668, 252, 253, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 280, 600,
	284, 215, 475, 288, 216, 499, 98, 85, 501, 560,
	506, 507, 508, 505, 504, 503, 299, 301, 302, 303,
	304, 305, 306, 307, 308, 309, 310, 311, 312, 283,
	592, 313, 295, 210, 477, 451, 453, 469, 322, 528,
	315, 616, 610, 316, 598, 671, 542, 429, 581, 574,
	434, 293, 251, 84, 499, 492, 493, 501, 248, 246,
	151, 98, 325, 656, 650, 649, 329, 636, 222, 98,
	606, 601, 594, 558, 102, 553, 527, 93, 336, 413,
	526, 589, 590, 524, 522, 417, 297, 290, 244, 243,
	242, 230, 330, 327, 579, 495, 211, 212, 98, 476,
	422, 319, 118, 321, 334, 96, 228, 210, 321, 319,
	328, 210, 214, 653, 226, 210, 322, 210, 492, 493,
	206, 225, 651, 652, 447, 210, 323, 535, 536, 102,
	425, 85, 93, 237, 421, 420, 423, 102, 547, 546,
	93, 67, 68, 640, 515, 436, 545, 437, 612, 115,
	438, 439, 602, 561, 562, 564, 561, 562, 287, 92,
	445, 449, 448, 446, 414, 112, 468, 97, 443, 96,
	211, 212, 599, 320, 211, 212, 292, 207, 211, 212,
	211, 212, 291, 222, 457, 98, 222, 318, 211, 212,
	324, 615, 157, 122, 124, 123, 639, 159, 580, 153,
	132, 208, 250, 162, 164, 163, 160, 161, 247, 245,
	460, 156, 540, 146, 456, 147, 120, 121, 125, 127,
	126, 139, 140, 137, 138, 141, 142, 143, 144, 145,
	135, 136, 129, 130, 128, 131, 133, 134, 506, 507,
	508, 505, 504, 503, 38, 576, 552, 298, 154, 643,
	617, 132, 582, 227, 431, 249, 229, 135, 136, 129,
	130, 128, 131, 133, 134, 588, 538, 464, 240, 466,
	427, 131, 133, 134, 105, 470, 418, 158, 132, 332,
	426, 234, 482, 213, 5, 235, 462, 132, 6, 491,
	1, 108, 109, 465, 82, 94, 91, 90, 83, 444,
	479, 63, 675, 516, 625, 626, 624, 623, 283, 474,
	621, 512, 494, 481, 472, 520, 142, 143, 144, 145,
	135, 136, 129, 130, 128, 131, 133, 134, 222, 587,
	498, 583, 533, 543, 500, 497, 496, 534, 607, 517,
	483, 132, 478, 285, 221, 219, 491, 555, 525, 281,
	116, 113, 532, 110, 467, 549, 530, 550, 129, 130,
	128, 131, 133, 134, 631, 554, 239, 541, 461, 222,
	10, 35, 9, 240, 34, 40, 37, 132, 485, 487,
	551, 32, 222, 231, 2, 95, 3, 338, 578, 539,
	0, 0, 0, 556, 491, 0, 0, 0, 559, 567,
	0, 0, 569, 563, 591, 565, 570, 0, 577, 0,
	474, 0, 596, 586, 0, 0, 0, 0, 0, 0,
	603, 0, 0, 0, 0, 0, 609, 0, 0, 608,
	0, 0, 491, 614, 0, 0, 0, 0, 0, 618,
	0, 611, 0, 628, 619, 613, 627, 0, 0, 635,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 634,
	0, 0, 642, 0, 0, 638, 632, 0, 645, 0,
	0, 0, 0, 0, 628, 567, 0, 627, 644, 0,
	648, 0, 0, 0, 0, 654, 655, 0, 0, 0,
	0, 0, 0, 0, 660, 0, 658, 0, 0, 0,
	0, 661, 491, 0, 0, 0, 666, 549, 0, 665,
	664, 662, 0, 0, 0, 122, 124, 123, 670, 0,
	672, 0, 0, 673, 346, 347, 348, 349, 350, 678,
	351, 352, 353, 389, 390, 146, 0, 147, 120, 121,
	125, 127, 126, 139, 140, 137, 138, 141, 142, 143,
	144, 145, 135, 136, 129, 130, 128, 131, 133, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 0, 0, 354, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	355, 356, 0, 359, 360, 361, 340, 341, 342, 343,
	344, 345, 357, 358, 0, 0, 630, 0, 0, 0,
	0, 0, 0, 0, 0, 362, 363, 364, 365, 366,
	367, 368, 369, 370, 371, 372, 392, 393, 394, 395,
	396, 384, 385, 386, 387, 388, 373, 374, 375, 376,
	377, 378, 379, 380, 381, 382, 383, 0, 404, 402,
	403, 399, 400, 0, 391, 397, 398, 405, 406, 408,
	407, 409, 410, 346, 347, 348, 349, 350, 521, 351,
	352, 353, 389, 390, 629, 412, 411, 93, 0, 0,
	146, 647, 147, 120, 121, 125, 127, 126, 139, 140,
	137, 138, 141, 142, 143, 144, 145, 135, 136, 129,
	130, 128, 131, 133, 134, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 354, 0, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 355,
	356, 0, 359, 360, 361, 340, 341, 342, 343, 344,
	345, 357, 358, 0, 0, 630, 0, 0, 0, 0,
	0, 0, 0, 0, 362, 363, 364, 365, 366, 367,
	368, 369, 370, 371, 372, 392, 393, 394, 395, 396,
	384, 385, 386, 387, 388, 373, 374, 375, 376, 377,
	378, 379, 380, 381, 382, 383, 0, 404, 402, 403,
	399, 400, 0, 391, 397, 398, 405, 406, 408, 407,
	409, 410, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 629, 412, 411, 93, 123, 0, 0,
	620, 50, 51, 52, 53, 54, 0, 0, 0, 0,
	64, 65, 0, 66, 0, 146, 0, 147, 120, 121,
	125, 127, 126, 139, 140, 137, 138, 141, 142, 143,
	144, 145, 135, 136, 129, 130, 128, 131, 133, 134,
	0, 0, 0, 0, 0, 0, 44, 45, 0, 0,
	0, 0, 46, 132, 47, 42, 43, 55, 56, 57,
	58, 59, 60, 61, 62, 0, 87, 0, 41, 0,
	0, 0, 0, 19, 67, 68, 0, 0, 0, 0,
	39, 70, 71, 30, 0, 84, 0, 21, 0, 0,
	0, 88, 20, 12, 11, 0, 13, 0, 24, 0,
	25, 0, 0, 14, 0, 0, 0, 15, 16, 29,
	31, 0, 17, 27, 0, 0, 28, 0, 0, 18,
	0, 23, 0, 49, 0, 33, 0, 0, 0, 0,
	0, 0, 86, 0, 79, 75, 76, 77, 72, 73,
	0, 0, 0, 0, 0, 0, 80, 0, 0, 0,
	0, 102, 78, 74, 93, 0, 26, 8, 679, 48,
	317, 0, 81, 85, 50, 51, 52, 53, 54, 0,
	0, 0, 0, 64, 65, 146, 66, 147, 120, 121,
	125, 127, 126, 139, 140, 137, 138, 141, 142, 143,
	144, 145, 135, 136, 129, 130, 128, 131, 133, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 44,
	45, 0, 0, 132, 0, 46, 0, 47, 42, 43,
	55, 56, 57, 58, 59, 60, 61, 62, 0, 87,
	0, 41, 0, 0, 0, 0, 19, 67, 68, 0,
	0, 0, 0, 39, 70, 71, 30, 0, 84, 0,
	21, 0, 0, 0, 88, 20, 12, 11, 0, 13,
	0, 24, 0, 25, 0, 0, 14, 0, 0, 0,
	15, 16, 29, 31, 0, 17, 27, 0, 0, 28,
	0, 0, 18, 0, 23, 0, 49, 0, 33, 0,
	0, 0, 0, 0, 0, 86, 0, 79, 75, 76,
	77, 72, 73, 0, 0, 0, 0, 0, 0, 80,
	0, 0, 0, 0, 102, 78, 74, 93, 0, 26,
	8, 674, 48, 0, 0, 81, 85, 50, 51, 52,
	53, 54, 0, 0, 0, 0, 64, 65, 0, 66,
	147, 120, 121, 125, 127, 126, 139, 140, 137, 138,
	141, 142, 143, 144, 145, 135, 136, 129, 130, 128,
	131, 133, 134, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 44, 45, 0, 0, 132, 0, 46, 0,
	47, 42, 43, 55, 56, 57, 58, 59, 60, 61,
	62, 0, 87, 0, 41, 0, 0, 0, 0, 19,
	67, 68, 0, 0, 0, 0, 39, 70, 71, 30,
	0, 84, 0, 21, 0, 0, 0, 88, 20, 12,
	11, 0, 13, 667, 24, 0, 25, 0, 0, 14,
	0, 0, 0, 15, 16, 29, 31, 0, 17, 27,
	0, 0, 28, 0, 0, 18, 0, 23, 0, 49,
	0, 33, 0, 0, 0, 0, 0, 0, 86, 0,
	79, 75, 76, 77, 72, 73, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 0, 0, 102, 78, 74,
	93, 0, 26, 8, 0, 48, 0, 0, 81, 85,
	50, 51, 52, 53, 54, 0, 0, 0, 0, 64,
	65, 0, 66, 121, 125, 127, 126, 139, 140, 137,
	138, 141, 142, 143, 144, 145, 135, 136, 129, 130,
	128, 131, 133, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 44, 45, 132, 0, 0,
	0, 46, 0, 47, 42, 43, 55, 56, 57, 58,
	59, 60, 61, 62, 0, 87, 0, 41, 0, 0,
	0, 0, 19, 67, 68, 0, 0, 0, 0, 39,
	70, 71, 30, 0, 84, 0, 21, 0, 0, 0,
	88, 20, 12, 11, 0, 13, 0, 24, 0, 25,
	0, 0, 14, 0, 0, 0, 15, 16, 29, 31,
	0, 17, 27, 0, 0, 28, 0, 0, 18, 0,
	23, 0, 49, 0, 33, 0, 0, 0, 0, 0,
	0, 86, 0, 79, 75, 76, 77, 72, 73, 0,
	0, 0, 0, 0, 0, 80, 0, 0, 0, 0,
	102, 78, 74, 93, 0, 26, 8, 659, 48, 0,
	0, 81, 85, 50, 51, 52, 53, 54, 0, 0,
	0, 0, 64, 65, 0, 66, 0, 125, 127, 126,
	139, 140, 137, 138, 141, 142, 143, 144, 145, 135,
	136, 129, 130, 128, 131, 133, 134, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 44, 45,
	132, 0, 0, 0, 46, 0, 47, 42, 43, 55,
	56, 57, 58, 59, 60, 61, 62, 0, 87, 0,
	41, 0, 0, 0, 0, 19, 67, 68, 0, 0,
	0, 0, 39, 70, 71, 30, 0, 84, 0, 21,
	0, 0, 0, 88, 20, 12, 11, 0, 13, 0,
	24, 0, 25, 0, 0, 14, 0, 0, 0, 15,
	16, 29, 31, 0, 17, 27, 0, 0, 28, 0,
	0, 18, 0, 23, 0, 49, 0, 33, 0, 0,
	0, 0, 0, 0, 86, 0, 79, 75, 76, 77,
	72, 73, 0, 0, 0, 0, 0, 0, 80, 0,
	0, 0, 0, 102, 78, 74, 93, 0, 26, 8,
	641, 48, 0, 0, 81, 85, 50, 51, 52, 53,
	54, 0, 0, 0, 0, 64, 65, 0, 66, 0,
	0, 127, 126, 139, 140, 137, 138, 141, 142, 143,
	144, 145, 135, 136, 129, 130, 128, 131, 133, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 44, 45, 132, 0, 0, 0, 46, 0, 47,
	42, 43, 55, 56, 57, 58, 59, 60, 61, 62,
	0, 87, 0, 41, 0, 0, 0, 0, 19, 67,
	68, 0, 0, 0, 0, 39, 70, 71, 30, 0,
	84, 0, 21, 0, 0, 0, 88, 20, 12, 11,
	0, 13, 0, 24, 637, 25, 0, 0, 14, 0,
	0, 0, 15, 16, 29, 31, 0, 17, 27, 0,
	0, 28, 0, 0, 18, 0, 23, 0, 49, 0,
	33, 0, 0, 0, 0, 0, 0, 86, 0, 79,
	75, 76, 77, 72, 73, 0, 0, 0, 0, 0,
	0, 80, 0, 0, 0, 0, 102, 78, 74, 93,
	0, 26, 8, 0, 48, 0, 0, 81, 85, 50,
	51, 52, 53, 54, 0, 0, 0, 0, 64, 65,
	0, 66, 126, 139, 140, 137, 138, 141, 142, 143,
	144, 145, 135, 136, 129, 130, 128, 131, 133, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 44, 45, 0, 0, 0, 0,
	46, 0, 47, 42, 43, 55, 56, 57, 58, 59,
	60, 61, 62, 0, 87, 0, 41, 0, 0, 0,
	0, 19, 67, 68, 0, 0, 0, 0, 39, 70,
	71, 30, 0, 84, 0, 21, 0, 0, 0, 88,
	20, 12, 11, 0, 13, 0, 24, 0, 25, 572,
	0, 14, 0, 0, 0, 15, 16, 29, 31, 0,
	17, 27, 0, 0, 28, 0, 0, 18, 0, 23,
	0, 49, 0, 33, 0, 0, 0, 0, 0, 0,
	86, 0, 79, 75, 76, 77, 72, 73, 0, 0,
	0, 0, 0, 0, 80, 0, 0, 0, 0, 102,
	78, 74, 93, 0, 26, 8, 0, 48, 0, 0,
	81, 85, 50, 51, 52, 53, 54, 0, 0, 0,
	0, 64, 65, 0, 66, 139, 140, 137, 138, 141,
	142, 143, 144, 145, 135, 136, 129, 130, 128, 131,
	133, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 44, 45, 0,
	0, 0, 0, 46, 0, 47, 42, 43, 55, 56,
	57, 58, 59, 60, 61, 62, 0, 87, 0, 41,
	0, 0, 0, 0, 19, 67, 68, 0, 0, 0,
	0, 39, 70, 71, 30, 0, 84, 0, 21, 0,
	0, 0, 88, 20, 12, 11, 557, 13, 0, 24,
	0, 25, 0, 0, 14, 0, 0, 0, 15, 16,
	29, 31, 0, 17, 27, 0, 0, 28, 0, 0,
	18, 0, 23, 0, 49, 0, 33, 0, 0, 0,
	0, 0, 0, 86, 0, 79, 75, 76, 77, 72,
	73, 0, 0, 0, 0, 0, 0, 80, 0, 0,
	0, 0, 102, 78, 74, 93, 0, 26, 8, 0,
	48, 0, 0, 81, 85, 50, 51, 52, 53, 54,
	0, 0, 0, 0, 64, 65, 0, 66, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 165, 166, 167, 168, 170, 171, 172, 173,
	174, 175, 176, 177, 169, 0, 0, 0, 0, 0,
	44, 45, 0, 0, 0, 0, 46, 0, 47, 42,
	43, 55, 56, 57, 58, 59, 60, 61, 62, 0,
	87, 0, 41, 178, 179, 0, 511, 19, 67, 68,
	0, 0, 0, 0, 39, 70, 71, 30, 0, 84,
	0, 21, 0, 0, 0, 88, 20, 12, 11, 0,
	13, 0, 24, 0, 25, 0, 0, 14, 0, 0,
	0, 15, 16, 29, 31, 0, 17, 27, 0, 0,
	28, 0, 0, 18, 0, 23, 0, 49, 0, 33,
	0, 0, 0, 0, 0, 0, 86, 0, 79, 75,
	76, 77, 72, 73, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 0, 0, 102, 78, 74, 93, 0,
	26, 8, 0, 48, 0, 0, 81, 85, 50, 51,
	52, 53, 54, 0, 0, 0, 0, 64, 65, 0,
	66, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 45, 0, 0, 0, 0, 46,
	0, 47, 42, 43, 55, 56, 57, 58, 59, 60,
	61, 62, 0, 87, 0, 41, 0, 0, 0, 0,
	19, 67, 68, 0, 0, 0, 0, 39, 70, 71,
	30, 0, 84, 0, 21, 0, 0, 0, 88, 20,
	12, 11, 0, 13, 0, 24, 0, 25, 0, 0,
	14, 0, 0, 0, 15, 16, 29, 31, 0, 17,
	27, 0, 0, 28, 0, 0, 18, 0, 23, 0,
	49, 0, 33, 0, 0, 0, 0, 0, 0, 86,
	0, 79, 75, 76, 77, 72, 73, 0, 0, 0,
	0, 0, 0, 80, 0, 0, 0, 0, 102, 78,
	74, 93, 0, 26, 8, 432, 48, 0, 0, 81,
	85, 50, 51, 52, 53, 54, 0, 0, 0, 0,
	64, 65, 0, 66, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 44, 45, 0, 0,
	0, 0, 46, 0, 47, 42, 43, 55, 56, 57,
	58, 59, 60, 61, 62, 0, 87, 0, 41, 0,
	0, 0, 0, 19, 67, 68, 0, 0, 0, 0,
	39, 70, 71, 30, 0, 84, 0, 21, 0, 0,
	0, 88, 20, 12, 11, 0, 13, 0, 24, 0,
	25, 0, 0, 14, 0, 0, 0, 15, 16, 29,
	31, 0, 17, 27, 0, 0, 28, 0, 0, 18,
	0, 23, 0, 49, 0, 33, 0, 0, 0, 0,
	0, 0, 86, 0, 79, 75, 76, 77, 72, 73,
	0, 0, 0, 0, 0, 0, 80, 0, 0, 0,
	0, 102, 78, 74, 93, 0, 26, 8, 232, 48,
	0, 0, 81, 85, 50, 51, 52, 53, 54, 0,
	0, 0, 0, 64, 65, 0, 66, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 44,
	45, 0, 0, 0, 0, 46, 0, 47, 42, 43,
	55, 56, 57, 58, 59, 60, 61, 62, 0, 87,
	0, 41, 0, 0, 0, 0, 19, 67, 68, 0,
	0, 0, 0, 39, 70, 71, 30, 0, 84, 0,
	21, 0, 0, 0, 88, 20, 12, 11, 0, 13,
	0, 24, 0, 25, 0, 0, 14, 0, 0, 0,
	15, 16, 29, 31, 0, 17, 27, 0, 0, 28,
	0, 0, 18, 0, 23, 0, 49, 0, 33, 0,
	0, 0, 0, 0, 0, 86, 0, 79, 75, 76,
	77, 72, 73, 0, 0, 0, 0, 0, 0, 80,
	0, 0, 0, 0, 102, 78, 74, 93, 0, 26,
	8, 0, 48, 0, 0, 81, 85, 50, 51, 52,
	53, 54, 0, 0, 0, 0, 64, 65, 0, 66,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 44, 45, 0, 0, 0, 0, 46, 0,
	47, 42, 43, 55, 56, 57, 58, 59, 60, 61,
	62, 0, 87, 0, 41, 0, 0, 0, 0, 19,
	67, 68, 0, 0, 0, 0, 39, 70, 71, 30,
	0, 84, 0, 21, 0, 0, 0, 88, 20, 12,
	11, 0, 13, 0, 24, 0, 25, 0, 0, 14,
	0, 0, 0, 15, 16, 29, 31, 0, 17, 27,
	0, 0, 28, 0, 0, 18, 0, 23, 0, 49,
	0, 33, 0, 0, 0, 0, 0, 0, 86, 0,
	79, 75, 76, 77, 72, 73, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 0, 0, 7, 78, 74,
	93, 0, 26, 8, 0, 48, 0, 0, 81, 85,
	50, 51, 52, 53, 54, 0, 0, 0, 0, 64,
	65, 0, 66, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 44, 45, 0, 0, 0,
	0, 46, 0, 47, 42, 43, 55, 56, 57, 58,
	59, 60, 61, 62, 0, 87, 0, 41, 0, 0,
	0, 0, 19, 0, 0, 0, 0, 0, 0, 39,
	70, 71, 30, 0, 84, 0, 21, 0, 0, 0,
	88, 20, 12, 11, 0, 13, 0, 24, 0, 25,
	0, 0, 14, 0, 0, 0, 15, 16, 29, 0,
	0, 17, 27, 0, 0, 28, 0, 0, 18, 0,
	23, 0, 49, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 79, 75, 76, 77, 72, 73, 0,
	0, 0, 0, 0, 0, 80, 0, 0, 0, 0,
	102, 78, 74, 93, 0, 26, 8, 0, 48, 0,
	0, 81, 85, 50, 51, 52, 53, 54, 0, 0,
	0, 0, 64, 65, 0, 66, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	633, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 44, 45,
	0, 0, 0, 0, 46, 0, 47, 42, 43, 55,
	56, 57, 58, 59, 60, 61, 62, 0, 87, 0,
	41, 0, 0, 0, 0, 19, 0, 0, 0, 0,
	0, 0, 39, 70, 71, 30, 0, 84, 0, 21,
	0, 0, 0, 88, 20, 12, 11, 0, 13, 0,
	24, 0, 25, 0, 0, 14, 0, 0, 0, 15,
	16, 29, 0, 0, 17, 27, 0, 0, 28, 0,
	0, 18, 0, 23, 0, 49, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 79, 75, 76, 77,
	72, 73, 0, 0, 0, 0, 0, 0, 80, 0,
	0, 0, 0, 102, 78, 74, 93, 0, 26, 8,
	0, 48, 0, 0, 81, 85, 50, 51, 52, 53,
	54, 0, 0, 0, 0, 64, 65, 0, 66, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 44, 45, 0, 0, 0, 0, 46, 0, 47,
	42, 43, 55, 56, 57, 58, 59, 60, 61, 62,
	0, 87, 0, 41, 0, 0, 0, 0, 19, 0,
	0, 0, 0, 0, 0, 39, 70, 71, 30, 0,
	84, 0, 21, 0, 0, 0, 88, 20, 12, 11,
	0, 13, 0, 24, 0, 25, 0, 0, 14, 0,
	0, 0, 15, 16, 29, 0, 0, 17, 27, 0,
	0, 28, 0, 0, 18, 0, 23, 0, 49, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 79,
	75, 76, 77, 72, 73, 0, 0, 0, 0, 0,
	0, 80, 0, 0, 0, 0, 102, 78, 74, 93,
	0, 26, 8, 0, 48, 0, 0, 81, 85, 50,
	51, 52, 53, 54, 0, 0, 0, 0, 64, 65,
	0, 66, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 44, 45, 0, 0, 0, 0,
	46, 0, 47, 42, 43, 55, 56, 57, 58, 59,
	60, 61, 62, 0, 87, 0, 41, 0, 0, 0,
	0, 19, 0, 0, 0, 0, 0, 0, 39, 70,
	71, 30, 0, 84, 0, 21, 0, 0, 0, 88,
	20, 12, 11, 0, 13, 0, 24, 0, 25, 0,
	0, 14, 0, 0, 0, 15, 16, 29, 0, 0,
	17, 27, 0, 0, 28, 0, 0, 18, 0, 23,
	0, 49, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 79, 75, 76, 77, 72, 73, 0, 0,
	0, 0, 0, 0, 80, 0, 0, 0, 0, 102,
	78, 74, 93, 0, 26, 8, 0, 48, 0, 0,
	81, 85, 50, 51, 52, 53, 54, 0, 0, 0,
	0, 64, 65, 0, 66, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 44, 45, 0,
	0, 0, 0, 46, 0, 47, 42, 43, 55, 56,
	57, 58, 59, 60, 61, 62, 0, 87, 0, 41,
	0, 0, 0, 0, 19, 0, 0, 0, 0, 0,
	0, 39, 70, 71, 30, 0, 84, 0, 21, 0,
	0, 0, 88, 20, 12, 11, 0, 13, 0, 24,
	0, 25, 0, 0, 14, 0, 0, 0, 15, 16,
	29, 0, 0, 17, 27, 0, 0, 28, 0, 0,
	18, 0, 23, 0, 49, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 79, 75, 76, 77, 72,
	73, 0, 0, 0, 0, 0, 0, 80, 0, 0,
	0, 0, 102, 78, 74, 93, 0, 26, 8, 0,
	48, 0, 0, 81, 85, 50, 51, 52, 53, 54,
	0, 0, 0, 0, 64, 65, 0, 66, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	44, 45, 0, 0, 0, 0, 46, 0, 47, 42,
	43, 55, 56, 57, 58, 59, 60, 61, 62, 0,
	87, 0, 41, 0, 0, 0, 0, 19, 0, 0,
	0, 0, 0, 0, 39, 70, 71, 30, 0, 84,
	0, 21, 0, 0, 0, 88, 20, 12, 11, 0,
	13, 0, 24, 0, 25, 0, 0, 14, 0, 0,
	0, 15, 16, 29, 0, 0, 17, 27, 0, 0,
	28, 0, 0, 18, 0, 23, 0, 49, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 79, 75,
	76, 77, 72, 73, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 0, 0, 102, 78, 74, 93, 0,
	26, 8, 0, 48, 124, 123, 81, 85, 346, 347,
	348, 349, 350, 0, 351, 352, 353, 389, 390, 0,
	0, 0, 0, 146, 0, 147, 120, 121, 125, 127,
	126, 139, 140, 137, 138, 141, 142, 143, 144, 145,
	135, 136, 129, 130, 128, 131, 133, 134, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	354, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 355, 356, 0, 359, 360, 361,
	340, 341, 342, 343, 344, 345, 357, 358, 0, 0,
	337, 0, 0, 0, 0, 0, 0, 0, 0, 362,
	363, 364, 365, 366, 367, 368, 369, 370, 371, 372,
	392, 393, 394, 395, 396, 384, 385, 386, 387, 388,
	373, 374, 375, 376, 377, 378, 379, 380, 381, 382,
	383, 0, 404, 402, 403, 399, 400, 0, 391, 397,
	398, 405, 406, 408, 407, 409, 410, 346, 347, 348,
	349, 350, 0, 351, 352, 353, 389, 390, 401, 412,
	411, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 354,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 355, 356, 0, 359, 360, 361, 506,
	507, 508, 505, 504, 503, 357, 358, 0, 0, 663,
	0, 0, 0, 0, 0, 0, 0, 0, 362, 363,
	364, 365, 366, 367, 368, 369, 370, 371, 372, 392,
	393, 394, 395, 396, 384, 385, 386, 387, 388, 373,
	374, 375, 376, 377, 378, 379, 380, 381, 382, 383,
	0, 404, 402, 403, 399, 400, 0, 391, 397, 398,
	405, 406, 408, 407, 409, 410, 0, 0, 0, 0,
	0, 50, 51, 52, 53, 54, 0, 401, 412, 411,
	64, 65, 0, 66, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 223, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 44, 45, 0, 0,
	0, 0, 46, 0, 47, 42, 43, 55, 56, 57,
	58, 59, 60, 61, 62, 0, 87, 0, 41, 0,
	122, 124, 123, 107, 0, 0, 0, 0, 0, 0,
	0, 70, 71, 98, 0, 84, 0, 0, 0, 0,
	146, 88, 147, 120, 121, 125, 127, 126, 139, 140,
	137, 138, 141, 142, 143, 144, 145, 135, 136, 129,
	130, 128, 131, 133, 134, 50, 51, 52, 53, 54,
	0, 0, 0, 49, 64, 65, 0, 66, 132, 0,
	0, 224, 86, 0, 79, 75, 76, 77, 72, 73,
	0, 0, 0, 0, 0, 0, 80, 0, 458, 0,
	0, 102, 78, 74, 93, 0, 0, 0, 0, 48,
	44, 45, 81, 85, 0, 0, 46, 0, 47, 42,
	43, 55, 56, 57, 58, 59, 60, 61, 62, 0,
	87, 0, 41, 0, 0, 0, 0, 107, 0, 0,
	0, 0, 0, 0, 0, 70, 71, 98, 0, 84,
	0, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 510, 0, 0, 0, 0, 0, 50,
	51, 52, 53, 54, 0, 0, 0, 49, 64, 65,
	0, 66, 0, 0, 0, 459, 86, 0, 79, 75,
	76, 77, 72, 73, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 0, 0, 102, 78, 74, 93, 0,
	0, 0, 0, 48, 44, 45, 81, 85, 0, 0,
	46, 0, 47, 42, 43, 55, 56, 57, 58, 59,
	60, 61, 62, 0, 87, 0, 41, 0, 122, 124,
	123, 107, 0, 0, 0, 0, 0, 0, 0, 70,
	71, 98, 326, 84, 0, 0, 0, 0, 146, 88,
	147, 120, 121, 125, 127, 126, 139, 140, 137, 138,
	141, 142, 143, 144, 145, 135, 136, 129, 130, 128,
	131, 133, 134, 50, 51, 52, 53, 54, 0, 0,
	0, 49, 64, 65, 0, 66, 132, 0, 0, 0,
	86, 0, 79, 75, 76, 77, 72, 73, 0, 0,
	0, 0, 0, 0, 80, 0, 300, 0, 0, 102,
	78, 74, 93, 0, 0, 0, 0, 48, 44, 45,
	81, 85, 0, 0, 46, 0, 47, 42, 43, 55,
	56, 57, 58, 59, 60, 61, 62, 0, 87, 0,
	41, 0, 0, 0, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 70, 71, 98, 0, 84, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 509, 0, 0, 0, 0, 0, 50, 51, 52,
	53, 54, 0, 0, 0, 49, 64, 65, 0, 66,
	0, 0, 0, 0, 86, 0, 79, 75, 76, 77,
	72, 73, 0, 0, 279, 0, 0, 0, 80, 0,
	0, 0, 0, 102, 78, 74, 93, 0, 0, 0,
	0, 48, 44, 45, 81, 85, 0, 0, 46, 0,
	47, 42, 43, 55, 56, 57, 58, 59, 60, 61,
	62, 0, 87, 0, 41, 0, 122, 124, 123, 107,
	0, 0, 0, 0, 0, 0, 0, 70, 71, 98,
	0, 84, 0, 0, 0, 0, 146, 88, 147, 120,
	121, 125, 127, 126, 139, 140, 137, 138, 141, 142,
	143, 144, 145, 135, 136, 129, 130, 128, 131, 133,
	134, 50, 51, 52, 53, 54, 0, 0, 0, 49,
	64, 65, 0, 66, 132, 0, 0, 0, 86, 0,
	79, 75, 76, 77, 72, 73, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 0, 0, 102, 78, 74,
	93, 0, 0, 0, 0, 48, 44, 45, 81, 85,
	0, 0, 46, 0, 47, 42, 43, 55, 56, 57,
	58, 59, 60, 61, 62, 0, 87, 0, 41, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 70, 71, 98, 0, 84, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 442,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 79, 75, 76, 77, 72, 73,
	0, 0, 0, 0, 0, 0, 80, 122, 124, 123,
	0, 102, 78, 74, 93, 0, 0, 0, 0, 48,
	0, 0, 81, 85, 0, 0, 0, 146, 0, 147,
	120, 121, 125, 127, 126, 139, 140, 137, 138, 141,
	142, 143, 144, 145, 135, 136, 129, 130, 128, 131,
	133, 134, 122, 124, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 146, 0, 147, 120, 121, 125, 127, 126,
	139, 140, 137, 138, 141, 142, 143, 144, 145, 135,
	136, 129, 130, 128, 131, 133, 134, 122, 124, 123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 0, 0, 0, 0, 0, 146, 0, 147,
	120, 121, 125, 127, 126, 139, 140, 137, 138, 141,
	142, 143, 144, 145, 135, 136, 129, 130, 128, 131,
	133, 134, 122, 124, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	441, 0, 146, 0, 147, 120, 121, 125, 127, 126,
	139, 140, 137, 138, 141, 142, 143, 144, 145, 135,
	136, 129, 130, 128, 131, 133, 134, 122, 124, 123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 0, 0, 0, 440, 0, 146, 0, 147,
	120, 121, 125, 127, 126, 139, 140, 137, 138, 141,
	142, 143, 144, 145, 135, 136, 129, 130, 128, 131,
	133, 134, 122, 124, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	419, 0, 146, 0, 147, 120, 121, 125, 127, 126,
	139, 140, 137, 138, 141, 142, 143, 144, 145, 135,
	136, 129, 130, 128, 131, 133, 134, 122, 124, 123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 0, 0, 0, 415, 0, 146, 0, 147,
	120, 121, 125, 127, 126, 139, 140, 137, 138, 141,
	142, 143, 144, 145, 135, 136, 129, 130, 128, 131,
	133, 134, 122, 124, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	314, 0, 146, 598, 147, 120, 121, 125, 127, 126,
	139, 140, 137, 138, 141, 142, 143, 144, 145, 135,
	136, 129, 130, 128, 131, 133, 134, 122, 124, 123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 0, 454, 0, 0, 0, 146, 0, 147,
	120, 121, 125, 127, 126, 139, 140, 137, 138, 141,
	142, 143, 144, 145, 135, 136, 129, 130, 128, 131,
	133, 134, 122, 124, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 450, 0,
	0, 0, 146, 0, 147, 120, 121, 125, 127, 126,
	139, 140, 137, 138, 141, 142, 143, 144, 145, 135,
	136, 129, 130, 128, 131, 133, 134, 122, 124, 123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 599, 0, 0, 0, 0, 0, 146, 0, 147,
	120, 121, 125, 127, 126, 139, 140, 137, 138, 141,
	142, 143, 144, 145, 135, 136, 129, 130, 128, 131,
	133, 134, 122, 124, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 289, 0, 0, 0,
	0, 0, 146, 424, 147, 120, 121, 125, 127, 126,
	139, 140, 137, 138, 141, 142, 143, 144, 145, 135,
	136, 129, 130, 128, 131, 133, 134, 0, 122, 124,
	123, 0, 428, 333, 0, 0, 0, 0, 0, 0,
	132, 119, 0, 0, 0, 0, 0, 0, 146, 0,
	147, 120, 121, 125, 127, 126, 139, 140, 137, 138,
	141, 142, 143, 144, 145, 135, 136, 129, 130, 128,
	131, 133, 134, 122, 124, 123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 0, 0, 0,
	0, 0, 0, 146, 0, 147, 120, 121, 125, 127,
	126, 139, 140, 137, 138, 141, 142, 143, 144, 145,
	135, 136, 129, 130, 128, 131, 133, 134, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132,
}
var yyPact = [...]int{

	-1000, -1000, 2923, -1000, -1000, -1000, -1000, 162, -1000, -1000,
	-1000, -52, 3901, -53, -54, 4917, 4917, 4917, -49, 211,
	4917, -1000, 5462, -59, -60, -63, -1000, 50, 4917, 263,
	367, 324, 214, 261, 283, 280, 2285, -1000, -1000, -64,
	-1000, 4917, -49, -49, 4917, 4917, 4917, 4917, 4917, -67,
	4917, 4917, -68, 4917, 4917, 4917, 4917, 4917, 4917, 4917,
	4917, 4917, 4917, -1000, 4917, 4917, 4917, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	177, 169, -1000, -1000, -1000, -9, -70, 4347, -1000, -1000,
	118, 111, -1000, 249, -1000, 99, 249, 82, -1000, 2597,
	4917, 186, 98, 4917, 4917, 81, 5643, -1000, 80, 79,
	200, -1000, -1000, 199, -1000, 388, 193, -1000, 5643, -1000,
	4917, 4917, 4917, 4917, 4917, 4917, 4917, 4917, 4917, 4917,
	4917, 4917, 4917, 4917, 4917, 4917, 4917, 4917, 4917, 4917,
	4917, 4917, 4917, 4917, 4917, 4917, 4803, 4917, -49, 4917,
	222, -1000, 5417, 78, -1000, 246, -1000, 240, -1000, 41,
	-71, 3901, -72, 77, 366, 4689, 4917, 4917, 4917, 4917,
	4917, 4917, 4917, 4917, 4917, 4917, 4917, 4917, -1000, -1000,
	4917, -1000, -1000, -1000, 282, 282, 282, 282, 5237, 4917,
	5643, 5643, 4917, 5643, 5643, 282, 282, 282, 282, 282,
	282, 282, 282, 800, 1115, 800, 187, -1000, 173, -1000,
	207, 4575, -49, 95, 179, 4917, -1000, 4347, -114, 420,
	-1000, -1000, 5598, -49, -73, 4064, 4064, -1000, 228, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 5192, -76, 76, 417,
	5643, 5147, -1000, -1000, -1000, -1000, -49, -1000, 211, 4917,
	-1000, 4917, 1439, 1602, 4053, 800, 955, 1765, 2087, 1925,
	369, 369, 369, 282, 282, 282, 282, 459, 459, 423,
	423, 423, 423, 423, 360, 360, 360, 360, 5552, 4917,
	1278, 411, -1000, -1000, 5507, 34, -1000, 387, 2434, -1000,
	-1000, -77, 40, -1000, 4917, -1000, 4917, -1000, -1000, 800,
	4917, 800, 800, 800, 800, 800, 800, 800, 800, 800,
	800, 800, 800, 5102, -1000, 5057, 4866, 4917, -1000, -1000,
	-1000, -1000, -1000, 224, 225, 5327, 24, 25, -1000, 5282,
	-85, -1000, 4347, 4461, -1000, 4347, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3738, 4917, 4917, 4917, 156,
	-1000, -1000, 5643, -1000, 4917, 1278, -86, -49, 115, 3575,
	222, 4917, -1000, 70, -1000, 84, 4638, 4410, 2271, 2087,
	3412, -1000, -1000, 800, -124, -1000, -1000, 205, -1000, -1000,
	-1000, -1000, 4917, -1000, -1000, -1000, -1000, 5643, -49, -78,
	-87, -1000, -1000, -1000, 655, 75, 5643, -1000, 74, 71,
	1278, 67, -1000, 26, -1000, -49, -79, 4347, -1000, -1000,
	-1000, -1000, 5643, 160, -88, 407, -1000, 325, -1000, -1000,
	133, -1000, -1000, -1000, 35, -1000, -1000, 208, 175, 125,
	312, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3901,
	365, 66, -1000, -1000, -1000, -1000, 333, -1000, 4347, -1000,
	2108, 64, 4917, -2, -1000, 198, -1000, -1000, 3086, 115,
	-1000, 4347, -127, 1945, -1000, -80, 39, 364, 70, 86,
	-1000, -1000, -1000, 189, -1000, 385, 4064, 324, 72, -1000,
	-1000, -1000, -1000, -1000, 2760, 19, -91, 63, -1000, -92,
	-1000, 4917, 163, -12, 62, 195, -1000, -1000, -1000, -93,
	-94, -1000, 61, 125, -1000, 32, 70, -1000, 210, -1000,
	-1000, 208, 4917, 182, -1000, 383, 4064, -1000, 125, -1000,
	809, 2760, -1000, -1000, -1000, 3249, 5372, -1000, -1000, -1000,
	-1000, -1000, 58, 1782, 3086, -1000, -1000, 258, -1000, 1619,
	-1000, -1000, 382, -1000, 5643, -1000, 4064, 4917, -82, -1000,
	-1000, 670, -1000, 56, 55, 151, 168, 110, -1000, 98,
	-1000, -1000, -1000, -1000, -1000, 2760, -1000, 54, -1000, -99,
	125, -1000, 1456, 4917, -1000, 5643, 70, -1000, -1000, -1000,
	-1000, 125, 4203, 4064, 1293, 2760, -1000, -40, -1000, -1000,
	5643, -110, 406, -1000, -1000, 4064, -1000, 36, -1000, 364,
	-1000, -1000, 1130, -41, -1000, -1000, -1000, -1000, 967, -1000,
}
var yyPgo = [...]int{

	0, 394, 539, 538, 15, 7, 537, 2, 536, 309,
	535, 5, 534, 20, 533, 1, 531, 435, 431, 529,
	3, 14, 26, 4, 528, 19, 0, 526, 525, 30,
	68, 524, 522, 521, 520, 518, 25, 516, 514, 504,
	28, 424, 503, 38, 501, 35, 500, 34, 499, 36,
	22, 24, 31, 495, 494, 10, 493, 32, 492, 490,
	488, 487, 27, 486, 485, 484, 6, 483, 13, 481,
	11, 480, 9, 479, 460, 8, 457, 456, 455, 454,
	452, 451, 351, 44, 449, 448, 447, 446, 445, 444,
	440, 430, 12,
}
var yyR1 = [...]int{

	0, 90, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 6,
	6, 6, 6, 6, 6, 6, 7, 7, 10, 10,
	9, 11, 11, 11, 12, 12, 8, 8, 8, 8,
	15, 15, 14, 14, 14, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 59,
	59, 60, 60, 61, 61, 56, 56, 57, 58, 58,
	31, 31, 32, 32, 33, 33, 34, 34, 35, 35,
	36, 36, 37, 37, 39, 39, 39, 39, 40, 40,
	40, 92, 92, 38, 38, 50, 50, 50, 50, 51,
	52, 52, 53, 53, 54, 54, 54, 54, 54, 54,
	55, 55, 42, 42, 43, 44, 44, 45, 45, 46,
	46, 47, 48, 48, 49, 91, 91, 17, 17, 16,
	16, 1, 1, 62, 62, 63, 63, 63, 63, 72,
	72, 73, 73, 73, 74, 74, 75, 75, 76, 77,
	77, 77, 77, 78, 78, 79, 80, 80, 64, 64,
	69, 69, 70, 71, 71, 65, 65, 66, 66, 66,
	66, 66, 66, 67, 67, 68, 68, 18, 23, 23,
	24, 24, 25, 25, 19, 19, 4, 4, 2, 2,
	3, 3, 21, 21, 22, 22, 22, 20, 20, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 82, 82,
	82, 82, 83, 83, 83, 83, 83, 83, 83, 84,
	84, 84, 84, 85, 85, 85, 86, 86, 87, 88,
	88, 88, 89, 89, 89, 26, 26, 41, 41, 28,
	29, 30, 30, 30,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 1, 2, 3, 2, 0, 1, 1, 1, 3,
	2, 0, 1, 1, 1, 3, 1, 1, 5, 7,
	9, 5, 3, 3, 3, 3, 3, 3, 1, 2,
	6, 7, 9, 5, 1, 6, 3, 3, 2, 0,
	9, 1, 3, 0, 4, 3, 1, 3, 1, 4,
	5, 6, 1, 3, 6, 7, 3, 6, 1, 4,
	0, 1, 3, 1, 3, 4, 4, 5, 0, 5,
	4, 1, 1, 1, 4, 1, 2, 4, 3, 1,
	0, 1, 3, 1, 3, 1, 4, 2, 6, 4,
	1, 4, 3, 1, 1, 3, 1, 1, 3, 3,
	1, 1, 1, 3, 1, 0, 1, 6, 5, 1,
	2, 1, 1, 2, 0, 3, 4, 3, 9, 1,
	3, 1, 2, 3, 1, 2, 2, 2, 3, 3,
	3, 4, 3, 1, 1, 3, 1, 3, 1, 1,
	3, 1, 3, 0, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 3, 10, 1, 0,
	1, 3, 4, 6, 0, 1, 0, 1, 0, 1,
	0, 1, 1, 2, 1, 1, 1, 0, 2, 3,
	4, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	4, 3, 4, 2, 2, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 2, 1, 2,
	4, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 3, 3, 1, 1, 2, 2,
	1, 2, 1, 4, 3, 3, 3, 6, 3, 1,
	1, 2, 1, 1, 3, 3, 1, 1, 1, 1,
	3, 1, 4, 3, 1, 1, 1, 0, 1, 1,
	1, 1, 4, 2,
}
var yyChk = [...]int{

	-1000, -90, -12, -8, -13, -18, -17, 154, 160, -32,
	-34, 97, 96, 99, 106, 110, 111, 115, 122, 76,
	95, 90, -26, 124, 101, 103, 159, 116, 119, 112,
	86, 113, -16, 128, -31, -33, -29, -27, -1, 83,
	-28, 71, 58, 59, 49, 50, 55, 57, 162, 126,
	4, 5, 6, 7, 8, 60, 61, 62, 63, 64,
	65, 66, 67, -81, 13, 14, 16, 77, 78, -30,
	84, 85, 141, 142, 156, 138, 139, 140, 155, 137,
	149, 165, -89, -85, 88, 166, 135, 69, 94, -11,
	-86, -87, -9, 157, -88, -10, 157, -9, 86, -15,
	162, -13, 154, 162, 162, -41, -26, 76, -41, -41,
	-42, -43, -30, -44, -45, 88, -46, -47, -26, 159,
	33, 34, 10, 12, 11, 35, 37, 36, 51, 49,
	50, 52, 68, 53, 54, 47, 48, 40, 41, 38,
	39, 42, 43, 44, 45, 46, 30, 32, 162, 162,
	162, 160, -26, 86, 31, -4, 37, 128, -1, 86,
	73, 74, 73, 75, 74, 17, 18, 19, 20, 29,
	21, 22, 23, 24, 25, 26, 27, 28, 58, 59,
	162, -26, -29, -29, -26, -26, -26, -26, -26, 162,
	-26, -26, 162, -26, -26, -26, -26, -26, -26, -26,
	-26, -26, -26, -26, -26, -26, 93, 150, -82, -83,
	88, 151, 152, -82, 93, 160, -30, 162, -51, -53,
	-52, -54, -26, 37, 134, 153, 153, -9, 157, -9,
	159, -14, 161, -13, -18, -17, -26, 97, -36, -37,
	-26, -26, 159, 159, 159, 159, 9, 159, 9, 17,
	159, 9, -26, -26, -26, -26, -26, -26, -26, -26,
	-26, -26, -26, -26, -26, -26, -26, -26, -26, -26,
	-26, -26, -26, -26, -26, -26, -26, -26, -26, 31,
	-26, -48, -49, -29, -26, -56, -57, 86, -15, 159,
	159, 86, 86, 160, 162, -13, 162, 159, 31, -26,
	37, -26, -26, -26, -26, -26, -26, -26, -26, -26,
	-26, -26, -26, -26, 163, -26, -26, 15, 150, -83,
	150, -83, 93, 69, 133, -26, 87, -29, 165, -26,
	-51, 164, 9, 15, -29, 162, -7, 86, -6, -5,
	76, 77, 78, 79, 80, 81, 4, 5, 6, 7,
	8, 10, 11, 12, 56, 70, 71, 82, 83, 73,
	74, 75, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 111, 112, 113, 114, 115, 13,
	14, 134, 106, 107, 108, 109, 110, 135, 136, 131,
	132, 154, 129, 130, 128, 137, 138, 140, 139, 141,
	142, 156, 155, -7, 86, 163, 162, 159, 9, 163,
	-43, -45, -26, -47, 31, -26, -91, 9, 105, 163,
	9, 17, 161, 162, 160, -62, -26, -26, -15, -26,
	163, 163, 163, -26, -84, 86, 89, 50, 88, 86,
	161, 161, 69, 161, 161, 163, -52, -26, 37, 134,
	-51, -35, -13, 31, -26, -36, -26, -39, 160, 31,
	-26, 163, -49, -50, -29, 37, 134, 69, -58, -13,
	31, -57, -26, -59, -23, -24, -25, -19, -21, -22,
	30, -11, 135, 136, -62, 161, -63, -64, -71, 120,
	-65, 123, -66, 81, 80, 79, 76, 77, 78, 163,
	163, 75, -13, 31, 164, 89, -26, -29, 162, 163,
	-15, 163, 159, -40, 159, -40, 159, 159, 163, 15,
	-29, 162, -51, -15, -61, 117, 118, 163, 9, -2,
	37, -22, 161, -67, -68, 88, 114, 113, -72, -11,
	-66, -13, 31, 159, -15, 164, -51, 98, 159, -36,
	161, 108, 109, -40, 107, -40, -55, -13, 31, -50,
	-51, 164, 104, 162, 160, -20, 31, -25, -3, 158,
	159, 9, 17, -69, -70, -7, -4, -73, 9, 159,
	160, -15, 161, 163, 159, 163, -26, -92, 31, 159,
	161, 159, 107, -15, 163, 163, 159, -60, -11, -15,
	160, -21, 88, -68, -26, 159, 9, 17, -7, -11,
	161, -74, -75, -76, -77, -79, -78, -11, -7, 154,
	86, -38, -13, 31, -92, -15, 159, 102, -55, 88,
	35, 161, -15, 17, -70, -26, 162, 161, -75, 159,
	159, 121, 105, 153, -15, -15, 159, 163, -11, 161,
	-26, -23, -72, 86, -5, -66, -7, 100, 160, 163,
	-7, 159, -15, -20, 161, -80, 159, 160, -15, 161,
}
var yyDef = [...]int{

	85, -2, 1, 84, 86, 87, 88, 0, 91, 96,
	97, 0, 0, 0, 0, 377, 377, 377, 0, 366,
	0, 108, 0, 0, 0, 0, 114, 0, 0, 0,
	78, 246, 0, 0, 132, 0, -2, 376, 189, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 328, 0, 191, 192, 379,
	332, 333, 334, 335, 336, 337, 338, 339, 340, 341,
	0, 0, -2, 347, 381, 0, 0, 160, 374, -2,
	0, 0, 81, 0, 368, 80, 0, 0, 78, 0,
	0, 0, 0, 140, 0, 0, 378, 366, 0, 0,
	0, 173, 174, 0, 176, 177, 0, 180, 181, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 0, 0, 118, 0, 247, 0, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 276,
	0, 261, 275, 277, 295, 296, 297, 298, 0, 0,
	313, 314, 0, 316, 317, 318, 319, 320, 321, 322,
	323, 324, 325, 327, 329, 331, 0, 343, 0, 350,
	352, 0, 0, 0, 0, 0, 383, 160, 0, 159,
	163, 161, 165, 0, 0, 0, 0, 82, 0, 83,
	89, 90, 95, 92, 93, 94, 0, 0, 0, 141,
	143, 0, 102, 103, 104, 105, 0, 106, 0, 0,
	107, 0, 278, 279, 280, 281, 282, 283, 284, 285,
	286, 287, 288, 289, 290, 291, 292, 293, 294, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 0, 0,
	311, 185, 182, 184, 0, 0, 126, 0, 0, 116,
	117, 0, 0, 194, 0, 133, 0, 136, 91, 259,
	0, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 0, -2, 0, 0, 0, 342, 351,
	345, 348, 349, 0, 0, 0, 0, 0, 344, 0,
	0, 373, 160, 0, 167, 160, 364, 76, 77, 69,
	70, 71, 72, 73, 74, 75, 2, 3, 4, 5,
	6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
	26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
	36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 365, 79, 0, 0, 140, 0, 0,
	172, 175, 178, 179, 0, 310, 0, 186, 0, 0,
	0, 0, 119, -2, 194, 223, 0, 0, 0, 260,
	0, 312, 315, 330, 0, 359, 360, 0, 362, 354,
	355, 356, 0, 358, 382, 372, 162, 164, 0, 0,
	0, 98, 138, 91, 0, 0, 142, 101, 148, 148,
	309, 0, 183, 0, 155, 0, 0, 160, 113, 128,
	91, 125, 127, 123, 0, 238, 240, 248, 245, 252,
	0, 254, 255, 256, 223, 188, 193, 0, 0, 0,
	-2, 219, 225, 227, 228, 229, 230, 231, 232, 0,
	0, 0, 130, 91, 353, 361, 0, 166, 160, 169,
	0, 0, 140, 0, 148, 0, 148, 110, 0, 0,
	156, 160, 0, 0, 115, 0, 0, 257, 244, 250,
	249, 253, 187, 0, 234, 235, 0, 246, 0, 199,
	226, 131, 91, 137, 134, 0, 0, 0, 99, 0,
	144, 0, 0, 0, 0, 0, 111, 170, 91, 0,
	0, 158, 0, 0, 91, 0, 0, 241, 0, 251,
	195, 0, 0, 0, 221, 0, 0, 197, 0, 201,
	0, 135, 357, 168, 139, 0, 0, 91, 151, 152,
	145, 146, 0, 0, 0, 157, 129, 0, 121, 0,
	91, 258, 242, 233, 236, 196, 0, 0, 0, 200,
	202, 0, 204, 0, 0, 214, 0, 0, 213, 57,
	-2, 100, 153, 91, 91, 150, 147, 0, 112, 0,
	0, 124, 0, 0, 220, 222, -2, 203, 205, 206,
	207, 0, 0, 0, 0, 149, 171, 0, 122, 237,
	243, 0, 208, 209, 210, 212, 215, 0, 91, 257,
	211, 154, 0, 0, 120, 198, 216, 91, 0, 217,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 55, 165, 3, 166, 54, 37, 3,
	162, 163, 52, 49, 9, 50, 51, 53, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 31, 159,
	43, 17, 45, 30, 67, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 69, 3, 164, 36, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 160, 35, 161, 57,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 10, 11, 12,
	13, 14, 15, 16, 18, 19, 20, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 32, 33, 34, 38,
	39, 40, 41, 42, 44, 46, 47, 48, 56, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 68, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 157, 158,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:288
		{
			fmt.Println(yyDollar[1].node)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:292
		{
			yyVAL.value = yyDollar[1].token
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:292
		{
			yyVAL.value = yyDollar[1].token
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:292
		{
			yyVAL.value = yyDollar[1].token
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:292
		{
			yyVAL.value = yyDollar[1].token
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:292
		{
			yyVAL.value = yyDollar[1].token
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:292
		{
			yyVAL.value = yyDollar[1].token
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:292
		{
			yyVAL.value = yyDollar[1].token
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:292
		{
			yyVAL.value = yyDollar[1].token
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:293
		{
			yyVAL.value = yyDollar[1].token
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:293
		{
			yyVAL.value = yyDollar[1].token
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:293
		{
			yyVAL.value = yyDollar[1].token
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:293
		{
			yyVAL.value = yyDollar[1].token
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:293
		{
			yyVAL.value = yyDollar[1].token
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:293
		{
			yyVAL.value = yyDollar[1].token
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:293
		{
			yyVAL.value = yyDollar[1].token
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:293
		{
			yyVAL.value = yyDollar[1].token
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:293
		{
			yyVAL.value = yyDollar[1].token
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:293
		{
			yyVAL.value = yyDollar[1].token
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:293
		{
			yyVAL.value = yyDollar[1].token
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:293
		{
			yyVAL.value = yyDollar[1].token
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:294
		{
			yyVAL.value = yyDollar[1].token
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:294
		{
			yyVAL.value = yyDollar[1].token
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:294
		{
			yyVAL.value = yyDollar[1].token
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:294
		{
			yyVAL.value = yyDollar[1].token
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:294
		{
			yyVAL.value = yyDollar[1].token
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:294
		{
			yyVAL.value = yyDollar[1].token
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:294
		{
			yyVAL.value = yyDollar[1].token
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:294
		{
			yyVAL.value = yyDollar[1].token
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:294
		{
			yyVAL.value = yyDollar[1].token
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:294
		{
			yyVAL.value = yyDollar[1].token
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:295
		{
			yyVAL.value = yyDollar[1].token
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:295
		{
			yyVAL.value = yyDollar[1].token
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:295
		{
			yyVAL.value = yyDollar[1].token
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:295
		{
			yyVAL.value = yyDollar[1].token
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:295
		{
			yyVAL.value = yyDollar[1].token
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:295
		{
			yyVAL.value = yyDollar[1].token
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:295
		{
			yyVAL.value = yyDollar[1].token
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:295
		{
			yyVAL.value = yyDollar[1].token
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:295
		{
			yyVAL.value = yyDollar[1].token
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:295
		{
			yyVAL.value = yyDollar[1].token
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:296
		{
			yyVAL.value = yyDollar[1].token
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:296
		{
			yyVAL.value = yyDollar[1].token
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:296
		{
			yyVAL.value = yyDollar[1].token
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:296
		{
			yyVAL.value = yyDollar[1].token
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:296
		{
			yyVAL.value = yyDollar[1].token
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:296
		{
			yyVAL.value = yyDollar[1].token
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:296
		{
			yyVAL.value = yyDollar[1].token
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:296
		{
			yyVAL.value = yyDollar[1].token
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:296
		{
			yyVAL.value = yyDollar[1].token
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:296
		{
			yyVAL.value = yyDollar[1].token
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:296
		{
			yyVAL.value = yyDollar[1].token
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:297
		{
			yyVAL.value = yyDollar[1].token
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:297
		{
			yyVAL.value = yyDollar[1].token
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:297
		{
			yyVAL.value = yyDollar[1].token
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:297
		{
			yyVAL.value = yyDollar[1].token
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:297
		{
			yyVAL.value = yyDollar[1].token
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:297
		{
			yyVAL.value = yyDollar[1].token
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:297
		{
			yyVAL.value = yyDollar[1].token
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:297
		{
			yyVAL.value = yyDollar[1].token
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:298
		{
			yyVAL.value = yyDollar[1].token
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:298
		{
			yyVAL.value = yyDollar[1].token
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:298
		{
			yyVAL.value = yyDollar[1].token
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:298
		{
			yyVAL.value = yyDollar[1].token
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:298
		{
			yyVAL.value = yyDollar[1].token
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:298
		{
			yyVAL.value = yyDollar[1].token
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:298
		{
			yyVAL.value = yyDollar[1].token
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:298
		{
			yyVAL.value = yyDollar[1].token
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:302
		{
			yyVAL.value = yyDollar[1].value
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:303
		{
			yyVAL.value = yyDollar[1].token
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:303
		{
			yyVAL.value = yyDollar[1].token
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:303
		{
			yyVAL.value = yyDollar[1].token
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:303
		{
			yyVAL.value = yyDollar[1].token
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:303
		{
			yyVAL.value = yyDollar[1].token
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:303
		{
			yyVAL.value = yyDollar[1].token
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:307
		{
			yyVAL.node = Node("identifier").attribute("value", yyDollar[1].token)
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:308
		{
			yyVAL.node = Node("identifier").attribute("value", yyDollar[1].value)
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:312
		{
			yyVAL.node = Node("NamespaceParts").append(Node(yyDollar[1].token))
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:313
		{
			yyVAL.node = yyDollar[1].node.append(Node(yyDollar[3].token))
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:317
		{
			yyVAL.node = yyDollar[1].node
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:321
		{
			yyVAL.node = Node("Name").append(yyDollar[1].node)
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:322
		{
			yyVAL.node = Node("Name").append(yyDollar[2].node).attribute("FullyQualified", "true")
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:323
		{
			yyVAL.node = Node("Name").append(yyDollar[3].node).attribute("Relative", "true")
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:327
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[2].node)
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:328
		{
			yyVAL.node = Node("Statements")
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:332
		{
			yyVAL.node = yyDollar[1].node
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:333
		{
			yyVAL.node = yyDollar[1].node
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:334
		{
			yyVAL.node = yyDollar[1].node
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:335
		{
			yyVAL.node = Node("Namespace").append(yyDollar[2].node)
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:339
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[2].node)
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:340
		{
			yyVAL.node = Node("stmt")
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:344
		{
			yyVAL.node = yyDollar[1].node
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:345
		{
			yyVAL.node = yyDollar[1].node
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:346
		{
			yyVAL.node = yyDollar[1].node
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:349
		{
			yyVAL.node = yyDollar[2].node
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:350
		{
			yyVAL.node = yyDollar[1].node
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:351
		{
			yyVAL.node = yyDollar[1].node
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:353
		{
			yyVAL.node = Node("While").
				append(Node("expr").append(yyDollar[3].node)).
				append(Node("stmt").append(yyDollar[5].node))
		}
	case 99:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:359
		{
			yyVAL.node = Node("DoWhile").
				append(Node("expr").append(yyDollar[5].node)).
				append(Node("stmt").append(yyDollar[2].node))
		}
	case 100:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:365
		{
			yyVAL.node = Node("For").
				append(Node("expr1").append(yyDollar[3].node)).
				append(Node("expr2").append(yyDollar[5].node)).
				append(Node("expr3").append(yyDollar[7].node)).
				append(Node("stmt").append(yyDollar[9].node))
		}
	case 101:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:372
		{
			yyVAL.node = Node("Switch").append(Node("expr").append(yyDollar[3].node)).append(yyDollar[5].node)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:373
		{
			yyVAL.node = Node("Break").append(yyDollar[2].node)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:374
		{
			yyVAL.node = Node("Continue").append(yyDollar[2].node)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:375
		{
			yyVAL.node = Node("Return").append(yyDollar[2].node)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:376
		{
			yyVAL.node = yyDollar[2].node
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:377
		{
			yyVAL.node = yyDollar[2].node
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:378
		{
			yyVAL.node = yyDollar[2].node
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:379
		{
			yyVAL.node = Node("Echo").append(Node("InlineHtml").attribute("value", yyDollar[1].token))
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:380
		{
			yyVAL.node = yyDollar[1].node
		}
	case 110:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:382
		{
			yyVAL.node = Node("Unset").append(yyDollar[3].node)
		}
	case 111:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:384
		{
			yyVAL.node = Node("Foreach").
				append(Node("expr").append(yyDollar[3].node)).
				append(Node("ForeachVariable").append(yyDollar[5].node)).
				append(yyDollar[7].node)
		}
	case 112:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:391
		{
			yyVAL.node = Node("Foreach").
				append(Node("expr").append(yyDollar[3].node)).
				append(Node("ForeachKey").append(yyDollar[5].node)).
				append(Node("ForeachVariable").append(yyDollar[7].node)).
				append(yyDollar[9].node)
		}
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:398
		{
			yyVAL.node = Node("Declare").append(yyDollar[3].node).append(yyDollar[5].node)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:399
		{
			yyVAL.node = Node("")
		}
	case 115:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:401
		{
			yyVAL.node = Node("Try").
				append(yyDollar[3].node).
				append(yyDollar[5].node).
				append(yyDollar[6].node)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:407
		{
			yyVAL.node = Node("Throw").append(yyDollar[2].node)
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:408
		{
			yyVAL.node = Node("GoTo").attribute("Label", yyDollar[2].token)
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:409
		{
			yyVAL.node = Node("Label").attribute("name", yyDollar[1].token)
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:412
		{
			yyVAL.node = Node("CatchList")
		}
	case 120:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:414
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[4].node).append(Node("Variable").attribute("name", yyDollar[5].token)).append(yyDollar[8].node)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:417
		{
			yyVAL.node = Node("CatchNameList").append(yyDollar[1].node)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:418
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:422
		{
			yyVAL.node = Node("")
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:423
		{
			yyVAL.node = Node("Finnaly").append(yyDollar[3].node)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:427
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:428
		{
			yyVAL.node = Node("ConstList").append(yyDollar[1].node)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:432
		{
			yyVAL.node = Node("Const").attribute("name", yyDollar[1].token).append(yyDollar[3].node)
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:436
		{
			yyVAL.node = yyDollar[1].node
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:437
		{
			yyVAL.node = yyDollar[2].node
		}
	case 130:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:442
		{
			yyVAL.node = Node("If").append(Node("expr").append(yyDollar[3].node)).append(Node("stmt").append(yyDollar[5].node))
		}
	case 131:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:446
		{
			yyVAL.node = yyDollar[1].node.append(Node("ElseIf").append(Node("expr").append(yyDollar[4].node)).append(Node("stmt").append(yyDollar[6].node)))
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:452
		{
			yyVAL.node = yyDollar[1].node
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:454
		{
			yyVAL.node = yyDollar[1].node.append(Node("Else").append(Node("stmt").append(yyDollar[3].node)))
		}
	case 134:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:461
		{
			yyVAL.node = Node("AltIf").append(Node("expr").append(yyDollar[3].node)).append(Node("stmt").append(yyDollar[6].node))
		}
	case 135:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:465
		{
			yyVAL.node = yyDollar[1].node.append(Node("AltElseIf").append(Node("expr").append(yyDollar[4].node)).append(Node("stmt").append(yyDollar[7].node)))
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:471
		{
			yyVAL.node = yyDollar[1].node
		}
	case 137:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:473
		{
			yyVAL.node = yyDollar[1].node.append(Node("AltElse").append(Node("stmt").append(yyDollar[4].node)))
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:479
		{
			yyVAL.node = yyDollar[1].node
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:480
		{
			yyVAL.node = yyDollar[2].node
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:484
		{
			yyVAL.node = Node("")
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:485
		{
			yyVAL.node = yyDollar[1].node
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:488
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:489
		{
			yyVAL.node = Node("ExpressionList").append(yyDollar[1].node)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:493
		{
			yyVAL.node = yyDollar[2].node
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:494
		{
			yyVAL.node = yyDollar[3].node
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:495
		{
			yyVAL.node = yyDollar[2].node
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:496
		{
			yyVAL.node = yyDollar[3].node
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:500
		{
			yyVAL.node = Node("CaseList")
		}
	case 149:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:502
		{
			yyVAL.node = yyDollar[1].node.append(Node("Case").append(Node("expr").append(yyDollar[3].node)).append(yyDollar[5].node))
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:506
		{
			yyVAL.node = yyDollar[1].node.append(Node("Default").append(yyDollar[4].node))
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:517
		{
			yyVAL.node = yyDollar[1].node
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:518
		{
			yyVAL.node = yyDollar[2].node
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:522
		{
			yyVAL.node = yyDollar[1].node
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:523
		{
			yyVAL.node = Node("Ref").append(yyDollar[2].node)
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:524
		{
			yyVAL.node = Node("List").append(yyDollar[3].node)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:525
		{
			yyVAL.node = Node("ShortList").append(yyDollar[2].node)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:529
		{ /* TODO: allow single trailing comma */
			yyVAL.node = yyDollar[1].node
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:533
		{
			yyVAL.node = Node("")
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:534
		{
			yyVAL.node = yyDollar[1].node
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:539
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:540
		{
			yyVAL.node = Node("ArrayPairList").append(yyDollar[1].node)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:544
		{
			yyVAL.node = Node("ArrayElement").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:545
		{
			yyVAL.node = Node("ArrayElement").append(yyDollar[1].node)
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:546
		{
			yyVAL.node = Node("ArrayElement").append(yyDollar[1].node).append(Node("Ref").append(yyDollar[4].node))
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:547
		{
			yyVAL.node = Node("ArrayElement").append(Node("Ref").append(yyDollar[2].node))
		}
	case 168:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:549
		{
			yyVAL.node = Node("ArrayElement").
				append(yyDollar[1].node).
				append(Node("ArrayList").append(yyDollar[5].node))
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:555
		{
			yyVAL.node = Node("ArrayElement").
				append(Node("ArrayList").append(yyDollar[3].node))
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:562
		{
			yyVAL.node = yyDollar[1].node
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:563
		{
			yyVAL.node = yyDollar[2].node
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:567
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:568
		{
			yyVAL.node = Node("GlobalVarList").append(yyDollar[1].node)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:572
		{
			yyVAL.node = yyDollar[1].node
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:576
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:577
		{
			yyVAL.node = Node("StaticVarList").append(yyDollar[1].node)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:581
		{
			yyVAL.node = Node("StaticVariable").attribute("Name", yyDollar[1].token)
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:582
		{
			yyVAL.node = Node("StaticVariable").attribute("Name", yyDollar[1].token).append(Node("expr").append(yyDollar[3].node))
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:586
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:587
		{
			yyVAL.node = Node("EchoList").append(yyDollar[1].node)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:591
		{
			yyVAL.node = Node("Echo").append(yyDollar[1].node)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:595
		{
			yyVAL.node = Node("UnsetVariablesList").append(yyDollar[1].node)
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:596
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:600
		{
			yyVAL.node = yyDollar[1].node
		}
	case 187:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:610
		{
			yyVAL.node = yyDollar[1].node.attribute("name", yyDollar[3].token).append(yyDollar[5].node)
		}
	case 188:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:611
		{
			yyVAL.node = Node("Class").attribute("name", yyDollar[2].token).append(yyDollar[4].node)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:615
		{
			yyVAL.node = Node("Class").attribute(yyDollar[1].value, "true")
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:616
		{
			yyVAL.node = yyDollar[1].node.attribute(yyDollar[2].value, "true")
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:620
		{
			yyVAL.value = "abstract"
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:621
		{
			yyVAL.value = "final"
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:625
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[2].node)
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:626
		{
			yyVAL.node = Node("Stmt")
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:630
		{
			yyVAL.node = yyDollar[2].node.append(yyDollar[1].node)
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:631
		{
			yyVAL.node = yyDollar[3].node.append(yyDollar[1].node)
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:632
		{
			yyVAL.node = Node("Use").append(yyDollar[2].node).append(yyDollar[3].node)
		}
	case 198:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:635
		{
			yyVAL.node = Node("Function").
				append(yyDollar[1].node).
				append(Node("name").append(yyDollar[4].node)).
				attribute("returns_ref", yyDollar[3].value).
				append(yyDollar[6].node).
				append(yyDollar[8].node).
				append(yyDollar[9].node)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:647
		{
			yyVAL.node = Node("NameList").append(yyDollar[1].node)
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:648
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:652
		{
			yyVAL.node = Node("")
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:653
		{
			yyVAL.node = Node("")
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:654
		{
			yyVAL.node = yyDollar[2].node
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:658
		{
			yyVAL.node = Node("TraitAdaptionList").append(yyDollar[1].node)
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:659
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[2].node)
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:663
		{
			yyVAL.node = yyDollar[1].node
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:664
		{
			yyVAL.node = yyDollar[1].node
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:669
		{
			yyVAL.node = Node("TraitPrecedence").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:673
		{
			yyVAL.node = yyDollar[1].node.append(Node("as").attribute("value", yyDollar[3].token))
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:675
		{
			yyVAL.node = yyDollar[1].node.append(Node("as").append(Node("reservedNonModifiers")))
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:677
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node).append(yyDollar[4].node)
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:678
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:681
		{
			yyVAL.node = Node("TraitMethodRef").append(yyDollar[1].node)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:682
		{
			yyVAL.node = yyDollar[1].node
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:686
		{
			yyVAL.node = Node("TraitMethodRef").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:690
		{
			yyVAL.node = Node("")
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:691
		{
			yyVAL.node = yyDollar[2].node
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:695
		{
			yyVAL.node = yyDollar[1].node
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:696
		{
			yyVAL.node = Node("VarMemberModifier")
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:700
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:701
		{
			yyVAL.node = Node("ConstList").append(yyDollar[1].node)
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:705
		{
			yyVAL.node = Node("Const").append(yyDollar[3].node)
		}
	case 223:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:709
		{
			yyVAL.node = Node("PublicMemberModifier")
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:710
		{
			yyVAL.node = yyDollar[1].node
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:713
		{
			yyVAL.node = yyDollar[1].node
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:714
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[2].node)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:717
		{
			yyVAL.node = Node("PublicMemberModifier")
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:718
		{
			yyVAL.node = Node("ProtectedMemberModifier")
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:719
		{
			yyVAL.node = Node("PrivateMemberModifier")
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:720
		{
			yyVAL.node = Node("StaticMemberModifier")
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:721
		{
			yyVAL.node = Node("AbstractMemberModifier")
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:722
		{
			yyVAL.node = Node("FinalMemberModifier")
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:726
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:727
		{
			yyVAL.node = Node("PropertyList").append(yyDollar[1].node)
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:730
		{
			yyVAL.node = Node("Property").attribute("name", yyDollar[1].token)
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:731
		{
			yyVAL.node = Node("Property").attribute("name", yyDollar[1].token).append(Node("Default").append(yyDollar[3].node))
		}
	case 237:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:736
		{
			yyVAL.node = Node("Function").
				attribute("name", yyDollar[3].token).
				attribute("returns_ref", yyDollar[2].value).
				append(yyDollar[5].node).
				append(yyDollar[7].node).
				append(yyDollar[9].node)
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:747
		{
			yyVAL.node = yyDollar[1].node
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:748
		{
			yyVAL.node = Node("Parameter list")
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:751
		{
			yyVAL.node = Node("Parameter list").append(yyDollar[1].node)
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:752
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:756
		{
			yyVAL.node = Node("Parameter").
				append(yyDollar[1].node).
				attribute("is_reference", yyDollar[2].value).
				attribute("is_variadic", yyDollar[3].value).
				attribute("var", yyDollar[4].token)
		}
	case 243:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:764
		{
			yyVAL.node = Node("Parameter").
				append(yyDollar[1].node).
				attribute("is_reference", yyDollar[2].value).
				attribute("is_variadic", yyDollar[3].value).
				attribute("var", yyDollar[4].token).
				append(yyDollar[6].node)
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:775
		{
			yyVAL.node = Node("No type")
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:776
		{
			yyVAL.node = yyDollar[1].node
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:780
		{
			yyVAL.value = "false"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:781
		{
			yyVAL.value = "true"
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:785
		{
			yyVAL.value = "false"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:786
		{
			yyVAL.value = "true"
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:790
		{
			yyVAL.value = "false"
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:791
		{
			yyVAL.value = "true"
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:795
		{
			yyVAL.node = yyDollar[1].node
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:796
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.attribute("nullable", "true")
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:800
		{
			yyVAL.node = yyDollar[1].node
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:801
		{
			yyVAL.node = Node("array type")
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:802
		{
			yyVAL.node = Node("callable type")
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:806
		{
			yyVAL.node = Node("void")
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:807
		{
			yyVAL.node = yyDollar[2].node
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:811
		{
			yyVAL.node = Node("Assign").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:812
		{
			yyVAL.node = Node("AssignRef").append(yyDollar[1].node).append(yyDollar[4].node)
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:813
		{
			yyVAL.node = Node("Clone").append(yyDollar[2].node)
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:814
		{
			yyVAL.node = Node("AssignAdd").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:815
		{
			yyVAL.node = Node("AssignSub").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:816
		{
			yyVAL.node = Node("AssignMul").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:817
		{
			yyVAL.node = Node("AssignPow").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:818
		{
			yyVAL.node = Node("AssignDiv").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:819
		{
			yyVAL.node = Node("AssignConcat").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:820
		{
			yyVAL.node = Node("AssignMod").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:821
		{
			yyVAL.node = Node("AssignAnd").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:822
		{
			yyVAL.node = Node("AssignOr").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:823
		{
			yyVAL.node = Node("AssignXor").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:824
		{
			yyVAL.node = Node("AssignShiftLeft").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:825
		{
			yyVAL.node = Node("AssignShiftRight").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:826
		{
			yyVAL.node = Node("PostIncrement").append(yyDollar[1].node)
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:827
		{
			yyVAL.node = Node("PreIncrement").append(yyDollar[2].node)
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:828
		{
			yyVAL.node = Node("PostDecrement").append(yyDollar[1].node)
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:829
		{
			yyVAL.node = Node("PreDecrement").append(yyDollar[2].node)
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:830
		{
			yyVAL.node = Node("Or").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:831
		{
			yyVAL.node = Node("And").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:832
		{
			yyVAL.node = Node("Or").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:833
		{
			yyVAL.node = Node("And").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:834
		{
			yyVAL.node = Node("Xor").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:835
		{
			yyVAL.node = Node("BitwiseOr").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:836
		{
			yyVAL.node = Node("BitwiseAnd").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:837
		{
			yyVAL.node = Node("BitwiseXor").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:838
		{
			yyVAL.node = Node("Concat").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:839
		{
			yyVAL.node = Node("Add").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:840
		{
			yyVAL.node = Node("Sub").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:841
		{
			yyVAL.node = Node("Mul").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:842
		{
			yyVAL.node = Node("Pow").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:843
		{
			yyVAL.node = Node("Div").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:844
		{
			yyVAL.node = Node("Mod").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:845
		{
			yyVAL.node = Node("ShiftLeft").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:846
		{
			yyVAL.node = Node("ShiftRight").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:847
		{
			yyVAL.node = Node("UnaryPlus").append(yyDollar[2].node)
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:848
		{
			yyVAL.node = Node("UnaryMinus").append(yyDollar[2].node)
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:849
		{
			yyVAL.node = Node("BooleanNot").append(yyDollar[2].node)
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:850
		{
			yyVAL.node = Node("BitwiseNot").append(yyDollar[2].node)
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:851
		{
			yyVAL.node = Node("Identical").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:852
		{
			yyVAL.node = Node("NotIdentical").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:853
		{
			yyVAL.node = Node("Equal").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:854
		{
			yyVAL.node = Node("NotEqual").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:855
		{
			yyVAL.node = Node("Spaceship").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:856
		{
			yyVAL.node = Node("Smaller").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:857
		{
			yyVAL.node = Node("SmallerOrEqual").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:858
		{
			yyVAL.node = Node("Greater").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:859
		{
			yyVAL.node = Node("GreaterOrEqual").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:860
		{
			yyVAL.node = yyDollar[2].node
		}
	case 309:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:861
		{
			yyVAL.node = Node("Ternary").append(yyDollar[1].node).append(yyDollar[3].node).append(yyDollar[5].node)
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:862
		{
			yyVAL.node = Node("Ternary").append(yyDollar[1].node).append(yyDollar[4].node)
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:863
		{
			yyVAL.node = Node("Coalesce").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:864
		{
			yyVAL.node = Node("Empty").append(yyDollar[3].node)
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:865
		{
			yyVAL.node = Node("Include").append(yyDollar[2].node)
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:866
		{
			yyVAL.node = Node("IncludeOnce").append(yyDollar[2].node)
		}
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:867
		{
			yyVAL.node = Node("Eval").append(yyDollar[3].node)
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:868
		{
			yyVAL.node = Node("Require").append(yyDollar[2].node)
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:869
		{
			yyVAL.node = Node("RequireOnce").append(yyDollar[2].node)
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:870
		{
			yyVAL.node = Node("CastInt").append(yyDollar[2].node)
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:871
		{
			yyVAL.node = Node("CastDouble").append(yyDollar[2].node)
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:872
		{
			yyVAL.node = Node("CastString").append(yyDollar[2].node)
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:873
		{
			yyVAL.node = Node("CastArray").append(yyDollar[2].node)
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:874
		{
			yyVAL.node = Node("CastObject").append(yyDollar[2].node)
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:875
		{
			yyVAL.node = Node("CastBool").append(yyDollar[2].node)
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:876
		{
			yyVAL.node = Node("CastUnset").append(yyDollar[2].node)
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:877
		{
			yyVAL.node = Node("Silence").append(yyDollar[2].node)
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:878
		{
			yyVAL.node = yyDollar[1].node
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:879
		{
			yyVAL.node = Node("Print").append(yyDollar[2].node)
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:880
		{
			yyVAL.node = Node("Yield")
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:881
		{
			yyVAL.node = Node("Yield").append(yyDollar[2].node)
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:882
		{
			yyVAL.node = Node("Yield").append(yyDollar[2].node).append(yyDollar[4].node)
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:883
		{
			yyVAL.node = Node("YieldFrom").append(yyDollar[2].node)
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:887
		{
			yyVAL.node = Node("Scalar").append(Node("Lnumber").attribute("value", yyDollar[1].token))
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:888
		{
			yyVAL.node = Node("Scalar").append(Node("Dnumber").attribute("value", yyDollar[1].token))
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:889
		{
			yyVAL.node = Node("Scalar").append(Node("__LINE__"))
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:890
		{
			yyVAL.node = Node("Scalar").append(Node("__FILE__"))
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:891
		{
			yyVAL.node = Node("Scalar").append(Node("__DIR__"))
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:892
		{
			yyVAL.node = Node("Scalar").append(Node("__TRAIT__"))
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:893
		{
			yyVAL.node = Node("Scalar").append(Node("__METHOD__"))
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:894
		{
			yyVAL.node = Node("Scalar").append(Node("__FUNCTION__"))
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:895
		{
			yyVAL.node = Node("Scalar").append(Node("__NAMESPACE__"))
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:896
		{
			yyVAL.node = Node("Scalar").append(Node("__CLASS__"))
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:898
		{
			yyVAL.node = Node("Scalar").append(Node("Heredoc").attribute("value", yyDollar[2].token))
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:900
		{
			yyVAL.node = Node("Scalar").append(Node("Heredoc"))
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:901
		{
			yyVAL.node = yyDollar[2].node
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:902
		{
			yyVAL.node = yyDollar[2].node
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:903
		{
			yyVAL.node = yyDollar[1].node
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:904
		{
			yyVAL.node = yyDollar[1].node
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:908
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[2].node)
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:909
		{
			yyVAL.node = yyDollar[1].node.append(Node("String").attribute("value", yyDollar[2].token))
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:910
		{
			yyVAL.node = Node("EncapsList").append(yyDollar[1].node)
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:911
		{
			yyVAL.node = Node("EncapsList").append(Node("String").attribute("value", yyDollar[1].token)).append(yyDollar[2].node)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:914
		{
			yyVAL.node = Node("Variable").attribute("value", yyDollar[1].token)
		}
	case 353:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:915
		{
			yyVAL.node = Node("Variable").attribute("value", yyDollar[1].token).append(Node("offset").append(yyDollar[3].node))
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:916
		{
			yyVAL.node = Node("Variable").attribute("value", yyDollar[1].token).append(Node("property").attribute("value", yyDollar[3].token))
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:917
		{
			yyVAL.node = Node("Variable").append(Node("expr").append(yyDollar[2].node))
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:918
		{
			yyVAL.node = Node("Variable").attribute("value", yyDollar[2].token)
		}
	case 357:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:920
		{
			yyVAL.node = Node("Variable").attribute("value", yyDollar[2].token).append(Node("offset").append(yyDollar[4].node))
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:921
		{
			yyVAL.node = yyDollar[2].node
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:924
		{
			yyVAL.node = Node("OffsetString").attribute("value", yyDollar[1].token)
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:925
		{
			yyVAL.node = Node("OffsetNumString").attribute("value", yyDollar[1].token)
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:926
		{
			yyVAL.node = Node("OffsetNegateNumString").attribute("value", yyDollar[2].token)
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:927
		{
			yyVAL.node = Node("OffsetVariable").attribute("value", yyDollar[1].token)
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:931
		{
			yyVAL.node = Node("Const").append(yyDollar[1].node)
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:932
		{
			yyVAL.node = Node("Const").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:934
		{
			yyVAL.node = Node("Const").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:938
		{
			yyVAL.node = Node("Static")
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:939
		{
			yyVAL.node = yyDollar[1].node
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:943
		{
			yyVAL.node = yyDollar[1].node
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:947
		{
			yyVAL.node = yyDollar[1].node
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:948
		{
			yyVAL.node = yyDollar[2].node
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:949
		{
			yyVAL.node = yyDollar[1].node
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:953
		{
			yyVAL.node = yyDollar[3].node
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:954
		{
			yyVAL.node = yyDollar[2].node
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:955
		{
			yyVAL.node = Node("String").attribute("value", yyDollar[1].token)
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:959
		{
			yyVAL.node = yyDollar[1].node
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:960
		{
			yyVAL.node = yyDollar[1].node
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:964
		{
			yyVAL.node = Node("")
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:965
		{
			yyVAL.node = yyDollar[1].node
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:969
		{
			yyVAL.node = yyDollar[1].node
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:973
		{
			yyVAL.node = yyDollar[1].node
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:977
		{
			yyVAL.node = Node("Variable").attribute("name", yyDollar[1].token)
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:978
		{
			yyVAL.node = Node("Variable").append(yyDollar[3].node)
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:979
		{
			yyVAL.node = Node("Variable").append(yyDollar[2].node)
		}
	}
	goto yystack /* stack new state and value */
}
