//line parser.y:2
package main

import __yyfmt__ "fmt"

//line parser.y:2
import (
	"bytes"
	"fmt"
	"io"
	"os"
)

type node struct {
	name       string
	children   []node
	attributes map[string]string
}

func (n node) String() string {
	buf := new(bytes.Buffer)
	n.print(buf, " ")
	return buf.String()
}

func (n node) print(out io.Writer, indent string) {
	if len(n.attributes) > 0 {
		fmt.Fprintf(out, "\n%v%v %s", indent, n.name, n.attributes)
	} else {
		fmt.Fprintf(out, "\n%v%v", indent, n.name)
	}
	for _, nn := range n.children {
		nn.print(out, indent+"  ")
	}
}

func Node(name string) node {
	return node{name: name, attributes: make(map[string]string)}
}

func (n node) append(nn ...node) node {
	n.children = append(n.children, nn...)
	return n
}

func (n node) attribute(key string, value string) node {
	n.attributes[key] = value
	return n
}

//line parser.y:50
type yySymType struct {
	yys   int
	node  node
	token string
	value string
}

const T_INCLUDE = 57346
const T_INCLUDE_ONCE = 57347
const T_EVAL = 57348
const T_REQUIRE = 57349
const T_REQUIRE_ONCE = 57350
const T_LOGICAL_OR = 57351
const T_LOGICAL_XOR = 57352
const T_LOGICAL_AND = 57353
const T_PRINT = 57354
const T_YIELD = 57355
const T_DOUBLE_ARROW = 57356
const T_YIELD_FROM = 57357
const T_PLUS_EQUAL = 57358
const T_MINUS_EQUAL = 57359
const T_MUL_EQUAL = 57360
const T_DIV_EQUAL = 57361
const T_CONCAT_EQUAL = 57362
const T_MOD_EQUAL = 57363
const T_AND_EQUAL = 57364
const T_OR_EQUAL = 57365
const T_XOR_EQUAL = 57366
const T_SL_EQUAL = 57367
const T_SR_EQUAL = 57368
const T_POW_EQUAL = 57369
const T_COALESCE = 57370
const T_BOOLEAN_OR = 57371
const T_BOOLEAN_AND = 57372
const T_IS_EQUAL = 57373
const T_IS_NOT_EQUAL = 57374
const T_IS_IDENTICAL = 57375
const T_IS_NOT_IDENTICAL = 57376
const T_SPACESHIP = 57377
const T_IS_SMALLER_OR_EQUAL = 57378
const T_IS_GREATER_OR_EQUAL = 57379
const T_SL = 57380
const T_SR = 57381
const T_INSTANCEOF = 57382
const T_INC = 57383
const T_DEC = 57384
const T_INT_CAST = 57385
const T_DOUBLE_CAST = 57386
const T_STRING_CAST = 57387
const T_ARRAY_CAST = 57388
const T_OBJECT_CAST = 57389
const T_BOOL_CAST = 57390
const T_UNSET_CAST = 57391
const T_POW = 57392
const T_NEW = 57393
const T_CLONE = 57394
const T_NOELSE = 57395
const T_ELSEIF = 57396
const T_ELSE = 57397
const T_ENDIF = 57398
const T_STATIC = 57399
const T_ABSTRACT = 57400
const T_FINAL = 57401
const T_PRIVATE = 57402
const T_PROTECTED = 57403
const T_PUBLIC = 57404
const T_EXIT = 57405
const T_IF = 57406
const T_LNUMBER = 57407
const T_DNUMBER = 57408
const T_STRING = 57409
const T_STRING_VARNAME = 57410
const T_VARIABLE = 57411
const T_NUM_STRING = 57412
const T_INLINE_HTML = 57413
const T_CHARACTER = 57414
const T_BAD_CHARACTER = 57415
const T_ENCAPSED_AND_WHITESPACE = 57416
const T_CONSTANT_ENCAPSED_STRING = 57417
const T_ECHO = 57418
const T_DO = 57419
const T_WHILE = 57420
const T_ENDWHILE = 57421
const T_FOR = 57422
const T_ENDFOR = 57423
const T_FOREACH = 57424
const T_ENDFOREACH = 57425
const T_DECLARE = 57426
const T_ENDDECLARE = 57427
const T_AS = 57428
const T_SWITCH = 57429
const T_ENDSWITCH = 57430
const T_CASE = 57431
const T_DEFAULT = 57432
const T_BREAK = 57433
const T_CONTINUE = 57434
const T_GOTO = 57435
const T_FUNCTION = 57436
const T_CONST = 57437
const T_RETURN = 57438
const T_TRY = 57439
const T_CATCH = 57440
const T_FINALLY = 57441
const T_THROW = 57442
const T_USE = 57443
const T_INSTEADOF = 57444
const T_GLOBAL = 57445
const T_VAR = 57446
const T_UNSET = 57447
const T_ISSET = 57448
const T_EMPTY = 57449
const T_HALT_COMPILER = 57450
const T_CLASS = 57451
const T_TRAIT = 57452
const T_INTERFACE = 57453
const T_EXTENDS = 57454
const T_IMPLEMENTS = 57455
const T_OBJECT_OPERATOR = 57456
const T_LIST = 57457
const T_ARRAY = 57458
const T_CALLABLE = 57459
const T_CLASS_C = 57460
const T_TRAIT_C = 57461
const T_METHOD_C = 57462
const T_FUNC_C = 57463
const T_LINE = 57464
const T_FILE = 57465
const T_COMMENT = 57466
const T_DOC_COMMENT = 57467
const T_OPEN_TAG = 57468
const T_OPEN_TAG_WITH_ECHO = 57469
const T_CLOSE_TAG = 57470
const T_WHITESPACE = 57471
const T_START_HEREDOC = 57472
const T_END_HEREDOC = 57473
const T_DOLLAR_OPEN_CURLY_BRACES = 57474
const T_CURLY_OPEN = 57475
const T_PAAMAYIM_NEKUDOTAYIM = 57476
const T_NAMESPACE = 57477
const T_NS_C = 57478
const T_DIR = 57479
const T_NS_SEPARATOR = 57480
const T_ELLIPSIS = 57481

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"T_INCLUDE",
	"T_INCLUDE_ONCE",
	"T_EVAL",
	"T_REQUIRE",
	"T_REQUIRE_ONCE",
	"','",
	"T_LOGICAL_OR",
	"T_LOGICAL_XOR",
	"T_LOGICAL_AND",
	"T_PRINT",
	"T_YIELD",
	"T_DOUBLE_ARROW",
	"T_YIELD_FROM",
	"'='",
	"T_PLUS_EQUAL",
	"T_MINUS_EQUAL",
	"T_MUL_EQUAL",
	"T_DIV_EQUAL",
	"T_CONCAT_EQUAL",
	"T_MOD_EQUAL",
	"T_AND_EQUAL",
	"T_OR_EQUAL",
	"T_XOR_EQUAL",
	"T_SL_EQUAL",
	"T_SR_EQUAL",
	"T_POW_EQUAL",
	"'?'",
	"':'",
	"T_COALESCE",
	"T_BOOLEAN_OR",
	"T_BOOLEAN_AND",
	"'|'",
	"'^'",
	"'&'",
	"T_IS_EQUAL",
	"T_IS_NOT_EQUAL",
	"T_IS_IDENTICAL",
	"T_IS_NOT_IDENTICAL",
	"T_SPACESHIP",
	"'<'",
	"T_IS_SMALLER_OR_EQUAL",
	"'>'",
	"T_IS_GREATER_OR_EQUAL",
	"T_SL",
	"T_SR",
	"'+'",
	"'-'",
	"'.'",
	"'*'",
	"'/'",
	"'%'",
	"'!'",
	"T_INSTANCEOF",
	"'~'",
	"T_INC",
	"T_DEC",
	"T_INT_CAST",
	"T_DOUBLE_CAST",
	"T_STRING_CAST",
	"T_ARRAY_CAST",
	"T_OBJECT_CAST",
	"T_BOOL_CAST",
	"T_UNSET_CAST",
	"'@'",
	"T_POW",
	"'['",
	"T_NEW",
	"T_CLONE",
	"T_NOELSE",
	"T_ELSEIF",
	"T_ELSE",
	"T_ENDIF",
	"T_STATIC",
	"T_ABSTRACT",
	"T_FINAL",
	"T_PRIVATE",
	"T_PROTECTED",
	"T_PUBLIC",
	"T_EXIT",
	"T_IF",
	"T_LNUMBER",
	"T_DNUMBER",
	"T_STRING",
	"T_STRING_VARNAME",
	"T_VARIABLE",
	"T_NUM_STRING",
	"T_INLINE_HTML",
	"T_CHARACTER",
	"T_BAD_CHARACTER",
	"T_ENCAPSED_AND_WHITESPACE",
	"T_CONSTANT_ENCAPSED_STRING",
	"T_ECHO",
	"T_DO",
	"T_WHILE",
	"T_ENDWHILE",
	"T_FOR",
	"T_ENDFOR",
	"T_FOREACH",
	"T_ENDFOREACH",
	"T_DECLARE",
	"T_ENDDECLARE",
	"T_AS",
	"T_SWITCH",
	"T_ENDSWITCH",
	"T_CASE",
	"T_DEFAULT",
	"T_BREAK",
	"T_CONTINUE",
	"T_GOTO",
	"T_FUNCTION",
	"T_CONST",
	"T_RETURN",
	"T_TRY",
	"T_CATCH",
	"T_FINALLY",
	"T_THROW",
	"T_USE",
	"T_INSTEADOF",
	"T_GLOBAL",
	"T_VAR",
	"T_UNSET",
	"T_ISSET",
	"T_EMPTY",
	"T_HALT_COMPILER",
	"T_CLASS",
	"T_TRAIT",
	"T_INTERFACE",
	"T_EXTENDS",
	"T_IMPLEMENTS",
	"T_OBJECT_OPERATOR",
	"T_LIST",
	"T_ARRAY",
	"T_CALLABLE",
	"T_CLASS_C",
	"T_TRAIT_C",
	"T_METHOD_C",
	"T_FUNC_C",
	"T_LINE",
	"T_FILE",
	"T_COMMENT",
	"T_DOC_COMMENT",
	"T_OPEN_TAG",
	"T_OPEN_TAG_WITH_ECHO",
	"T_CLOSE_TAG",
	"T_WHITESPACE",
	"T_START_HEREDOC",
	"T_END_HEREDOC",
	"T_DOLLAR_OPEN_CURLY_BRACES",
	"T_CURLY_OPEN",
	"T_PAAMAYIM_NEKUDOTAYIM",
	"T_NAMESPACE",
	"T_NS_C",
	"T_DIR",
	"T_NS_SEPARATOR",
	"T_ELLIPSIS",
	"';'",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"']'",
	"'$'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:886
const src = `<?php

abstract class test {
    use \test\tt, tt {
        \test\tt::test as public private;
    }
}

`

func main() {
	yyDebug = 0
	yyErrorVerbose = true
	l := newLexer(bytes.NewBufferString(src), os.Stdout, "file.name")
	yyParse(l)
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 90,
	159, 46,
	-2, 325,
	-1, 300,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 297,
	-1, 301,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 298,
	-1, 302,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 299,
	-1, 303,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 300,
	-1, 304,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 301,
	-1, 305,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 302,
	-1, 306,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 303,
	-1, 307,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 304,
	-1, 308,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 305,
	-1, 369,
	163, 237,
	-2, 242,
	-1, 423,
	114, 222,
	-2, 216,
	-1, 567,
	105, 76,
	-2, 78,
}

const yyPrivate = 57344

const yyLast = 4660

var yyAct = [...]int{

	23, 152, 512, 472, 559, 411, 425, 75, 72, 449,
	71, 511, 530, 488, 469, 408, 451, 159, 159, 159,
	264, 406, 170, 4, 393, 440, 409, 414, 269, 317,
	204, 313, 371, 169, 154, 37, 149, 166, 493, 69,
	163, 69, 607, 233, 597, 578, 236, 237, 238, 239,
	240, 68, 242, 446, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 538, 537, 528,
	460, 164, 391, 577, 499, 497, 448, 366, 369, 234,
	235, 352, 327, 233, 325, 72, 242, 243, 244, 245,
	254, 255, 241, 483, 484, 483, 484, 523, 232, 202,
	201, 174, 176, 175, 200, 157, 156, 153, 389, 608,
	554, 257, 548, 531, 500, 395, 70, 508, 70, 370,
	324, 198, 258, 199, 172, 173, 177, 179, 178, 191,
	192, 189, 190, 193, 194, 195, 196, 197, 187, 188,
	181, 182, 180, 183, 185, 186, 533, 397, 482, 203,
	410, 610, 595, 589, 267, 588, 72, 271, 272, 184,
	429, 430, 431, 428, 427, 426, 69, 151, 573, 282,
	279, 277, 544, 283, 284, 285, 286, 287, 288, 289,
	290, 291, 292, 293, 294, 295, 296, 297, 298, 299,
	300, 301, 302, 303, 304, 305, 306, 307, 308, 309,
	311, 445, 315, 534, 422, 319, 151, 424, 151, 527,
	480, 477, 396, 444, 443, 441, 412, 413, 330, 332,
	333, 334, 335, 336, 337, 338, 339, 340, 341, 342,
	343, 365, 439, 344, 326, 416, 314, 388, 415, 353,
	466, 532, 346, 70, 347, 467, 328, 524, 525, 321,
	592, 275, 274, 273, 438, 412, 413, 260, 349, 259,
	553, 505, 261, 590, 174, 176, 175, 507, 458, 459,
	471, 591, 66, 67, 416, 268, 416, 415, 470, 415,
	550, 358, 167, 170, 198, 151, 199, 172, 173, 177,
	179, 178, 191, 192, 189, 190, 193, 194, 195, 196,
	197, 187, 188, 181, 182, 180, 183, 185, 186, 580,
	318, 361, 535, 483, 484, 350, 359, 357, 356, 281,
	278, 276, 184, 209, 323, 322, 372, 211, 373, 164,
	205, 374, 375, 429, 430, 431, 428, 427, 426, 486,
	483, 484, 429, 430, 431, 428, 427, 426, 184, 379,
	214, 216, 215, 384, 271, 386, 212, 213, 183, 185,
	186, 390, 579, 463, 208, 502, 476, 39, 402, 329,
	206, 583, 382, 555, 184, 509, 367, 422, 280, 523,
	424, 494, 385, 461, 363, 437, 399, 187, 188, 181,
	182, 180, 183, 185, 186, 392, 401, 435, 453, 314,
	394, 210, 456, 417, 354, 362, 265, 266, 184, 5,
	6, 1, 562, 563, 158, 442, 561, 433, 418, 560,
	181, 182, 180, 183, 185, 186, 558, 522, 473, 421,
	474, 447, 160, 161, 510, 468, 423, 464, 478, 184,
	271, 420, 419, 465, 457, 545, 403, 398, 316, 453,
	452, 450, 312, 475, 168, 165, 162, 387, 492, 568,
	270, 381, 11, 36, 10, 35, 489, 485, 481, 487,
	41, 491, 38, 405, 404, 501, 407, 33, 526, 262,
	2, 150, 394, 503, 529, 3, 74, 207, 504, 462,
	496, 0, 536, 0, 506, 453, 540, 0, 453, 0,
	0, 0, 547, 0, 0, 546, 0, 543, 0, 0,
	552, 539, 0, 0, 0, 0, 0, 0, 549, 0,
	0, 0, 0, 551, 0, 0, 0, 0, 565, 556,
	0, 564, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 571, 0, 0, 0, 0, 0, 0, 569,
	582, 575, 0, 0, 0, 0, 585, 0, 489, 0,
	0, 565, 0, 587, 564, 0, 584, 0, 0, 0,
	0, 0, 593, 594, 0, 0, 0, 576, 453, 0,
	0, 0, 0, 0, 600, 0, 598, 596, 0, 0,
	0, 0, 0, 0, 601, 605, 473, 0, 604, 603,
	0, 0, 174, 176, 175, 0, 0, 609, 0, 0,
	611, 84, 85, 86, 87, 88, 0, 91, 92, 93,
	89, 90, 198, 65, 199, 172, 173, 177, 179, 178,
	191, 192, 189, 190, 193, 194, 195, 196, 197, 187,
	188, 181, 182, 180, 183, 185, 186, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 45, 46, 0, 0,
	184, 0, 47, 94, 48, 43, 44, 55, 56, 57,
	58, 59, 60, 61, 62, 0, 0, 95, 82, 0,
	98, 99, 100, 76, 77, 78, 79, 80, 81, 96,
	97, 0, 0, 73, 0, 69, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 128, 129, 130, 131, 132, 122, 123,
	124, 125, 126, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 83, 0, 140, 138, 139, 135, 136,
	0, 127, 133, 134, 141, 142, 144, 143, 145, 146,
	513, 514, 515, 516, 517, 432, 91, 92, 93, 520,
	521, 137, 148, 147, 0, 0, 0, 0, 0, 49,
	0, 198, 70, 199, 172, 173, 177, 179, 178, 191,
	192, 189, 190, 193, 194, 195, 196, 197, 187, 188,
	181, 182, 180, 183, 185, 186, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 184,
	0, 0, 0, 0, 0, 0, 95, 518, 0, 98,
	99, 100, 76, 77, 78, 79, 80, 81, 96, 97,
	0, 0, 567, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 128, 129, 130, 131, 132, 122, 123, 124,
	125, 126, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 519, 0, 140, 138, 139, 135, 136, 0,
	127, 133, 134, 141, 142, 144, 143, 145, 146, 513,
	514, 515, 516, 517, 175, 91, 92, 93, 520, 521,
	566, 148, 147, 415, 0, 0, 0, 586, 0, 0,
	0, 0, 198, 0, 199, 172, 173, 177, 179, 178,
	191, 192, 189, 190, 193, 194, 195, 196, 197, 187,
	188, 181, 182, 180, 183, 185, 186, 0, 0, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 0, 0, 0, 0, 95, 518, 0, 98, 99,
	100, 76, 77, 78, 79, 80, 81, 96, 97, 0,
	0, 567, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 128, 129, 130, 131, 132, 122, 123, 124, 125,
	126, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 519, 0, 140, 138, 139, 135, 136, 0, 127,
	133, 134, 141, 142, 144, 143, 145, 146, 513, 514,
	515, 516, 517, 348, 91, 92, 93, 520, 521, 566,
	148, 147, 415, 0, 0, 0, 557, 0, 198, 0,
	199, 172, 173, 177, 179, 178, 191, 192, 189, 190,
	193, 194, 195, 196, 197, 187, 188, 181, 182, 180,
	183, 185, 186, 0, 0, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 0, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 95, 518, 0, 98, 99, 100,
	76, 77, 78, 79, 80, 81, 96, 97, 0, 0,
	73, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	128, 129, 130, 131, 132, 122, 123, 124, 125, 126,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	519, 0, 140, 138, 139, 135, 136, 0, 127, 133,
	134, 141, 142, 144, 143, 145, 146, 513, 514, 515,
	516, 517, 0, 91, 92, 93, 520, 521, 137, 148,
	147, 199, 172, 173, 177, 179, 178, 191, 192, 189,
	190, 193, 194, 195, 196, 197, 187, 188, 181, 182,
	180, 183, 185, 186, 194, 195, 196, 197, 187, 188,
	181, 182, 180, 183, 185, 186, 0, 184, 0, 94,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	0, 0, 0, 95, 518, 0, 98, 99, 100, 429,
	430, 431, 428, 427, 426, 96, 97, 0, 0, 602,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 128,
	129, 130, 131, 132, 122, 123, 124, 125, 126, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 519,
	0, 140, 138, 139, 135, 136, 0, 127, 133, 134,
	141, 142, 144, 143, 145, 146, 176, 175, 0, 0,
	0, 155, 51, 52, 53, 54, 0, 137, 148, 147,
	63, 64, 0, 65, 0, 198, 0, 199, 172, 173,
	177, 179, 178, 191, 192, 189, 190, 193, 194, 195,
	196, 197, 187, 188, 181, 182, 180, 183, 185, 186,
	0, 0, 0, 0, 0, 0, 45, 46, 0, 0,
	0, 0, 47, 184, 48, 43, 44, 55, 56, 57,
	58, 59, 60, 61, 62, 0, 0, 0, 42, 0,
	0, 0, 0, 20, 66, 67, 0, 0, 0, 0,
	40, 0, 0, 31, 0, 69, 0, 22, 0, 0,
	0, 0, 21, 13, 12, 0, 14, 0, 25, 0,
	26, 0, 0, 15, 0, 0, 0, 16, 17, 30,
	32, 0, 18, 28, 0, 0, 29, 0, 0, 19,
	0, 24, 0, 50, 0, 34, 155, 51, 52, 53,
	54, 0, 0, 0, 0, 63, 64, 0, 65, 191,
	192, 189, 190, 193, 194, 195, 196, 197, 187, 188,
	181, 182, 180, 183, 185, 186, 27, 9, 612, 49,
	0, 0, 70, 0, 0, 0, 0, 0, 0, 184,
	0, 45, 46, 0, 0, 0, 0, 47, 0, 48,
	43, 44, 55, 56, 57, 58, 59, 60, 61, 62,
	0, 0, 0, 42, 0, 0, 0, 0, 20, 66,
	67, 0, 0, 0, 0, 40, 0, 0, 31, 0,
	69, 0, 22, 0, 0, 0, 0, 21, 13, 12,
	0, 14, 606, 25, 0, 26, 0, 0, 15, 0,
	0, 0, 16, 17, 30, 32, 0, 18, 28, 0,
	0, 29, 0, 0, 19, 0, 24, 0, 50, 0,
	34, 155, 51, 52, 53, 54, 0, 0, 0, 0,
	63, 64, 0, 65, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 27, 9, 0, 49, 0, 0, 70, 0, 0,
	0, 0, 0, 0, 0, 0, 45, 46, 0, 0,
	0, 0, 47, 0, 48, 43, 44, 55, 56, 57,
	58, 59, 60, 61, 62, 0, 0, 0, 42, 0,
	0, 0, 0, 20, 66, 67, 0, 0, 0, 0,
	40, 0, 0, 31, 0, 69, 0, 22, 0, 0,
	0, 0, 21, 13, 12, 0, 14, 0, 25, 0,
	26, 0, 0, 15, 0, 0, 0, 16, 17, 30,
	32, 0, 18, 28, 0, 0, 29, 0, 0, 19,
	0, 24, 0, 50, 0, 34, 155, 51, 52, 53,
	54, 0, 0, 0, 0, 63, 64, 0, 65, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 27, 9, 599, 49,
	0, 0, 70, 0, 0, 0, 0, 0, 0, 0,
	0, 45, 46, 0, 0, 0, 0, 47, 0, 48,
	43, 44, 55, 56, 57, 58, 59, 60, 61, 62,
	0, 0, 0, 42, 0, 0, 0, 0, 20, 66,
	67, 0, 0, 0, 0, 40, 0, 0, 31, 0,
	69, 0, 22, 0, 0, 0, 0, 21, 13, 12,
	0, 14, 0, 25, 0, 26, 0, 0, 15, 0,
	0, 0, 16, 17, 30, 32, 0, 18, 28, 0,
	0, 29, 0, 0, 19, 0, 24, 0, 50, 0,
	34, 155, 51, 52, 53, 54, 0, 0, 0, 0,
	63, 64, 0, 65, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 27, 9, 581, 49, 0, 0, 70, 0, 0,
	0, 0, 0, 0, 0, 0, 45, 46, 0, 0,
	0, 0, 47, 0, 48, 43, 44, 55, 56, 57,
	58, 59, 60, 61, 62, 0, 0, 0, 42, 0,
	0, 0, 0, 20, 66, 67, 0, 0, 0, 0,
	40, 0, 0, 31, 0, 69, 0, 22, 0, 0,
	0, 0, 21, 13, 12, 0, 14, 0, 25, 574,
	26, 0, 0, 15, 0, 0, 0, 16, 17, 30,
	32, 0, 18, 28, 0, 0, 29, 0, 0, 19,
	0, 24, 0, 50, 0, 34, 155, 51, 52, 53,
	54, 0, 0, 0, 0, 63, 64, 0, 65, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 27, 9, 0, 49,
	0, 0, 70, 0, 0, 0, 0, 0, 0, 0,
	0, 45, 46, 0, 0, 0, 0, 47, 0, 48,
	43, 44, 55, 56, 57, 58, 59, 60, 61, 62,
	0, 0, 0, 42, 0, 0, 0, 0, 20, 66,
	67, 0, 0, 0, 0, 40, 0, 0, 31, 0,
	69, 0, 22, 0, 0, 0, 0, 21, 13, 12,
	0, 14, 0, 25, 0, 26, 498, 0, 15, 0,
	0, 0, 16, 17, 30, 32, 0, 18, 28, 0,
	0, 29, 0, 0, 19, 0, 24, 0, 50, 0,
	34, 155, 51, 52, 53, 54, 0, 0, 0, 0,
	63, 64, 0, 65, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 27, 9, 0, 49, 0, 0, 70, 0, 0,
	0, 0, 0, 0, 0, 0, 45, 46, 0, 0,
	0, 0, 47, 0, 48, 43, 44, 55, 56, 57,
	58, 59, 60, 61, 62, 0, 0, 0, 42, 0,
	0, 0, 0, 20, 66, 67, 0, 0, 0, 0,
	40, 0, 0, 31, 0, 69, 0, 22, 0, 0,
	0, 0, 21, 13, 12, 479, 14, 0, 25, 0,
	26, 0, 0, 15, 0, 0, 0, 16, 17, 30,
	32, 0, 18, 28, 0, 0, 29, 0, 0, 19,
	0, 24, 0, 50, 0, 34, 155, 51, 52, 53,
	54, 0, 0, 0, 0, 63, 64, 0, 65, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 27, 9, 0, 49,
	0, 0, 70, 0, 0, 0, 0, 0, 0, 0,
	0, 45, 46, 0, 0, 0, 0, 47, 0, 48,
	43, 44, 55, 56, 57, 58, 59, 60, 61, 62,
	0, 0, 0, 42, 0, 0, 0, 434, 20, 66,
	67, 0, 0, 0, 0, 40, 0, 0, 31, 0,
	69, 0, 22, 0, 0, 0, 0, 21, 13, 12,
	0, 14, 0, 25, 0, 26, 0, 0, 15, 0,
	0, 0, 16, 17, 30, 32, 0, 18, 28, 0,
	0, 29, 0, 0, 19, 0, 24, 0, 50, 0,
	34, 155, 51, 52, 53, 54, 0, 0, 0, 0,
	63, 64, 0, 65, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 27, 9, 0, 49, 0, 0, 70, 0, 0,
	0, 0, 0, 0, 0, 0, 45, 46, 0, 0,
	0, 0, 47, 0, 48, 43, 44, 55, 56, 57,
	58, 59, 60, 61, 62, 0, 0, 0, 42, 0,
	0, 0, 0, 20, 66, 67, 0, 0, 0, 0,
	40, 0, 0, 31, 0, 69, 0, 22, 0, 0,
	0, 0, 21, 13, 12, 0, 14, 0, 25, 0,
	26, 0, 0, 15, 0, 0, 0, 16, 17, 30,
	32, 0, 18, 28, 0, 0, 29, 0, 0, 19,
	0, 24, 0, 50, 0, 34, 155, 51, 52, 53,
	54, 0, 0, 0, 0, 63, 64, 0, 65, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 27, 9, 368, 49,
	0, 0, 70, 0, 0, 0, 0, 0, 0, 0,
	0, 45, 46, 0, 0, 0, 0, 47, 0, 48,
	43, 44, 55, 56, 57, 58, 59, 60, 61, 62,
	0, 0, 0, 42, 0, 0, 0, 0, 20, 66,
	67, 0, 0, 0, 0, 40, 0, 0, 31, 0,
	69, 0, 22, 0, 0, 0, 0, 21, 13, 12,
	0, 14, 0, 25, 0, 26, 0, 0, 15, 0,
	0, 0, 16, 17, 30, 32, 0, 18, 28, 0,
	0, 29, 0, 0, 19, 0, 24, 0, 50, 0,
	34, 7, 51, 52, 53, 54, 0, 0, 0, 0,
	63, 64, 0, 65, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 27, 9, 263, 49, 0, 0, 70, 0, 0,
	0, 0, 0, 0, 0, 0, 45, 46, 0, 0,
	0, 0, 47, 0, 48, 43, 44, 55, 56, 57,
	58, 59, 60, 61, 62, 0, 0, 0, 42, 0,
	0, 0, 0, 20, 66, 67, 0, 0, 0, 0,
	40, 0, 0, 31, 0, 69, 0, 22, 0, 0,
	0, 0, 21, 13, 12, 0, 14, 0, 25, 0,
	26, 0, 0, 15, 0, 0, 0, 16, 17, 30,
	32, 0, 18, 28, 0, 0, 29, 0, 0, 19,
	0, 24, 0, 50, 0, 34, 155, 51, 52, 53,
	54, 0, 0, 0, 0, 63, 64, 0, 65, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 8, 0, 0, 0, 0, 27, 9, 0, 49,
	0, 0, 70, 0, 0, 0, 0, 0, 0, 0,
	0, 45, 46, 0, 0, 0, 0, 47, 0, 48,
	43, 44, 55, 56, 57, 58, 59, 60, 61, 62,
	0, 0, 0, 42, 0, 0, 0, 0, 20, 66,
	67, 0, 0, 0, 0, 40, 0, 0, 31, 0,
	69, 0, 22, 0, 0, 0, 0, 21, 13, 12,
	0, 14, 0, 25, 0, 26, 0, 0, 15, 0,
	0, 0, 16, 17, 30, 32, 0, 18, 28, 0,
	0, 29, 0, 0, 19, 0, 24, 0, 50, 0,
	34, 155, 51, 52, 53, 54, 0, 0, 0, 0,
	63, 64, 0, 65, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 490, 0,
	0, 27, 9, 0, 49, 0, 0, 70, 0, 0,
	0, 0, 0, 0, 0, 0, 45, 46, 0, 0,
	0, 0, 47, 0, 48, 43, 44, 55, 56, 57,
	58, 59, 60, 61, 62, 0, 0, 0, 42, 0,
	0, 0, 0, 20, 0, 0, 0, 0, 0, 0,
	40, 0, 0, 31, 0, 69, 0, 22, 0, 0,
	0, 0, 21, 13, 12, 0, 14, 0, 25, 0,
	26, 0, 0, 15, 0, 0, 0, 16, 17, 30,
	0, 0, 18, 28, 0, 0, 29, 0, 0, 19,
	0, 24, 0, 50, 155, 51, 52, 53, 54, 0,
	0, 0, 0, 63, 64, 0, 65, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 570, 0, 0, 0, 0, 27, 9, 0, 49,
	0, 0, 70, 0, 0, 0, 0, 0, 0, 45,
	46, 0, 0, 0, 0, 47, 0, 48, 43, 44,
	55, 56, 57, 58, 59, 60, 61, 62, 0, 0,
	0, 42, 0, 0, 0, 0, 20, 0, 0, 0,
	0, 0, 0, 40, 0, 0, 31, 0, 69, 0,
	22, 0, 0, 0, 0, 21, 13, 12, 0, 14,
	0, 25, 0, 26, 0, 0, 15, 0, 0, 0,
	16, 17, 30, 0, 0, 18, 28, 0, 0, 29,
	0, 0, 19, 0, 24, 0, 50, 155, 51, 52,
	53, 54, 0, 0, 0, 0, 63, 64, 0, 65,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 436, 0, 0, 0, 0, 27,
	9, 0, 49, 0, 0, 70, 0, 0, 0, 0,
	0, 0, 45, 46, 0, 0, 0, 0, 47, 0,
	48, 43, 44, 55, 56, 57, 58, 59, 60, 61,
	62, 0, 0, 0, 42, 0, 0, 0, 0, 20,
	0, 0, 0, 0, 0, 0, 40, 0, 0, 31,
	0, 69, 0, 22, 0, 0, 0, 0, 21, 13,
	12, 0, 14, 0, 25, 0, 26, 0, 0, 15,
	0, 0, 0, 16, 17, 30, 0, 0, 18, 28,
	0, 0, 29, 0, 0, 19, 0, 24, 0, 50,
	155, 51, 52, 53, 54, 0, 0, 0, 0, 63,
	64, 0, 65, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 400, 0, 0,
	0, 0, 27, 9, 0, 49, 0, 0, 70, 0,
	0, 0, 0, 0, 0, 45, 46, 0, 0, 0,
	0, 47, 0, 48, 43, 44, 55, 56, 57, 58,
	59, 60, 61, 62, 0, 0, 0, 42, 0, 0,
	0, 0, 20, 0, 0, 0, 0, 0, 0, 40,
	0, 0, 31, 0, 69, 0, 22, 0, 0, 0,
	0, 21, 13, 12, 0, 14, 0, 25, 0, 26,
	0, 0, 15, 0, 0, 0, 16, 17, 30, 0,
	0, 18, 28, 0, 0, 29, 0, 0, 19, 0,
	24, 0, 50, 155, 51, 52, 53, 54, 0, 0,
	0, 0, 63, 64, 0, 65, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	383, 0, 0, 0, 0, 27, 9, 0, 49, 0,
	0, 70, 0, 0, 0, 0, 0, 0, 45, 46,
	0, 0, 0, 0, 47, 0, 48, 43, 44, 55,
	56, 57, 58, 59, 60, 61, 62, 0, 0, 0,
	42, 0, 0, 0, 0, 20, 0, 0, 0, 0,
	0, 0, 40, 0, 0, 31, 0, 69, 0, 22,
	0, 0, 0, 0, 21, 13, 12, 0, 14, 0,
	25, 0, 26, 0, 0, 15, 0, 0, 0, 16,
	17, 30, 0, 0, 18, 28, 0, 0, 29, 0,
	0, 19, 0, 24, 0, 50, 155, 51, 52, 53,
	54, 0, 0, 0, 0, 63, 64, 0, 65, 178,
	191, 192, 189, 190, 193, 194, 195, 196, 197, 187,
	188, 181, 182, 180, 183, 185, 186, 0, 27, 9,
	0, 49, 0, 0, 70, 0, 0, 0, 0, 0,
	184, 45, 46, 0, 0, 0, 0, 47, 0, 48,
	43, 44, 55, 56, 57, 58, 59, 60, 61, 62,
	0, 0, 0, 42, 0, 0, 0, 0, 20, 0,
	0, 0, 0, 0, 0, 40, 0, 0, 31, 0,
	69, 0, 22, 0, 0, 0, 0, 21, 13, 12,
	0, 14, 0, 25, 0, 26, 0, 0, 15, 0,
	0, 0, 16, 17, 30, 0, 0, 18, 28, 0,
	0, 29, 0, 0, 19, 0, 24, 0, 50, 0,
	155, 51, 52, 53, 54, 0, 0, 0, 0, 63,
	64, 0, 65, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 27, 9, 454, 49, 0, 0, 70, 0, 0,
	155, 51, 52, 53, 54, 45, 46, 0, 0, 63,
	64, 47, 65, 48, 43, 44, 55, 56, 57, 58,
	59, 60, 61, 62, 0, 0, 0, 42, 0, 0,
	0, 0, 0, 541, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 45, 46, 0, 0, 0,
	0, 47, 0, 48, 43, 44, 55, 56, 57, 58,
	59, 60, 61, 62, 0, 0, 0, 42, 217, 218,
	219, 220, 222, 223, 224, 225, 226, 227, 228, 229,
	221, 0, 50, 0, 69, 0, 0, 0, 0, 0,
	455, 0, 155, 51, 52, 53, 54, 0, 0, 0,
	0, 63, 64, 0, 65, 0, 0, 0, 0, 230,
	231, 0, 0, 0, 0, 0, 0, 0, 49, 0,
	0, 70, 50, 0, 0, 331, 0, 0, 0, 0,
	542, 0, 0, 0, 0, 0, 0, 45, 46, 0,
	0, 0, 0, 47, 0, 48, 43, 44, 55, 56,
	57, 58, 59, 60, 61, 62, 0, 0, 49, 42,
	0, 70, 155, 51, 52, 53, 54, 0, 0, 0,
	0, 63, 64, 0, 65, 0, 69, 0, 0, 0,
	0, 155, 51, 52, 53, 54, 0, 0, 0, 310,
	63, 64, 0, 65, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 45, 46, 0,
	0, 0, 0, 47, 50, 48, 43, 44, 55, 56,
	57, 58, 59, 60, 61, 62, 45, 46, 0, 42,
	0, 0, 47, 0, 48, 43, 44, 55, 56, 57,
	58, 59, 60, 61, 62, 0, 69, 0, 42, 0,
	49, 0, 0, 70, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	49, 0, 0, 70, 174, 176, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 49,
	0, 0, 70, 0, 198, 0, 199, 172, 173, 177,
	179, 178, 191, 192, 189, 190, 193, 194, 195, 196,
	197, 187, 188, 181, 182, 180, 183, 185, 186, 174,
	176, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 0, 0, 0, 0, 0, 0, 198,
	0, 199, 172, 173, 177, 179, 178, 191, 192, 189,
	190, 193, 194, 195, 196, 197, 187, 188, 181, 182,
	180, 183, 185, 186, 174, 176, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	0, 0, 0, 0, 198, 0, 199, 172, 173, 177,
	179, 178, 191, 192, 189, 190, 193, 194, 195, 196,
	197, 187, 188, 181, 182, 180, 183, 185, 186, 174,
	176, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 0, 0, 0, 0, 378, 0, 198,
	0, 199, 172, 173, 177, 179, 178, 191, 192, 189,
	190, 193, 194, 195, 196, 197, 187, 188, 181, 182,
	180, 183, 185, 186, 174, 176, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	0, 0, 377, 0, 198, 0, 199, 172, 173, 177,
	179, 178, 191, 192, 189, 190, 193, 194, 195, 196,
	197, 187, 188, 181, 182, 180, 183, 185, 186, 174,
	176, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 0, 0, 0, 0, 376, 0, 198,
	0, 199, 172, 173, 177, 179, 178, 191, 192, 189,
	190, 193, 194, 195, 196, 197, 187, 188, 181, 182,
	180, 183, 185, 186, 174, 176, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	0, 0, 355, 0, 198, 0, 199, 172, 173, 177,
	179, 178, 191, 192, 189, 190, 193, 194, 195, 196,
	197, 187, 188, 181, 182, 180, 183, 185, 186, 174,
	176, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 0, 0, 0, 0, 351, 0, 198,
	531, 199, 172, 173, 177, 179, 178, 191, 192, 189,
	190, 193, 194, 195, 196, 197, 187, 188, 181, 182,
	180, 183, 185, 186, 174, 176, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	0, 0, 345, 0, 198, 0, 199, 172, 173, 177,
	179, 178, 191, 192, 189, 190, 193, 194, 195, 196,
	197, 187, 188, 181, 182, 180, 183, 185, 186, 174,
	176, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 0, 0, 380, 0, 0, 0, 198,
	0, 199, 172, 173, 177, 179, 178, 191, 192, 189,
	190, 193, 194, 195, 196, 197, 187, 188, 181, 182,
	180, 183, 185, 186, 174, 176, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 532, 0,
	0, 0, 0, 0, 198, 0, 199, 172, 173, 177,
	179, 178, 191, 192, 189, 190, 193, 194, 195, 196,
	197, 187, 188, 181, 182, 180, 183, 185, 186, 174,
	176, 175, 0, 0, 495, 0, 0, 0, 0, 0,
	0, 0, 184, 320, 0, 0, 0, 0, 0, 198,
	0, 199, 172, 173, 177, 179, 178, 191, 192, 189,
	190, 193, 194, 195, 196, 197, 187, 188, 181, 182,
	180, 183, 185, 186, 174, 176, 175, 0, 0, 364,
	0, 0, 0, 0, 0, 0, 0, 184, 171, 0,
	0, 0, 0, 0, 198, 360, 199, 172, 173, 177,
	179, 178, 191, 192, 189, 190, 193, 194, 195, 196,
	197, 187, 188, 181, 182, 180, 183, 185, 186, 174,
	176, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 0, 0, 0, 0, 0, 0, 198,
	0, 199, 172, 173, 177, 179, 178, 191, 192, 189,
	190, 193, 194, 195, 196, 197, 187, 188, 181, 182,
	180, 183, 185, 186, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 173, 177,
	179, 178, 191, 192, 189, 190, 193, 194, 195, 196,
	197, 187, 188, 181, 182, 180, 183, 185, 186, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 177, 179, 178, 191, 192, 189, 190,
	193, 194, 195, 196, 197, 187, 188, 181, 182, 180,
	183, 185, 186, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 179, 178, 191,
	192, 189, 190, 193, 194, 195, 196, 197, 187, 188,
	181, 182, 180, 183, 185, 186, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
}
var yyPact = [...]int{

	-1000, -1000, 2557, -1000, -1000, -1000, -1000, 607, 199, -1000,
	-1000, -1000, -55, 3422, -56, -57, 3767, 3767, 3767, -47,
	194, 3767, -1000, 4309, -58, -62, -63, -1000, -11, 3767,
	244, 339, 327, 195, 241, 283, 277, 3641, -1000, -1000,
	-64, -1000, 3767, -47, -47, 3767, 3767, 3767, 3767, 3767,
	-70, 3767, -75, 3767, 3767, 3767, 3767, 3767, 3767, 3767,
	3767, 3767, 3767, 3767, 3767, 3767, -1000, -1000, -1000, -1000,
	-49, 100, 4489, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3767, -70, 3767, 3767, -75, 3767, 3767, 3767,
	3767, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 98,
	105, -1000, 2432, 3767, 178, 3767, 3767, 3767, 94, 4489,
	93, 92, 162, -1000, -1000, 161, -1000, 361, 160, -1000,
	4489, -1000, 3767, 3767, 3767, 3767, 3767, 3767, 3767, 3767,
	3767, 3767, 3767, 3767, 3767, 3767, 3767, 3767, 3767, 3767,
	3767, 3767, 3767, 3767, 3767, 3767, 3767, 3767, 3748, 3767,
	-47, 3767, 224, -1000, 4264, 90, -1000, 239, -1000, 238,
	-1000, -40, -78, 3422, -80, 87, 338, 3678, 3767, 3767,
	3767, 3767, 3767, 3767, 3767, 3767, 3767, 3767, 3767, 3767,
	-1000, -1000, 3767, -1000, -1000, -1000, 280, 280, 280, 280,
	4129, 3767, 4489, 3767, 4489, 4489, 280, 280, 280, 280,
	280, 280, 280, 280, 741, 1018, 741, 3767, -1000, -1000,
	-1000, 229, -1000, -1000, -1000, -1000, -1000, 4084, -81, 80,
	395, 4489, 4039, -1000, -1000, -1000, -1000, -47, -1000, 194,
	3767, -1000, 3767, 4524, 4558, 1295, 741, 882, 4591, 1411,
	3402, 306, 306, 306, 280, 280, 280, 280, 371, 371,
	1161, 1161, 1161, 1161, 1161, 340, 340, 340, 340, 4444,
	3767, 1149, 375, -1000, -1000, 4354, 68, -1000, 359, 2307,
	-1000, -1000, -84, -41, -1000, 3767, -1000, 3767, -1000, -1000,
	741, 3767, 741, 741, 741, 741, 741, 741, 741, 741,
	741, 741, 741, 741, 3994, -1000, 3949, 3904, 3767, 4174,
	-1000, 3299, 3767, 3767, 3767, 77, -1000, -1000, 4489, -1000,
	3767, 1149, -91, -47, 78, 3176, 224, 3767, -1000, 120,
	-1000, 257, 592, 254, 2182, 1411, 3053, -1000, -1000, 741,
	-1000, -1000, -1000, -1000, 91, 73, 4489, -1000, 56, 55,
	1149, 54, -1000, 38, -1000, -47, -86, 3546, -1000, -1000,
	-1000, -1000, 4489, 151, -93, 374, -1000, 326, -1000, -1000,
	81, -1000, -1000, -1000, -1000, 199, 83, 84, -1000, -1000,
	190, 156, 122, 266, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3422, 335, 52, -1000, -1000, 2057, 51, 3767,
	-13, -1000, 232, -1000, -1000, 2807, 78, -1000, 3546, -126,
	372, -1000, -1000, 4399, -47, -87, 1932, -1000, -88, -46,
	334, 120, 103, -1000, -1000, -1000, 199, -1000, 108, -1000,
	358, 1024, 88, -1000, -1000, -1000, -1000, -1000, 2682, 50,
	-1000, -94, -1000, 3767, 82, -15, 44, 205, -1000, -1000,
	-1000, -95, -96, -1000, 3546, 3586, -1000, 3546, 13, 122,
	-1000, -48, 120, -1000, 192, -1000, -1000, -1000, 190, 3767,
	101, -1000, 356, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 122, -1000, 885, 2682, -1000, 2930, 4219,
	-1000, -1000, -1000, -1000, -1000, 9, 1807, 2807, -1000, -1000,
	4489, -47, -89, -118, -1000, 274, -1000, 1682, -1000, -1000,
	354, -1000, 4489, -1000, 1024, 3767, -1000, -1000, 746, -1000,
	-4, -6, 142, 166, 97, -1000, 83, -1000, -1000, -1000,
	-1000, -1000, 2682, -1000, -7, -1000, -1000, 3546, -1000, -119,
	122, -1000, 1557, 3767, -1000, 4489, -1000, -1000, -1000, -1000,
	122, 1163, 1024, 1432, 2682, -1000, -121, -51, -1000, -1000,
	4489, 370, -1000, -1000, 1024, -1000, -8, -1000, -1000, -1000,
	-1000, 1307, -1000,
}
var yyPgo = [...]int{

	0, 367, 489, 488, 487, 7, 486, 2, 485, 27,
	481, 5, 480, 20, 479, 1, 477, 407, 406, 476,
	475, 15, 26, 474, 473, 21, 0, 472, 470, 35,
	51, 465, 464, 463, 462, 461, 28, 460, 459, 457,
	25, 414, 456, 40, 455, 37, 454, 33, 452, 31,
	24, 9, 16, 451, 450, 13, 448, 29, 447, 446,
	445, 444, 32, 442, 441, 436, 6, 435, 14, 434,
	11, 429, 3, 427, 426, 4, 419, 416, 413, 412,
	411, 405, 12,
}
var yyR1 = [...]int{

	0, 80, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 6,
	6, 6, 6, 6, 6, 6, 7, 7, 10, 10,
	9, 11, 11, 11, 12, 12, 8, 8, 8, 8,
	8, 15, 15, 14, 14, 14, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	59, 59, 60, 60, 61, 61, 56, 56, 57, 58,
	58, 31, 31, 32, 32, 33, 33, 34, 34, 35,
	35, 36, 36, 37, 37, 39, 39, 39, 39, 40,
	40, 40, 82, 82, 38, 38, 50, 50, 50, 50,
	51, 52, 52, 53, 53, 54, 54, 54, 54, 54,
	54, 55, 55, 42, 42, 43, 44, 44, 45, 45,
	46, 46, 47, 48, 48, 49, 81, 81, 17, 17,
	16, 16, 1, 1, 62, 62, 63, 63, 63, 72,
	72, 73, 73, 73, 74, 74, 75, 75, 76, 77,
	77, 77, 77, 78, 78, 79, 64, 64, 69, 69,
	70, 71, 71, 65, 65, 66, 66, 66, 66, 66,
	66, 67, 67, 68, 68, 18, 23, 23, 24, 24,
	25, 25, 19, 19, 4, 4, 2, 2, 3, 3,
	21, 21, 22, 22, 22, 20, 20, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 26,
	26, 41, 41, 28, 29, 30, 30, 30,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 1, 2, 3, 2, 0, 1, 1, 1, 3,
	3, 2, 0, 1, 1, 1, 3, 1, 1, 5,
	7, 9, 5, 3, 3, 3, 3, 3, 3, 1,
	2, 6, 7, 9, 5, 1, 6, 3, 3, 2,
	0, 9, 1, 3, 0, 4, 3, 1, 3, 1,
	4, 5, 6, 1, 3, 6, 7, 3, 6, 1,
	4, 0, 1, 3, 1, 3, 4, 4, 5, 0,
	5, 4, 1, 1, 1, 4, 1, 2, 4, 3,
	1, 0, 1, 3, 1, 3, 1, 4, 2, 6,
	4, 1, 4, 3, 1, 1, 3, 1, 1, 3,
	3, 1, 1, 1, 3, 1, 0, 1, 6, 5,
	1, 2, 1, 1, 2, 0, 3, 4, 3, 1,
	3, 1, 2, 3, 1, 2, 2, 2, 3, 3,
	3, 4, 3, 1, 1, 3, 1, 1, 3, 1,
	3, 0, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 3, 10, 1, 0, 1, 3,
	4, 6, 0, 1, 0, 1, 0, 1, 0, 1,
	1, 2, 1, 1, 1, 0, 2, 3, 4, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 4, 3,
	4, 2, 2, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 2, 4, 2, 1,
	1, 0, 1, 1, 1, 1, 4, 2,
}
var yyChk = [...]int{

	-1000, -80, -12, -8, -13, -18, -17, 4, 154, 160,
	-32, -34, 97, 96, 99, 106, 110, 111, 115, 122,
	76, 95, 90, -26, 124, 101, 103, 159, 116, 119,
	112, 86, 113, -16, 128, -31, -33, -29, -27, -1,
	83, -28, 71, 58, 59, 49, 50, 55, 57, 162,
	126, 5, 6, 7, 8, 60, 61, 62, 63, 64,
	65, 66, 67, 13, 14, 16, 77, 78, -30, 88,
	165, -7, -26, 86, -6, -5, 76, 77, 78, 79,
	80, 81, 71, 126, 4, 5, 6, 7, 8, 13,
	14, 10, 11, 12, 56, 70, 82, 83, 73, 74,
	75, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 111, 112, 113, 114, 115, 134, 106, 107,
	108, 109, 110, 135, 136, 131, 132, 154, 129, 130,
	128, 137, 138, 140, 139, 141, 142, 156, 155, -9,
	-10, 86, -15, 162, -13, 4, 162, 162, -41, -26,
	-41, -41, -42, -43, -30, -44, -45, 88, -46, -47,
	-26, 159, 33, 34, 10, 12, 11, 35, 37, 36,
	51, 49, 50, 52, 68, 53, 54, 47, 48, 40,
	41, 38, 39, 42, 43, 44, 45, 46, 30, 32,
	162, 162, 162, 160, -26, 86, 31, -4, 37, 128,
	-1, 86, 73, 74, 73, 75, 74, 17, 18, 19,
	20, 29, 21, 22, 23, 24, 25, 26, 27, 28,
	58, 59, 162, -26, -29, -29, -26, -26, -26, -26,
	-26, 162, -26, 162, -26, -26, -26, -26, -26, -26,
	-26, -26, -26, -26, -26, -26, -26, 160, -30, 159,
	159, 157, -14, 161, -13, -18, -17, -26, 97, -36,
	-37, -26, -26, 159, 159, 159, 159, 9, 159, 9,
	17, 159, 9, -26, -26, -26, -26, -26, -26, -26,
	-26, -26, -26, -26, -26, -26, -26, -26, -26, -26,
	-26, -26, -26, -26, -26, -26, -26, -26, -26, -26,
	31, -26, -48, -49, -29, -26, -56, -57, 86, -15,
	159, 159, 86, 86, 160, 162, -13, 162, 159, 31,
	-26, 37, -26, -26, -26, -26, -26, -26, -26, -26,
	-26, -26, -26, -26, -26, 163, -26, -26, 15, -26,
	86, 163, 162, 159, 9, 163, -43, -45, -26, -47,
	31, -26, -81, 9, 105, 163, 9, 17, 161, 162,
	160, -62, -26, -26, -15, -26, 163, 163, 163, -26,
	161, -35, -13, 31, -26, -36, -26, -39, 160, 31,
	-26, 163, -49, -50, -29, 37, 134, 69, -58, -13,
	31, -57, -26, -59, -23, -24, -25, -19, -21, -22,
	30, -11, 135, 136, -9, 157, 154, -62, 161, -63,
	-64, -71, 120, -65, 123, -66, 81, 80, 79, 76,
	77, 78, 163, 163, 75, -13, 31, -15, 163, 159,
	-40, 159, -40, 159, 159, 163, 15, -29, 162, -51,
	-53, -52, -54, -26, 37, 134, -15, -61, 117, 118,
	163, 9, -2, 37, -22, -9, 157, 161, -67, -68,
	88, 114, -72, -11, -66, -13, 31, 159, -15, 98,
	159, -36, 161, 108, 109, -40, 107, -40, -55, -13,
	31, -50, -51, 164, 9, 15, -29, 162, 104, 162,
	160, -20, 31, -25, -3, 158, -9, 159, 9, 17,
	-69, -70, -7, 4, 5, 6, 7, 8, 71, 126,
	13, 14, -73, 9, 159, 160, -15, 159, 163, -26,
	-82, 31, 159, 161, 159, 107, -15, 163, 163, -52,
	-26, 37, 134, -51, 159, -60, -11, -15, 160, -21,
	88, -68, -26, 159, 9, 17, -11, 161, -74, -75,
	-76, -77, -79, -78, -11, -7, 154, 86, -38, -13,
	31, -82, -15, 159, 102, -55, -29, 162, 163, 88,
	35, 161, -15, 17, -70, -26, 161, -75, 159, 159,
	121, 105, 153, -15, -15, 159, -51, 163, -11, 161,
	-26, -72, 86, -5, -66, -7, 100, 163, 160, -7,
	159, -15, 161,
}
var yyDef = [...]int{

	85, -2, 1, 84, 86, 87, 88, 0, 0, 92,
	97, 98, 0, 0, 0, 0, 331, 331, 331, 0,
	0, 0, 109, 0, 0, 0, 0, 115, 0, 0,
	0, 0, 244, 0, 0, 133, 0, 329, 330, 190,
	0, 334, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 325, 0, 192, 193, 333, 335,
	0, 0, 311, 76, 77, 69, 70, 71, 72, 73,
	74, 75, 12, 39, 2, 3, 4, 5, 6, 45,
	-2, 7, 8, 9, 10, 11, 13, 14, 15, 16,
	17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
	27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
	37, 38, 40, 41, 42, 43, 44, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 0,
	80, 78, 0, 0, 0, 0, 141, 0, 0, 332,
	0, 0, 0, 174, 175, 0, 177, 178, 0, 181,
	182, 110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 0, 0, 119, 0, 245, 0,
	191, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	272, 274, 0, 259, 273, 275, 293, 294, 295, 296,
	0, 0, 312, 0, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 323, 324, 326, 328, 0, 337, 89,
	90, 0, 91, 96, 93, 94, 95, 0, 0, 0,
	142, 144, 0, 103, 104, 105, 106, 0, 107, 0,
	0, 108, 0, 276, 277, 278, 279, 280, 281, 282,
	283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 0,
	0, 309, 186, 183, 185, 0, 0, 127, 0, 0,
	117, 118, 0, 0, 195, 0, 134, 0, 137, 92,
	257, 0, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 0, 306, 0, 0, 0, 0,
	79, 0, 0, 141, 0, 0, 173, 176, 179, 180,
	0, 308, 0, 187, 0, 0, 0, 0, 120, -2,
	195, 221, 0, 0, 0, 258, 0, 310, 313, 327,
	336, 99, 139, 92, 0, 0, 143, 102, 149, 149,
	307, 0, 184, 0, 156, 0, 0, 161, 114, 129,
	92, 126, 128, 124, 0, 236, 238, 246, 243, 250,
	0, 252, 253, 254, 81, 0, 0, 221, 189, 194,
	0, 0, 0, -2, 217, 223, 225, 226, 227, 228,
	229, 230, 0, 0, 0, 131, 92, 0, 0, 141,
	0, 149, 0, 149, 111, 0, 0, 157, 161, 0,
	160, 164, 162, 166, 0, 0, 0, 116, 0, 0,
	255, 242, 248, 247, 251, 82, 0, 188, 0, 232,
	233, 0, 0, 199, 224, 132, 92, 138, 135, 0,
	100, 0, 145, 0, 0, 0, 0, 0, 112, 171,
	92, 0, 0, 159, 161, 0, 168, 161, 0, 0,
	92, 0, 0, 239, 0, 249, 83, 196, 0, 0,
	0, 219, 0, 2, 3, 4, 5, 6, 12, 39,
	45, 46, 198, 0, 201, 0, 136, 140, 0, 0,
	92, 152, 153, 146, 147, 0, 0, 0, 158, 163,
	165, 0, 0, 0, 130, 0, 122, 0, 92, 256,
	240, 231, 234, 197, 0, 0, 200, 202, 0, 204,
	0, 0, 214, 0, 0, 213, 57, -2, 101, 154,
	92, 92, 151, 148, 0, 113, 167, 161, 170, 0,
	0, 125, 0, 0, 218, 220, 203, 205, 206, 207,
	0, 0, 0, 0, 150, 172, 0, 0, 123, 235,
	241, 208, 209, 210, 212, 215, 0, 169, 92, 211,
	155, 0, 121,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 55, 3, 3, 165, 54, 37, 3,
	162, 163, 52, 49, 9, 50, 51, 53, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 31, 159,
	43, 17, 45, 30, 67, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 69, 3, 164, 36, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 160, 35, 161, 57,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 10, 11, 12,
	13, 14, 15, 16, 18, 19, 20, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 32, 33, 34, 38,
	39, 40, 41, 42, 44, 46, 47, 48, 56, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 68, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 157, 158,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:278
		{
			fmt.Println(yyDollar[1].node)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:282
		{
			yyVAL.value = yyDollar[1].token
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:282
		{
			yyVAL.value = yyDollar[1].token
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:282
		{
			yyVAL.value = yyDollar[1].token
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:282
		{
			yyVAL.value = yyDollar[1].token
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:282
		{
			yyVAL.value = yyDollar[1].token
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:282
		{
			yyVAL.value = yyDollar[1].token
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:282
		{
			yyVAL.value = yyDollar[1].token
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:282
		{
			yyVAL.value = yyDollar[1].token
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:283
		{
			yyVAL.value = yyDollar[1].token
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:283
		{
			yyVAL.value = yyDollar[1].token
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:283
		{
			yyVAL.value = yyDollar[1].token
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:283
		{
			yyVAL.value = yyDollar[1].token
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:283
		{
			yyVAL.value = yyDollar[1].token
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:283
		{
			yyVAL.value = yyDollar[1].token
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:283
		{
			yyVAL.value = yyDollar[1].token
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:283
		{
			yyVAL.value = yyDollar[1].token
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:283
		{
			yyVAL.value = yyDollar[1].token
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:283
		{
			yyVAL.value = yyDollar[1].token
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:283
		{
			yyVAL.value = yyDollar[1].token
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:283
		{
			yyVAL.value = yyDollar[1].token
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:284
		{
			yyVAL.value = yyDollar[1].token
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:284
		{
			yyVAL.value = yyDollar[1].token
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:284
		{
			yyVAL.value = yyDollar[1].token
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:284
		{
			yyVAL.value = yyDollar[1].token
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:284
		{
			yyVAL.value = yyDollar[1].token
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:284
		{
			yyVAL.value = yyDollar[1].token
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:284
		{
			yyVAL.value = yyDollar[1].token
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:284
		{
			yyVAL.value = yyDollar[1].token
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:284
		{
			yyVAL.value = yyDollar[1].token
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:284
		{
			yyVAL.value = yyDollar[1].token
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:285
		{
			yyVAL.value = yyDollar[1].token
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:285
		{
			yyVAL.value = yyDollar[1].token
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:285
		{
			yyVAL.value = yyDollar[1].token
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:285
		{
			yyVAL.value = yyDollar[1].token
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:285
		{
			yyVAL.value = yyDollar[1].token
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:285
		{
			yyVAL.value = yyDollar[1].token
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:285
		{
			yyVAL.value = yyDollar[1].token
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:285
		{
			yyVAL.value = yyDollar[1].token
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:285
		{
			yyVAL.value = yyDollar[1].token
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:285
		{
			yyVAL.value = yyDollar[1].token
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:286
		{
			yyVAL.value = yyDollar[1].token
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:286
		{
			yyVAL.value = yyDollar[1].token
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:286
		{
			yyVAL.value = yyDollar[1].token
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:286
		{
			yyVAL.value = yyDollar[1].token
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:286
		{
			yyVAL.value = yyDollar[1].token
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:286
		{
			yyVAL.value = yyDollar[1].token
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:286
		{
			yyVAL.value = yyDollar[1].token
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:286
		{
			yyVAL.value = yyDollar[1].token
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:286
		{
			yyVAL.value = yyDollar[1].token
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:286
		{
			yyVAL.value = yyDollar[1].token
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:286
		{
			yyVAL.value = yyDollar[1].token
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:287
		{
			yyVAL.value = yyDollar[1].token
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:287
		{
			yyVAL.value = yyDollar[1].token
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:287
		{
			yyVAL.value = yyDollar[1].token
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:287
		{
			yyVAL.value = yyDollar[1].token
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:287
		{
			yyVAL.value = yyDollar[1].token
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:287
		{
			yyVAL.value = yyDollar[1].token
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:287
		{
			yyVAL.value = yyDollar[1].token
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:287
		{
			yyVAL.value = yyDollar[1].token
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:288
		{
			yyVAL.value = yyDollar[1].token
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:288
		{
			yyVAL.value = yyDollar[1].token
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:288
		{
			yyVAL.value = yyDollar[1].token
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:288
		{
			yyVAL.value = yyDollar[1].token
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:288
		{
			yyVAL.value = yyDollar[1].token
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:288
		{
			yyVAL.value = yyDollar[1].token
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:288
		{
			yyVAL.value = yyDollar[1].token
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:288
		{
			yyVAL.value = yyDollar[1].token
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:292
		{
			yyVAL.value = yyDollar[1].value
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:293
		{
			yyVAL.value = yyDollar[1].token
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:293
		{
			yyVAL.value = yyDollar[1].token
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:293
		{
			yyVAL.value = yyDollar[1].token
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:293
		{
			yyVAL.value = yyDollar[1].token
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:293
		{
			yyVAL.value = yyDollar[1].token
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:293
		{
			yyVAL.value = yyDollar[1].token
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:297
		{
			yyVAL.node = Node("identifier").attribute("value", yyDollar[1].token)
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:298
		{
			yyVAL.node = Node("identifier").attribute("value", yyDollar[1].value)
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:302
		{
			yyVAL.node = Node("NamespaceParts").append(Node(yyDollar[1].token))
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:303
		{
			yyVAL.node = yyDollar[1].node.append(Node(yyDollar[3].token))
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:307
		{
			yyVAL.node = yyDollar[1].node
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:311
		{
			yyVAL.node = Node("Name").append(yyDollar[1].node)
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:312
		{
			yyVAL.node = Node("Name").append(yyDollar[2].node).attribute("FullyQualified", "true")
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:313
		{
			yyVAL.node = Node("Name").append(yyDollar[3].node).attribute("Relative", "true")
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:317
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[2].node)
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:318
		{
			yyVAL.node = Node("Statements")
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:322
		{
			yyVAL.node = yyDollar[1].node
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:323
		{
			yyVAL.node = yyDollar[1].node
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:324
		{
			yyVAL.node = yyDollar[1].node
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:325
		{
			yyVAL.node = yyDollar[2].node /*TODO: identifier stub, refactor it*/
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:326
		{
			yyVAL.node = Node("Namespace").append(yyDollar[2].node)
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:330
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[2].node)
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:331
		{
			yyVAL.node = Node("stmt")
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:335
		{
			yyVAL.node = yyDollar[1].node
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:336
		{
			yyVAL.node = yyDollar[1].node
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:337
		{
			yyVAL.node = yyDollar[1].node
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:340
		{
			yyVAL.node = yyDollar[2].node
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:341
		{
			yyVAL.node = yyDollar[1].node
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:342
		{
			yyVAL.node = yyDollar[1].node
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:344
		{
			yyVAL.node = Node("While").
				append(Node("expr").append(yyDollar[3].node)).
				append(Node("stmt").append(yyDollar[5].node))
		}
	case 100:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:350
		{
			yyVAL.node = Node("DoWhile").
				append(Node("expr").append(yyDollar[5].node)).
				append(Node("stmt").append(yyDollar[2].node))
		}
	case 101:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:356
		{
			yyVAL.node = Node("For").
				append(Node("expr1").append(yyDollar[3].node)).
				append(Node("expr2").append(yyDollar[5].node)).
				append(Node("expr3").append(yyDollar[7].node)).
				append(Node("stmt").append(yyDollar[9].node))
		}
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:363
		{
			yyVAL.node = Node("Switch").append(Node("expr").append(yyDollar[3].node)).append(yyDollar[5].node)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:364
		{
			yyVAL.node = Node("Break").append(yyDollar[2].node)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:365
		{
			yyVAL.node = Node("Continue").append(yyDollar[2].node)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:366
		{
			yyVAL.node = Node("Return").append(yyDollar[2].node)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:367
		{
			yyVAL.node = yyDollar[2].node
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:368
		{
			yyVAL.node = yyDollar[2].node
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:369
		{
			yyVAL.node = yyDollar[2].node
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:370
		{
			yyVAL.node = Node("Echo").append(Node("InlineHtml").attribute("value", yyDollar[1].token))
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:371
		{
			yyVAL.node = yyDollar[1].node
		}
	case 111:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:373
		{
			yyVAL.node = Node("Unset").append(yyDollar[3].node)
		}
	case 112:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:375
		{
			yyVAL.node = Node("Foreach").
				append(Node("expr").append(yyDollar[3].node)).
				append(Node("ForeachVariable").append(yyDollar[5].node)).
				append(yyDollar[7].node)
		}
	case 113:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:382
		{
			yyVAL.node = Node("Foreach").
				append(Node("expr").append(yyDollar[3].node)).
				append(Node("ForeachKey").append(yyDollar[5].node)).
				append(Node("ForeachVariable").append(yyDollar[7].node)).
				append(yyDollar[9].node)
		}
	case 114:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:389
		{
			yyVAL.node = Node("Declare").append(yyDollar[3].node).append(yyDollar[5].node)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:390
		{
			yyVAL.node = Node("")
		}
	case 116:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:392
		{
			yyVAL.node = Node("Try").
				append(yyDollar[3].node).
				append(yyDollar[5].node).
				append(yyDollar[6].node)
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:398
		{
			yyVAL.node = Node("Throw").append(yyDollar[2].node)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:399
		{
			yyVAL.node = Node("GoTo").attribute("Label", yyDollar[2].token)
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:400
		{
			yyVAL.node = Node("Label").attribute("name", yyDollar[1].token)
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:403
		{
			yyVAL.node = Node("CatchList")
		}
	case 121:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:405
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[4].node).append(Node("Variable").attribute("name", yyDollar[5].token)).append(yyDollar[8].node)
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:408
		{
			yyVAL.node = Node("CatchNameList").append(yyDollar[1].node)
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:409
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:413
		{
			yyVAL.node = Node("")
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:414
		{
			yyVAL.node = Node("Finnaly").append(yyDollar[3].node)
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:418
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:419
		{
			yyVAL.node = Node("ConstList").append(yyDollar[1].node)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:423
		{
			yyVAL.node = Node("Const").attribute("name", yyDollar[1].token).append(yyDollar[3].node)
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:427
		{
			yyVAL.node = yyDollar[1].node
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:428
		{
			yyVAL.node = yyDollar[2].node
		}
	case 131:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:433
		{
			yyVAL.node = Node("If").append(Node("expr").append(yyDollar[3].node)).append(Node("stmt").append(yyDollar[5].node))
		}
	case 132:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:437
		{
			yyVAL.node = yyDollar[1].node.append(Node("ElseIf").append(Node("expr").append(yyDollar[4].node)).append(Node("stmt").append(yyDollar[6].node)))
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:443
		{
			yyVAL.node = yyDollar[1].node
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:445
		{
			yyVAL.node = yyDollar[1].node.append(Node("Else").append(Node("stmt").append(yyDollar[3].node)))
		}
	case 135:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:452
		{
			yyVAL.node = Node("AltIf").append(Node("expr").append(yyDollar[3].node)).append(Node("stmt").append(yyDollar[6].node))
		}
	case 136:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:456
		{
			yyVAL.node = yyDollar[1].node.append(Node("AltElseIf").append(Node("expr").append(yyDollar[4].node)).append(Node("stmt").append(yyDollar[7].node)))
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:462
		{
			yyVAL.node = yyDollar[1].node
		}
	case 138:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:464
		{
			yyVAL.node = yyDollar[1].node.append(Node("AltElse").append(Node("stmt").append(yyDollar[4].node)))
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:470
		{
			yyVAL.node = yyDollar[1].node
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:471
		{
			yyVAL.node = yyDollar[2].node
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:475
		{
			yyVAL.node = Node("")
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:476
		{
			yyVAL.node = yyDollar[1].node
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:479
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:480
		{
			yyVAL.node = Node("ExpressionList").append(yyDollar[1].node)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:484
		{
			yyVAL.node = yyDollar[2].node
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:485
		{
			yyVAL.node = yyDollar[3].node
		}
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:486
		{
			yyVAL.node = yyDollar[2].node
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:487
		{
			yyVAL.node = yyDollar[3].node
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:491
		{
			yyVAL.node = Node("CaseList")
		}
	case 150:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:493
		{
			yyVAL.node = yyDollar[1].node.append(Node("Case").append(Node("expr").append(yyDollar[3].node)).append(yyDollar[5].node))
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:497
		{
			yyVAL.node = yyDollar[1].node.append(Node("Default").append(yyDollar[4].node))
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:508
		{
			yyVAL.node = yyDollar[1].node
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:509
		{
			yyVAL.node = yyDollar[2].node
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:513
		{
			yyVAL.node = yyDollar[1].node
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:514
		{
			yyVAL.node = Node("Ref").append(yyDollar[2].node)
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:515
		{
			yyVAL.node = Node("List").append(yyDollar[3].node)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:516
		{
			yyVAL.node = Node("ShortList").append(yyDollar[2].node)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:520
		{ /* TODO: allow single trailing comma */
			yyVAL.node = yyDollar[1].node
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:524
		{
			yyVAL.node = Node("")
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:525
		{
			yyVAL.node = yyDollar[1].node
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:530
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:531
		{
			yyVAL.node = Node("ArrayPairList").append(yyDollar[1].node)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:535
		{
			yyVAL.node = Node("ArrayElement").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:536
		{
			yyVAL.node = Node("ArrayElement").append(yyDollar[1].node)
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:537
		{
			yyVAL.node = Node("ArrayElement").append(yyDollar[1].node).append(Node("Ref").append(yyDollar[4].node))
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:538
		{
			yyVAL.node = Node("ArrayElement").append(Node("Ref").append(yyDollar[2].node))
		}
	case 169:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:540
		{
			yyVAL.node = Node("ArrayElement").
				append(yyDollar[1].node).
				append(Node("ArrayList").append(yyDollar[5].node))
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:546
		{
			yyVAL.node = Node("ArrayElement").
				append(Node("ArrayList").append(yyDollar[3].node))
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:553
		{
			yyVAL.node = yyDollar[1].node
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:554
		{
			yyVAL.node = yyDollar[2].node
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:558
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:559
		{
			yyVAL.node = Node("GlobalVarList").append(yyDollar[1].node)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:563
		{
			yyVAL.node = yyDollar[1].node
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:567
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:568
		{
			yyVAL.node = Node("StaticVarList").append(yyDollar[1].node)
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:572
		{
			yyVAL.node = Node("StaticVariable").attribute("Name", yyDollar[1].token)
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:573
		{
			yyVAL.node = Node("StaticVariable").attribute("Name", yyDollar[1].token).append(Node("expr").append(yyDollar[3].node))
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:577
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:578
		{
			yyVAL.node = Node("EchoList").append(yyDollar[1].node)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:582
		{
			yyVAL.node = Node("Echo").append(yyDollar[1].node)
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:586
		{
			yyVAL.node = Node("UnsetVariablesList").append(yyDollar[1].node)
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:587
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:591
		{
			yyVAL.node = yyDollar[1].node
		}
	case 188:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:601
		{
			yyVAL.node = yyDollar[1].node.attribute("name", yyDollar[3].token).append(yyDollar[5].node)
		}
	case 189:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:602
		{
			yyVAL.node = Node("Class").attribute("name", yyDollar[2].token).append(yyDollar[4].node)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:606
		{
			yyVAL.node = Node("Class").attribute(yyDollar[1].value, "true")
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:607
		{
			yyVAL.node = yyDollar[1].node.attribute(yyDollar[2].value, "true")
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:611
		{
			yyVAL.value = "abstract"
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:612
		{
			yyVAL.value = "final"
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:616
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[2].node)
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:617
		{
			yyVAL.node = Node("Stmt")
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:621
		{
			yyVAL.node = yyDollar[2].node.append(yyDollar[1].node)
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:622
		{
			yyVAL.node = yyDollar[3].node.append(yyDollar[1].node)
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:623
		{
			yyVAL.node = Node("Use").append(yyDollar[2].node).append(yyDollar[3].node)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:627
		{
			yyVAL.node = Node("NameList").append(yyDollar[1].node)
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:628
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:632
		{
			yyVAL.node = Node("")
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:633
		{
			yyVAL.node = Node("")
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:634
		{
			yyVAL.node = yyDollar[2].node
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:638
		{
			yyVAL.node = Node("TraitAdaptionList").append(yyDollar[1].node)
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:639
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[2].node)
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:643
		{
			yyVAL.node = yyDollar[1].node
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:644
		{
			yyVAL.node = yyDollar[1].node
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:649
		{
			yyVAL.node = Node("TraitPrecedence").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:653
		{
			yyVAL.node = yyDollar[1].node.append(Node("as").attribute("value", yyDollar[3].token))
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:655
		{
			yyVAL.node = yyDollar[1].node.append(Node("as").append(Node("reservedNonModifiers")))
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:657
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node).append(yyDollar[4].node)
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:658
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:661
		{
			yyVAL.node = Node("TraitMethodRef").append(yyDollar[1].node)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:662
		{
			yyVAL.node = yyDollar[1].node
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:666
		{
			yyVAL.node = Node("TraitMethodRef").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:669
		{
			yyVAL.node = yyDollar[1].node
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:670
		{
			yyVAL.node = Node("VarMemberModifier")
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:674
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:675
		{
			yyVAL.node = Node("ConstList").append(yyDollar[1].node)
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:679
		{
			yyVAL.node = Node("Const").append(yyDollar[3].node)
		}
	case 221:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:683
		{
			yyVAL.node = Node("PublicMemberModifier")
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:684
		{
			yyVAL.node = yyDollar[1].node
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:687
		{
			yyVAL.node = yyDollar[1].node
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:688
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[2].node)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:691
		{
			yyVAL.node = Node("PublicMemberModifier")
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:692
		{
			yyVAL.node = Node("ProtectedMemberModifier")
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:693
		{
			yyVAL.node = Node("PrivateMemberModifier")
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:694
		{
			yyVAL.node = Node("StaticMemberModifier")
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:695
		{
			yyVAL.node = Node("AbstractMemberModifier")
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:696
		{
			yyVAL.node = Node("FinalMemberModifier")
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:700
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:701
		{
			yyVAL.node = Node("PropertyList").append(yyDollar[1].node)
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:704
		{
			yyVAL.node = Node("Property").attribute("name", yyDollar[1].token)
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:705
		{
			yyVAL.node = Node("Property").attribute("name", yyDollar[1].token).append(Node("Default").append(yyDollar[3].node))
		}
	case 235:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:710
		{
			yyVAL.node = Node("Function").
				attribute("name", yyDollar[3].token).
				attribute("returns_ref", yyDollar[2].value).
				append(yyDollar[5].node).
				append(yyDollar[7].node).
				append(yyDollar[9].node)
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:721
		{
			yyVAL.node = yyDollar[1].node
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:722
		{
			yyVAL.node = Node("Parameter list")
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:725
		{
			yyVAL.node = Node("Parameter list").append(yyDollar[1].node)
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:726
		{
			yyVAL.node = yyDollar[1].node.append(yyDollar[3].node)
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:730
		{
			yyVAL.node = Node("Parameter").
				append(yyDollar[1].node).
				attribute("is_reference", yyDollar[2].value).
				attribute("is_variadic", yyDollar[3].value).
				attribute("var", yyDollar[4].token)
		}
	case 241:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:738
		{
			yyVAL.node = Node("Parameter").
				append(yyDollar[1].node).
				attribute("is_reference", yyDollar[2].value).
				attribute("is_variadic", yyDollar[3].value).
				attribute("var", yyDollar[4].token).
				append(yyDollar[6].node)
		}
	case 242:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:749
		{
			yyVAL.node = Node("No type")
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:750
		{
			yyVAL.node = yyDollar[1].node
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:754
		{
			yyVAL.value = "false"
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:755
		{
			yyVAL.value = "true"
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:759
		{
			yyVAL.value = "false"
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:760
		{
			yyVAL.value = "true"
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:764
		{
			yyVAL.value = "false"
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:765
		{
			yyVAL.value = "true"
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:769
		{
			yyVAL.node = yyDollar[1].node
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:770
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.attribute("nullable", "true")
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:774
		{
			yyVAL.node = yyDollar[1].node
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:775
		{
			yyVAL.node = Node("array type")
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:776
		{
			yyVAL.node = Node("callable type")
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:780
		{
			yyVAL.node = Node("void")
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:781
		{
			yyVAL.node = yyDollar[2].node
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:785
		{
			yyVAL.node = Node("Assign").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:786
		{
			yyVAL.node = Node("AssignRef").append(yyDollar[1].node).append(yyDollar[4].node)
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:787
		{
			yyVAL.node = Node("Clone").append(yyDollar[2].node)
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:788
		{
			yyVAL.node = Node("AssignAdd").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:789
		{
			yyVAL.node = Node("AssignSub").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:790
		{
			yyVAL.node = Node("AssignMul").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:791
		{
			yyVAL.node = Node("AssignPow").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:792
		{
			yyVAL.node = Node("AssignDiv").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:793
		{
			yyVAL.node = Node("AssignConcat").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:794
		{
			yyVAL.node = Node("AssignMod").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:795
		{
			yyVAL.node = Node("AssignAnd").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:796
		{
			yyVAL.node = Node("AssignOr").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:797
		{
			yyVAL.node = Node("AssignXor").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:798
		{
			yyVAL.node = Node("AssignShiftLeft").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:799
		{
			yyVAL.node = Node("AssignShiftRight").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:800
		{
			yyVAL.node = Node("PostIncrement").append(yyDollar[1].node)
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:801
		{
			yyVAL.node = Node("PreIncrement").append(yyDollar[2].node)
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:802
		{
			yyVAL.node = Node("PostDecrement").append(yyDollar[1].node)
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:803
		{
			yyVAL.node = Node("PreDecrement").append(yyDollar[2].node)
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:804
		{
			yyVAL.node = Node("Or").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:805
		{
			yyVAL.node = Node("And").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:806
		{
			yyVAL.node = Node("Or").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:807
		{
			yyVAL.node = Node("And").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:808
		{
			yyVAL.node = Node("Xor").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:809
		{
			yyVAL.node = Node("BitwiseOr").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:810
		{
			yyVAL.node = Node("BitwiseAnd").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:811
		{
			yyVAL.node = Node("BitwiseXor").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:812
		{
			yyVAL.node = Node("Concat").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:813
		{
			yyVAL.node = Node("Add").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:814
		{
			yyVAL.node = Node("Sub").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:815
		{
			yyVAL.node = Node("Mul").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:816
		{
			yyVAL.node = Node("Pow").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:817
		{
			yyVAL.node = Node("Div").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:818
		{
			yyVAL.node = Node("Mod").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:819
		{
			yyVAL.node = Node("ShiftLeft").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:820
		{
			yyVAL.node = Node("ShiftRight").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:821
		{
			yyVAL.node = Node("UnaryPlus").append(yyDollar[2].node)
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:822
		{
			yyVAL.node = Node("UnaryMinus").append(yyDollar[2].node)
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:823
		{
			yyVAL.node = Node("BooleanNot").append(yyDollar[2].node)
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:824
		{
			yyVAL.node = Node("BitwiseNot").append(yyDollar[2].node)
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:825
		{
			yyVAL.node = Node("Identical").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:826
		{
			yyVAL.node = Node("NotIdentical").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:827
		{
			yyVAL.node = Node("Equal").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:828
		{
			yyVAL.node = Node("NotEqual").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:829
		{
			yyVAL.node = Node("Spaceship").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:830
		{
			yyVAL.node = Node("Smaller").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:831
		{
			yyVAL.node = Node("SmallerOrEqual").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:832
		{
			yyVAL.node = Node("Greater").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:833
		{
			yyVAL.node = Node("GreaterOrEqual").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:834
		{
			yyVAL.node = yyDollar[2].node
		}
	case 307:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:835
		{
			yyVAL.node = Node("Ternary").append(yyDollar[1].node).append(yyDollar[3].node).append(yyDollar[5].node)
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:836
		{
			yyVAL.node = Node("Ternary").append(yyDollar[1].node).append(yyDollar[4].node)
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:837
		{
			yyVAL.node = Node("Coalesce").append(yyDollar[1].node).append(yyDollar[3].node)
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:838
		{
			yyVAL.node = Node("Empty").append(yyDollar[3].node)
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:839
		{
			yyVAL.node = Node("Include").append(yyDollar[2].node)
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:840
		{
			yyVAL.node = Node("IncludeOnce").append(yyDollar[2].node)
		}
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:841
		{
			yyVAL.node = Node("Eval").append(yyDollar[3].node)
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:842
		{
			yyVAL.node = Node("Require").append(yyDollar[2].node)
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:843
		{
			yyVAL.node = Node("RequireOnce").append(yyDollar[2].node)
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:844
		{
			yyVAL.node = Node("CastInt").append(yyDollar[2].node)
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:845
		{
			yyVAL.node = Node("CastDouble").append(yyDollar[2].node)
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:846
		{
			yyVAL.node = Node("CastString").append(yyDollar[2].node)
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:847
		{
			yyVAL.node = Node("CastArray").append(yyDollar[2].node)
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:848
		{
			yyVAL.node = Node("CastObject").append(yyDollar[2].node)
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:849
		{
			yyVAL.node = Node("CastBool").append(yyDollar[2].node)
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:850
		{
			yyVAL.node = Node("CastUnset").append(yyDollar[2].node)
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:851
		{
			yyVAL.node = Node("Silence").append(yyDollar[2].node)
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:853
		{
			yyVAL.node = Node("Print").append(yyDollar[2].node)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:854
		{
			yyVAL.node = Node("Yield")
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:855
		{
			yyVAL.node = Node("Yield").append(yyDollar[2].node)
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:856
		{
			yyVAL.node = Node("Yield").append(yyDollar[2].node).append(yyDollar[4].node)
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:857
		{
			yyVAL.node = Node("YieldFrom").append(yyDollar[2].node)
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:861
		{
			yyVAL.node = yyDollar[1].node
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:862
		{
			yyVAL.node = yyDollar[1].node
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:866
		{
			yyVAL.node = Node("")
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:867
		{
			yyVAL.node = yyDollar[1].node
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:871
		{
			yyVAL.node = yyDollar[1].node
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:875
		{
			yyVAL.node = yyDollar[1].node
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:879
		{
			yyVAL.node = Node("Variable").attribute("name", yyDollar[1].token)
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:880
		{
			yyVAL.node = yyDollar[3].node
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:881
		{
			yyVAL.node = Node("Variable").append(yyDollar[2].node)
		}
	}
	goto yystack /* stack new state and value */
}
