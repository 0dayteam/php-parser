//line parser/parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser/parser.y:2
import (
	"github.com/z7zmey/php-parser/comment"
	"github.com/z7zmey/php-parser/node"
	"github.com/z7zmey/php-parser/node/expr"
	"github.com/z7zmey/php-parser/node/expr/assign_op"
	"github.com/z7zmey/php-parser/node/expr/binary_op"
	"github.com/z7zmey/php-parser/node/expr/cast"
	"github.com/z7zmey/php-parser/node/name"
	"github.com/z7zmey/php-parser/node/scalar"
	"github.com/z7zmey/php-parser/node/stmt"
	"github.com/z7zmey/php-parser/token"
	"io"
	"strconv"
	"strings"
)

var rootnode node.Node

func Parse(src io.Reader, fName string) node.Node {
	yyDebug = 0
	yyErrorVerbose = true
	rootnode = stmt.NewStmtList([]node.Node{}) //reset
	yyParse(newLexer(src, fName))
	return rootnode
}

func ListGetFirstNodeComments(list []node.Node) *[]comment.Comment {
	if len(list) == 0 {
		return nil
	}

	node := list[0]

	return node.Comments()
}

type foreachVariable struct {
	node  node.Node
	byRef bool
}

type nodesWithEndToken struct {
	nodes    []node.Node
	endToken token.Token
}

type boolWithToken struct {
	value bool
	token *token.Token
}

//line parser/parser.y:57
type yySymType struct {
	yys               int
	node              node.Node
	token             token.Token
	boolWithToken     boolWithToken
	list              []node.Node
	foreachVariable   foreachVariable
	nodesWithEndToken *nodesWithEndToken
	str               string
}

const T_INCLUDE = 57346
const T_INCLUDE_ONCE = 57347
const T_EVAL = 57348
const T_REQUIRE = 57349
const T_REQUIRE_ONCE = 57350
const T_LOGICAL_OR = 57351
const T_LOGICAL_XOR = 57352
const T_LOGICAL_AND = 57353
const T_PRINT = 57354
const T_YIELD = 57355
const T_DOUBLE_ARROW = 57356
const T_YIELD_FROM = 57357
const T_PLUS_EQUAL = 57358
const T_MINUS_EQUAL = 57359
const T_MUL_EQUAL = 57360
const T_DIV_EQUAL = 57361
const T_CONCAT_EQUAL = 57362
const T_MOD_EQUAL = 57363
const T_AND_EQUAL = 57364
const T_OR_EQUAL = 57365
const T_XOR_EQUAL = 57366
const T_SL_EQUAL = 57367
const T_SR_EQUAL = 57368
const T_POW_EQUAL = 57369
const T_COALESCE = 57370
const T_BOOLEAN_OR = 57371
const T_BOOLEAN_AND = 57372
const T_IS_EQUAL = 57373
const T_IS_NOT_EQUAL = 57374
const T_IS_IDENTICAL = 57375
const T_IS_NOT_IDENTICAL = 57376
const T_SPACESHIP = 57377
const T_IS_SMALLER_OR_EQUAL = 57378
const T_IS_GREATER_OR_EQUAL = 57379
const T_SL = 57380
const T_SR = 57381
const T_INSTANCEOF = 57382
const T_INC = 57383
const T_DEC = 57384
const T_INT_CAST = 57385
const T_DOUBLE_CAST = 57386
const T_STRING_CAST = 57387
const T_ARRAY_CAST = 57388
const T_OBJECT_CAST = 57389
const T_BOOL_CAST = 57390
const T_UNSET_CAST = 57391
const T_POW = 57392
const T_NEW = 57393
const T_CLONE = 57394
const T_NOELSE = 57395
const T_ELSEIF = 57396
const T_ELSE = 57397
const T_ENDIF = 57398
const T_STATIC = 57399
const T_ABSTRACT = 57400
const T_FINAL = 57401
const T_PRIVATE = 57402
const T_PROTECTED = 57403
const T_PUBLIC = 57404
const T_EXIT = 57405
const T_IF = 57406
const T_LNUMBER = 57407
const T_DNUMBER = 57408
const T_STRING = 57409
const T_STRING_VARNAME = 57410
const T_VARIABLE = 57411
const T_NUM_STRING = 57412
const T_INLINE_HTML = 57413
const T_CHARACTER = 57414
const T_BAD_CHARACTER = 57415
const T_ENCAPSED_AND_WHITESPACE = 57416
const T_CONSTANT_ENCAPSED_STRING = 57417
const T_ECHO = 57418
const T_DO = 57419
const T_WHILE = 57420
const T_ENDWHILE = 57421
const T_FOR = 57422
const T_ENDFOR = 57423
const T_FOREACH = 57424
const T_ENDFOREACH = 57425
const T_DECLARE = 57426
const T_ENDDECLARE = 57427
const T_AS = 57428
const T_SWITCH = 57429
const T_ENDSWITCH = 57430
const T_CASE = 57431
const T_DEFAULT = 57432
const T_BREAK = 57433
const T_CONTINUE = 57434
const T_GOTO = 57435
const T_FUNCTION = 57436
const T_CONST = 57437
const T_RETURN = 57438
const T_TRY = 57439
const T_CATCH = 57440
const T_FINALLY = 57441
const T_THROW = 57442
const T_USE = 57443
const T_INSTEADOF = 57444
const T_GLOBAL = 57445
const T_VAR = 57446
const T_UNSET = 57447
const T_ISSET = 57448
const T_EMPTY = 57449
const T_HALT_COMPILER = 57450
const T_CLASS = 57451
const T_TRAIT = 57452
const T_INTERFACE = 57453
const T_EXTENDS = 57454
const T_IMPLEMENTS = 57455
const T_OBJECT_OPERATOR = 57456
const T_LIST = 57457
const T_ARRAY = 57458
const T_CALLABLE = 57459
const T_CLASS_C = 57460
const T_TRAIT_C = 57461
const T_METHOD_C = 57462
const T_FUNC_C = 57463
const T_LINE = 57464
const T_FILE = 57465
const T_COMMENT = 57466
const T_DOC_COMMENT = 57467
const T_OPEN_TAG = 57468
const T_OPEN_TAG_WITH_ECHO = 57469
const T_CLOSE_TAG = 57470
const T_WHITESPACE = 57471
const T_START_HEREDOC = 57472
const T_END_HEREDOC = 57473
const T_DOLLAR_OPEN_CURLY_BRACES = 57474
const T_CURLY_OPEN = 57475
const T_PAAMAYIM_NEKUDOTAYIM = 57476
const T_NAMESPACE = 57477
const T_NS_C = 57478
const T_DIR = 57479
const T_NS_SEPARATOR = 57480
const T_ELLIPSIS = 57481

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"T_INCLUDE",
	"T_INCLUDE_ONCE",
	"T_EVAL",
	"T_REQUIRE",
	"T_REQUIRE_ONCE",
	"','",
	"T_LOGICAL_OR",
	"T_LOGICAL_XOR",
	"T_LOGICAL_AND",
	"T_PRINT",
	"T_YIELD",
	"T_DOUBLE_ARROW",
	"T_YIELD_FROM",
	"'='",
	"T_PLUS_EQUAL",
	"T_MINUS_EQUAL",
	"T_MUL_EQUAL",
	"T_DIV_EQUAL",
	"T_CONCAT_EQUAL",
	"T_MOD_EQUAL",
	"T_AND_EQUAL",
	"T_OR_EQUAL",
	"T_XOR_EQUAL",
	"T_SL_EQUAL",
	"T_SR_EQUAL",
	"T_POW_EQUAL",
	"'?'",
	"':'",
	"T_COALESCE",
	"T_BOOLEAN_OR",
	"T_BOOLEAN_AND",
	"'|'",
	"'^'",
	"'&'",
	"T_IS_EQUAL",
	"T_IS_NOT_EQUAL",
	"T_IS_IDENTICAL",
	"T_IS_NOT_IDENTICAL",
	"T_SPACESHIP",
	"'<'",
	"T_IS_SMALLER_OR_EQUAL",
	"'>'",
	"T_IS_GREATER_OR_EQUAL",
	"T_SL",
	"T_SR",
	"'+'",
	"'-'",
	"'.'",
	"'*'",
	"'/'",
	"'%'",
	"'!'",
	"T_INSTANCEOF",
	"'~'",
	"T_INC",
	"T_DEC",
	"T_INT_CAST",
	"T_DOUBLE_CAST",
	"T_STRING_CAST",
	"T_ARRAY_CAST",
	"T_OBJECT_CAST",
	"T_BOOL_CAST",
	"T_UNSET_CAST",
	"'@'",
	"T_POW",
	"'['",
	"T_NEW",
	"T_CLONE",
	"T_NOELSE",
	"T_ELSEIF",
	"T_ELSE",
	"T_ENDIF",
	"T_STATIC",
	"T_ABSTRACT",
	"T_FINAL",
	"T_PRIVATE",
	"T_PROTECTED",
	"T_PUBLIC",
	"T_EXIT",
	"T_IF",
	"T_LNUMBER",
	"T_DNUMBER",
	"T_STRING",
	"T_STRING_VARNAME",
	"T_VARIABLE",
	"T_NUM_STRING",
	"T_INLINE_HTML",
	"T_CHARACTER",
	"T_BAD_CHARACTER",
	"T_ENCAPSED_AND_WHITESPACE",
	"T_CONSTANT_ENCAPSED_STRING",
	"T_ECHO",
	"T_DO",
	"T_WHILE",
	"T_ENDWHILE",
	"T_FOR",
	"T_ENDFOR",
	"T_FOREACH",
	"T_ENDFOREACH",
	"T_DECLARE",
	"T_ENDDECLARE",
	"T_AS",
	"T_SWITCH",
	"T_ENDSWITCH",
	"T_CASE",
	"T_DEFAULT",
	"T_BREAK",
	"T_CONTINUE",
	"T_GOTO",
	"T_FUNCTION",
	"T_CONST",
	"T_RETURN",
	"T_TRY",
	"T_CATCH",
	"T_FINALLY",
	"T_THROW",
	"T_USE",
	"T_INSTEADOF",
	"T_GLOBAL",
	"T_VAR",
	"T_UNSET",
	"T_ISSET",
	"T_EMPTY",
	"T_HALT_COMPILER",
	"T_CLASS",
	"T_TRAIT",
	"T_INTERFACE",
	"T_EXTENDS",
	"T_IMPLEMENTS",
	"T_OBJECT_OPERATOR",
	"T_LIST",
	"T_ARRAY",
	"T_CALLABLE",
	"T_CLASS_C",
	"T_TRAIT_C",
	"T_METHOD_C",
	"T_FUNC_C",
	"T_LINE",
	"T_FILE",
	"T_COMMENT",
	"T_DOC_COMMENT",
	"T_OPEN_TAG",
	"T_OPEN_TAG_WITH_ECHO",
	"T_CLOSE_TAG",
	"T_WHITESPACE",
	"T_START_HEREDOC",
	"T_END_HEREDOC",
	"T_DOLLAR_OPEN_CURLY_BRACES",
	"T_CURLY_OPEN",
	"T_PAAMAYIM_NEKUDOTAYIM",
	"T_NAMESPACE",
	"T_NS_C",
	"T_DIR",
	"T_NS_SEPARATOR",
	"T_ELLIPSIS",
	"'\"'",
	"'`'",
	"'{'",
	"'}'",
	"';'",
	"'('",
	"')'",
	"']'",
	"'$'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser/parser.y:1467

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 43,
	69, 420,
	133, 420,
	153, 420,
	161, 420,
	-2, 415,
	-1, 47,
	164, 423,
	-2, 432,
	-1, 83,
	69, 422,
	133, 422,
	153, 422,
	161, 422,
	164, 425,
	-2, 410,
	-1, 106,
	153, 383,
	-2, 412,
	-1, 228,
	69, 420,
	133, 420,
	153, 420,
	161, 420,
	-2, 311,
	-1, 231,
	164, 425,
	-2, 422,
	-1, 234,
	69, 420,
	133, 420,
	153, 420,
	161, 420,
	-2, 313,
	-1, 352,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 335,
	-1, 353,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 336,
	-1, 354,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 337,
	-1, 355,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 338,
	-1, 356,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 339,
	-1, 357,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 340,
	-1, 358,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 341,
	-1, 359,
	43, 0,
	44, 0,
	45, 0,
	46, 0,
	-2, 342,
	-1, 360,
	38, 0,
	39, 0,
	40, 0,
	41, 0,
	42, 0,
	-2, 343,
	-1, 367,
	9, 161,
	165, 161,
	-2, 420,
	-1, 411,
	9, 460,
	165, 460,
	166, 460,
	-2, 420,
	-1, 415,
	69, 421,
	133, 421,
	153, 421,
	161, 421,
	164, 424,
	-2, 345,
	-1, 429,
	164, 446,
	-2, 413,
	-1, 430,
	164, 448,
	-2, 438,
	-1, 509,
	164, 446,
	-2, 414,
	-1, 510,
	164, 448,
	-2, 439,
	-1, 569,
	165, 211,
	-2, 216,
	-1, 594,
	164, 424,
	-2, 421,
	-1, 646,
	165, 211,
	-2, 216,
	-1, 651,
	165, 181,
	-2, 420,
	-1, 659,
	165, 211,
	-2, 216,
	-1, 684,
	9, 459,
	165, 459,
	166, 459,
	-2, 420,
	-1, 717,
	165, 182,
	-2, 420,
	-1, 737,
	88, 263,
	-2, 266,
	-1, 776,
	165, 181,
	-2, 420,
	-1, 778,
	165, 184,
	-2, 394,
	-1, 880,
	105, 76,
	-2, 80,
	-1, 912,
	165, 211,
	-2, 216,
}

const yyPrivate = 57344

const yyLast = 7467

var yyAct = [...]int{

	27, 129, 823, 836, 660, 859, 374, 576, 739, 434,
	872, 106, 835, 791, 664, 772, 809, 673, 783, 563,
	662, 137, 137, 137, 311, 650, 150, 4, 709, 631,
	698, 665, 530, 630, 185, 366, 320, 512, 376, 220,
	520, 403, 131, 79, 571, 315, 314, 222, 8, 7,
	136, 188, 224, 227, 146, 149, 235, 236, 237, 238,
	239, 127, 142, 240, 241, 242, 243, 244, 245, 246,
	125, 249, 139, 140, 257, 258, 259, 124, 2, 253,
	313, 312, 511, 6, 5, 428, 126, 778, 272, 273,
	891, 275, 276, 691, 687, 263, 268, 229, 229, 608,
	81, 595, 743, 744, 745, 742, 741, 740, 583, 408,
	924, 886, 104, 818, 817, 807, 799, 782, 771, 725,
	307, 110, 715, 696, 694, 686, 675, 648, 636, 626,
	596, 317, 114, 120, 587, 322, 323, 290, 928, 912,
	927, 83, 867, 826, 284, 286, 736, 831, 780, 738,
	718, 104, 685, 335, 336, 337, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 351,
	352, 353, 354, 355, 356, 357, 358, 359, 360, 659,
	362, 364, 646, 368, 319, 265, 370, 404, 881, 104,
	268, 105, 305, 810, 294, 231, 231, 331, 285, 78,
	378, 386, 388, 389, 390, 391, 392, 393, 394, 395,
	396, 397, 398, 399, 569, 552, 400, 137, 402, 233,
	224, 382, 550, 143, 282, 229, 232, 766, 767, 301,
	105, 413, 412, 289, 224, 291, 116, 43, 104, 383,
	298, 288, 381, 304, 109, 293, 890, 292, 334, 137,
	743, 744, 745, 742, 741, 740, 423, 287, 330, 407,
	514, 137, 405, 328, 274, 429, 509, 401, 105, 229,
	369, 521, 522, 414, 361, 523, 566, 232, 840, 265,
	839, 812, 307, 527, 269, 108, 531, 116, 224, 104,
	301, 228, 234, 271, 736, 270, 866, 738, 248, 416,
	229, 830, 766, 767, 133, 283, 219, 111, 215, 549,
	183, 427, 182, 181, 230, 135, 232, 105, 134, 4,
	130, 112, 918, 231, 516, 811, 116, 533, 104, 267,
	901, 418, 419, 559, 900, 150, 863, 605, 558, 885,
	8, 7, 848, 819, 517, 813, 806, 763, 508, 750,
	518, 714, 515, 712, 842, 133, 765, 418, 111, 419,
	419, 418, 710, 708, 562, 705, 553, 231, 105, 548,
	305, 538, 536, 535, 384, 6, 5, 372, 269, 542,
	568, 326, 578, 539, 579, 557, 575, 580, 581, 573,
	560, 556, 577, 325, 133, 324, 295, 111, 231, 805,
	802, 645, 333, 666, 800, 759, 586, 105, 606, 907,
	224, 590, 329, 224, 570, 787, 884, 327, 406, 367,
	857, 541, 534, 544, 116, 855, 216, 607, 801, 254,
	604, 534, 610, 788, 420, 534, 306, 534, 781, 731,
	674, 585, 113, 574, 300, 154, 156, 155, 184, 417,
	288, 904, 593, 303, 513, 303, 262, 589, 116, 116,
	261, 430, 510, 411, 116, 179, 609, 180, 152, 153,
	157, 159, 158, 171, 172, 169, 170, 177, 173, 174,
	175, 176, 167, 168, 161, 162, 160, 163, 165, 166,
	218, 178, 255, 256, 425, 113, 116, 700, 116, 115,
	526, 116, 377, 164, 902, 288, 634, 629, 667, 668,
	628, 572, 545, 667, 668, 137, 614, 380, 217, 743,
	744, 745, 742, 741, 740, 122, 123, 133, 143, 543,
	111, 644, 133, 625, 303, 111, 652, 784, 145, 618,
	254, 903, 303, 303, 318, 420, 611, 861, 254, 623,
	722, 723, 147, 640, 322, 642, 635, 617, 615, 254,
	421, 4, 647, 736, 133, 613, 738, 111, 654, 121,
	76, 77, 299, 688, 254, 232, 638, 145, 671, 277,
	672, 669, 8, 7, 577, 116, 547, 104, 892, 683,
	641, 656, 119, 109, 540, 302, 794, 793, 860, 252,
	649, 754, 525, 255, 256, 829, 689, 679, 229, 229,
	524, 255, 256, 792, 305, 670, 632, 6, 5, 853,
	521, 190, 255, 256, 422, 531, 743, 744, 745, 742,
	741, 740, 827, 653, 108, 229, 278, 255, 256, 147,
	116, 706, 602, 128, 743, 744, 745, 742, 741, 740,
	701, 713, 116, 133, 260, 224, 111, 697, 669, 720,
	695, 546, 693, 230, 724, 544, 105, 544, 704, 534,
	736, 669, 852, 738, 711, 375, 373, 730, 669, 122,
	123, 194, 751, 752, 600, 193, 224, 747, 736, 192,
	254, 738, 746, 186, 719, 420, 229, 164, 729, 699,
	755, 748, 279, 280, 703, 632, 231, 231, 189, 322,
	728, 297, 797, 612, 195, 196, 406, 616, 756, 224,
	598, 254, 601, 599, 761, 753, 281, 814, 766, 767,
	732, 758, 760, 231, 769, 766, 767, 824, 669, 768,
	773, 770, 775, 45, 795, 764, 796, 785, 577, 789,
	544, 798, 254, 255, 256, 544, 544, 251, 777, 749,
	229, 743, 744, 745, 742, 741, 740, 808, 197, 199,
	198, 699, 385, 632, 187, 178, 816, 868, 804, 862,
	682, 191, 833, 822, 255, 256, 825, 164, 588, 332,
	815, 308, 821, 716, 231, 633, 163, 165, 166, 832,
	178, 675, 367, 651, 757, 702, 828, 118, 726, 624,
	619, 847, 164, 564, 554, 255, 256, 409, 849, 841,
	1, 37, 544, 737, 544, 846, 734, 735, 803, 684,
	379, 661, 844, 851, 865, 529, 669, 221, 519, 856,
	858, 869, 773, 365, 878, 864, 837, 882, 883, 871,
	144, 790, 877, 141, 321, 148, 834, 888, 231, 889,
	658, 820, 250, 893, 838, 887, 643, 926, 223, 896,
	42, 41, 894, 15, 14, 878, 897, 597, 266, 544,
	895, 48, 899, 877, 47, 107, 906, 49, 82, 80,
	717, 71, 247, 61, 264, 60, 876, 910, 875, 874,
	873, 733, 44, 911, 663, 721, 655, 843, 917, 920,
	913, 637, 916, 915, 577, 309, 117, 921, 296, 3,
	922, 433, 786, 727, 669, 0, 0, 925, 0, 0,
	929, 87, 88, 89, 90, 91, 0, 0, 0, 0,
	73, 74, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 776, 173, 174, 175, 176, 167,
	168, 161, 162, 160, 163, 165, 166, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 55, 56, 0, 0,
	164, 0, 57, 0, 58, 53, 54, 62, 63, 64,
	65, 66, 67, 68, 70, 0, 51, 84, 52, 0,
	0, 0, 0, 24, 76, 77, 0, 0, 0, 69,
	46, 92, 93, 35, 0, 104, 0, 26, 0, 0,
	0, 109, 25, 17, 16, 0, 18, 0, 29, 0,
	30, 0, 0, 19, 0, 0, 0, 20, 21, 34,
	36, 12, 22, 32, 0, 0, 33, 11, 0, 23,
	0, 28, 85, 86, 9, 38, 39, 40, 0, 0,
	0, 50, 108, 0, 101, 97, 98, 99, 94, 95,
	0, 0, 0, 0, 0, 0, 102, 0, 0, 0,
	0, 10, 100, 96, 111, 0, 103, 72, 13, 627,
	31, 59, 0, 0, 105, 87, 88, 89, 90, 91,
	0, 0, 0, 0, 73, 74, 179, 75, 180, 152,
	153, 157, 159, 158, 171, 172, 169, 170, 177, 173,
	174, 175, 176, 167, 168, 161, 162, 160, 163, 165,
	166, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	55, 56, 0, 0, 164, 0, 57, 0, 58, 53,
	54, 62, 63, 64, 65, 66, 67, 68, 70, 0,
	51, 84, 52, 0, 0, 0, 0, 24, 76, 77,
	0, 0, 0, 69, 46, 92, 93, 35, 0, 104,
	0, 26, 0, 0, 0, 109, 25, 17, 16, 0,
	18, 0, 29, 0, 30, 0, 0, 19, 0, 0,
	0, 20, 21, 34, 36, 12, 22, 32, 0, 0,
	33, 11, 0, 23, 0, 28, 85, 86, 9, 38,
	39, 40, 0, 0, 0, 50, 108, 0, 101, 97,
	98, 99, 94, 95, 0, 0, 0, 0, 0, 0,
	102, 0, 0, 0, 0, 10, 100, 96, 111, 0,
	103, 72, 13, 537, 31, 59, 0, 0, 105, 87,
	88, 89, 90, 91, 0, 0, 0, 0, 73, 74,
	0, 75, 180, 152, 153, 157, 159, 158, 171, 172,
	169, 170, 177, 173, 174, 175, 176, 167, 168, 161,
	162, 160, 163, 165, 166, 0, 178, 0, 0, 0,
	0, 0, 0, 0, 55, 56, 0, 0, 164, 0,
	57, 0, 58, 53, 54, 62, 63, 64, 65, 66,
	67, 68, 70, 0, 51, 84, 52, 0, 0, 0,
	0, 24, 76, 77, 0, 0, 0, 69, 46, 92,
	93, 35, 0, 104, 0, 26, 0, 0, 0, 109,
	25, 17, 16, 0, 18, 0, 29, 0, 30, 0,
	0, 19, 0, 0, 0, 20, 21, 34, 36, 12,
	22, 32, 0, 0, 33, 11, 0, 23, 0, 28,
	85, 86, 9, 38, 39, 40, 0, 0, 0, 50,
	108, 0, 101, 97, 98, 99, 94, 95, 161, 162,
	160, 163, 165, 166, 102, 178, 0, 0, 0, 10,
	100, 96, 111, 0, 103, 72, 13, 164, 31, 59,
	0, 0, 105, 87, 88, 89, 90, 91, 0, 0,
	0, 0, 73, 74, 0, 75, 153, 157, 159, 158,
	171, 172, 169, 170, 177, 173, 174, 175, 176, 167,
	168, 161, 162, 160, 163, 165, 166, 0, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 56,
	164, 0, 0, 0, 57, 0, 58, 53, 54, 62,
	63, 64, 65, 66, 67, 68, 70, 0, 51, 84,
	52, 0, 0, 0, 0, 24, 76, 77, 0, 0,
	0, 69, 46, 92, 93, 35, 0, 104, 0, 26,
	0, 0, 0, 109, 25, 17, 16, 0, 18, 0,
	29, 0, 30, 0, 0, 19, 0, 0, 0, 20,
	21, 34, 36, 0, 22, 32, 0, 0, 33, 0,
	0, 23, 0, 28, 85, 86, 316, 38, 39, 40,
	0, 0, 0, 50, 108, 0, 101, 97, 98, 99,
	94, 95, 0, 0, 0, 0, 0, 0, 102, 0,
	0, 0, 0, 133, 100, 96, 111, 0, 103, 72,
	13, 930, 31, 59, 0, 0, 105, 87, 88, 89,
	90, 91, 0, 0, 0, 0, 73, 74, 0, 75,
	0, 157, 159, 158, 171, 172, 169, 170, 177, 173,
	174, 175, 176, 167, 168, 161, 162, 160, 163, 165,
	166, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 56, 164, 0, 0, 0, 57, 0,
	58, 53, 54, 62, 63, 64, 65, 66, 67, 68,
	70, 0, 51, 84, 52, 0, 0, 0, 0, 24,
	76, 77, 0, 0, 0, 69, 46, 92, 93, 35,
	0, 104, 0, 26, 0, 0, 0, 109, 25, 17,
	16, 0, 18, 0, 29, 0, 30, 0, 0, 19,
	0, 0, 0, 20, 21, 34, 36, 0, 22, 32,
	0, 0, 33, 0, 0, 23, 0, 28, 85, 86,
	316, 38, 39, 40, 0, 0, 0, 50, 108, 0,
	101, 97, 98, 99, 94, 95, 0, 0, 0, 0,
	0, 0, 102, 0, 0, 0, 0, 133, 100, 96,
	111, 0, 103, 72, 13, 923, 31, 59, 0, 0,
	105, 87, 88, 89, 90, 91, 0, 0, 0, 0,
	73, 74, 0, 75, 0, 0, 159, 158, 171, 172,
	169, 170, 177, 173, 174, 175, 176, 167, 168, 161,
	162, 160, 163, 165, 166, 0, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 56, 164, 0,
	0, 0, 57, 0, 58, 53, 54, 62, 63, 64,
	65, 66, 67, 68, 70, 0, 51, 84, 52, 0,
	0, 0, 0, 24, 76, 77, 0, 0, 0, 69,
	46, 92, 93, 35, 0, 104, 0, 26, 0, 0,
	0, 109, 25, 17, 16, 0, 18, 0, 29, 0,
	30, 0, 0, 19, 0, 0, 0, 20, 21, 34,
	36, 0, 22, 32, 0, 0, 33, 0, 0, 23,
	0, 28, 85, 86, 316, 38, 39, 40, 0, 0,
	0, 50, 108, 0, 101, 97, 98, 99, 94, 95,
	0, 0, 0, 0, 0, 0, 102, 0, 0, 0,
	0, 133, 100, 96, 111, 0, 103, 72, 13, 919,
	31, 59, 0, 0, 105, 87, 88, 89, 90, 91,
	0, 0, 0, 0, 73, 74, 0, 75, 158, 171,
	172, 169, 170, 177, 173, 174, 175, 176, 167, 168,
	161, 162, 160, 163, 165, 166, 0, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	55, 56, 0, 0, 0, 0, 57, 0, 58, 53,
	54, 62, 63, 64, 65, 66, 67, 68, 70, 0,
	51, 84, 52, 0, 0, 0, 0, 24, 76, 77,
	0, 0, 0, 69, 46, 92, 93, 35, 0, 104,
	0, 26, 0, 0, 0, 109, 25, 17, 16, 0,
	18, 0, 29, 0, 30, 0, 0, 19, 0, 0,
	0, 20, 21, 34, 36, 0, 22, 32, 0, 0,
	33, 0, 0, 23, 0, 28, 85, 86, 316, 38,
	39, 40, 0, 0, 0, 50, 108, 0, 101, 97,
	98, 99, 94, 95, 0, 0, 0, 0, 0, 0,
	102, 0, 0, 0, 0, 133, 100, 96, 111, 0,
	103, 72, 13, 909, 31, 59, 0, 0, 105, 87,
	88, 89, 90, 91, 0, 0, 0, 0, 73, 74,
	0, 75, 171, 172, 169, 170, 177, 173, 174, 175,
	176, 167, 168, 161, 162, 160, 163, 165, 166, 0,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 164, 0, 55, 56, 0, 0, 0, 0,
	57, 0, 58, 53, 54, 62, 63, 64, 65, 66,
	67, 68, 70, 0, 51, 84, 52, 0, 0, 0,
	0, 24, 76, 77, 0, 0, 0, 69, 46, 92,
	93, 35, 0, 104, 0, 26, 0, 0, 0, 109,
	25, 17, 16, 0, 18, 0, 29, 0, 30, 0,
	0, 19, 0, 0, 0, 20, 21, 34, 36, 0,
	22, 32, 0, 0, 33, 0, 0, 23, 0, 28,
	85, 86, 316, 38, 39, 40, 0, 0, 0, 50,
	108, 0, 101, 97, 98, 99, 94, 95, 0, 0,
	0, 0, 0, 0, 102, 0, 0, 0, 0, 133,
	100, 96, 111, 0, 103, 72, 13, 908, 31, 59,
	0, 0, 105, 87, 88, 89, 90, 91, 0, 0,
	0, 0, 73, 74, 0, 75, 167, 168, 161, 162,
	160, 163, 165, 166, 0, 178, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 164, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 56,
	0, 0, 0, 0, 57, 0, 58, 53, 54, 62,
	63, 64, 65, 66, 67, 68, 70, 0, 51, 84,
	52, 0, 0, 0, 0, 24, 76, 77, 0, 0,
	0, 69, 46, 92, 93, 35, 0, 104, 0, 26,
	0, 0, 0, 109, 25, 17, 16, 0, 18, 905,
	29, 0, 30, 0, 0, 19, 0, 0, 0, 20,
	21, 34, 36, 0, 22, 32, 0, 0, 33, 0,
	0, 23, 0, 28, 85, 86, 316, 38, 39, 40,
	0, 0, 0, 50, 108, 0, 101, 97, 98, 99,
	94, 95, 0, 0, 0, 0, 0, 0, 102, 0,
	0, 0, 0, 133, 100, 96, 111, 0, 103, 72,
	13, 0, 31, 59, 0, 0, 105, 87, 88, 89,
	90, 91, 0, 0, 0, 0, 73, 74, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 200, 201, 202, 203, 205, 206,
	207, 208, 209, 210, 211, 212, 204, 0, 0, 0,
	0, 0, 55, 56, 0, 0, 0, 0, 57, 0,
	58, 53, 54, 62, 63, 64, 65, 66, 67, 68,
	70, 0, 51, 84, 52, 213, 214, 0, 0, 24,
	76, 77, 0, 0, 0, 69, 46, 92, 93, 35,
	0, 104, 0, 26, 0, 0, 0, 109, 25, 17,
	16, 0, 18, 0, 29, 0, 30, 0, 0, 19,
	0, 0, 0, 20, 21, 34, 36, 0, 22, 32,
	0, 0, 33, 0, 0, 23, 0, 28, 85, 86,
	316, 38, 39, 40, 0, 0, 0, 50, 108, 0,
	101, 97, 98, 99, 94, 95, 0, 0, 0, 0,
	0, 0, 102, 0, 0, 0, 0, 133, 100, 96,
	111, 0, 103, 72, 13, 854, 31, 59, 0, 0,
	105, 87, 88, 89, 90, 91, 0, 0, 0, 0,
	73, 74, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 56, 0, 0,
	0, 0, 57, 0, 58, 53, 54, 62, 63, 64,
	65, 66, 67, 68, 70, 0, 51, 84, 52, 0,
	0, 0, 0, 24, 76, 77, 0, 0, 0, 69,
	46, 92, 93, 35, 0, 104, 0, 26, 0, 0,
	0, 109, 25, 17, 16, 0, 18, 0, 29, 850,
	30, 0, 0, 19, 0, 0, 0, 20, 21, 34,
	36, 0, 22, 32, 0, 0, 33, 0, 0, 23,
	0, 28, 85, 86, 316, 38, 39, 40, 0, 0,
	0, 50, 108, 0, 101, 97, 98, 99, 94, 95,
	0, 0, 0, 0, 0, 0, 102, 0, 0, 0,
	0, 133, 100, 96, 111, 0, 103, 72, 13, 0,
	31, 59, 0, 0, 105, 87, 88, 89, 90, 91,
	0, 0, 0, 0, 73, 74, 0, 75, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 56, 0, 0, 0, 0, 57, 0, 58, 53,
	54, 62, 63, 64, 65, 66, 67, 68, 70, 0,
	51, 84, 52, 0, 0, 0, 0, 24, 76, 77,
	0, 0, 0, 69, 46, 92, 93, 35, 0, 104,
	0, 26, 0, 0, 0, 109, 25, 17, 16, 0,
	18, 0, 29, 0, 30, 779, 0, 19, 0, 0,
	0, 20, 21, 34, 36, 0, 22, 32, 0, 0,
	33, 0, 0, 23, 0, 28, 85, 86, 316, 38,
	39, 40, 0, 0, 0, 50, 108, 0, 101, 97,
	98, 99, 94, 95, 0, 0, 0, 0, 0, 0,
	102, 0, 0, 0, 0, 133, 100, 96, 111, 0,
	103, 72, 13, 0, 31, 59, 0, 0, 105, 87,
	88, 89, 90, 91, 0, 0, 0, 0, 73, 74,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 56, 0, 0, 0, 0,
	57, 0, 58, 53, 54, 62, 63, 64, 65, 66,
	67, 68, 70, 0, 51, 84, 52, 0, 0, 0,
	0, 24, 76, 77, 0, 0, 0, 69, 46, 92,
	93, 35, 0, 104, 0, 26, 0, 0, 0, 109,
	25, 17, 16, 762, 18, 0, 29, 0, 30, 0,
	0, 19, 0, 0, 0, 20, 21, 34, 36, 0,
	22, 32, 0, 0, 33, 0, 0, 23, 0, 28,
	85, 86, 316, 38, 39, 40, 0, 0, 0, 50,
	108, 0, 101, 97, 98, 99, 94, 95, 0, 0,
	0, 0, 0, 0, 102, 0, 0, 0, 0, 133,
	100, 96, 111, 0, 103, 72, 13, 0, 31, 59,
	0, 0, 105, 87, 88, 89, 90, 91, 0, 0,
	0, 0, 73, 74, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 56,
	0, 0, 0, 0, 57, 0, 58, 53, 54, 62,
	63, 64, 65, 66, 67, 68, 70, 0, 51, 84,
	52, 0, 0, 0, 678, 24, 76, 77, 0, 0,
	0, 69, 46, 92, 93, 35, 0, 104, 0, 26,
	0, 0, 0, 109, 25, 17, 16, 0, 18, 0,
	29, 0, 30, 0, 0, 19, 0, 0, 0, 20,
	21, 34, 36, 0, 22, 32, 0, 0, 33, 0,
	0, 23, 0, 28, 85, 86, 316, 38, 39, 40,
	0, 0, 0, 50, 108, 0, 101, 97, 98, 99,
	94, 95, 0, 0, 0, 0, 0, 0, 102, 0,
	0, 0, 0, 133, 100, 96, 111, 0, 103, 72,
	13, 0, 31, 59, 0, 0, 105, 87, 88, 89,
	90, 91, 0, 0, 0, 0, 73, 74, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 56, 0, 0, 0, 0, 57, 0,
	58, 53, 54, 62, 63, 64, 65, 66, 67, 68,
	70, 0, 51, 84, 52, 0, 0, 0, 0, 24,
	76, 77, 0, 0, 0, 69, 46, 92, 93, 35,
	0, 104, 0, 26, 0, 0, 0, 109, 25, 17,
	16, 0, 18, 0, 29, 0, 30, 0, 0, 19,
	0, 0, 0, 20, 21, 34, 36, 0, 22, 32,
	0, 0, 33, 0, 0, 23, 0, 28, 85, 86,
	316, 38, 39, 40, 0, 0, 0, 50, 108, 0,
	101, 97, 98, 99, 94, 95, 0, 0, 0, 0,
	0, 0, 102, 0, 0, 0, 0, 133, 100, 96,
	111, 0, 103, 72, 13, 567, 31, 59, 0, 0,
	105, 87, 88, 89, 90, 91, 0, 0, 0, 0,
	73, 74, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 56, 0, 0,
	0, 0, 57, 0, 58, 53, 54, 62, 63, 64,
	65, 66, 67, 68, 70, 0, 51, 84, 52, 0,
	0, 0, 0, 24, 76, 77, 0, 0, 0, 69,
	46, 92, 93, 35, 0, 104, 0, 26, 0, 0,
	0, 109, 25, 17, 16, 0, 18, 0, 29, 0,
	30, 0, 0, 19, 0, 0, 0, 20, 21, 34,
	36, 0, 22, 32, 0, 0, 33, 0, 0, 23,
	0, 28, 85, 86, 316, 38, 39, 40, 0, 0,
	0, 50, 108, 0, 101, 97, 98, 99, 94, 95,
	0, 0, 0, 0, 0, 0, 102, 0, 0, 0,
	0, 133, 100, 96, 111, 0, 103, 72, 13, 310,
	31, 59, 0, 0, 105, 87, 88, 89, 90, 91,
	0, 0, 0, 0, 73, 74, 0, 75, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 56, 0, 0, 0, 0, 57, 0, 58, 53,
	54, 62, 63, 64, 65, 66, 67, 68, 70, 0,
	51, 84, 52, 0, 0, 0, 0, 24, 76, 77,
	0, 0, 0, 69, 46, 92, 93, 35, 0, 104,
	0, 26, 0, 0, 0, 109, 25, 17, 16, 0,
	18, 0, 29, 0, 30, 0, 0, 19, 0, 0,
	0, 20, 21, 34, 36, 0, 22, 32, 0, 0,
	33, 0, 0, 23, 0, 28, 85, 86, 316, 38,
	39, 40, 0, 0, 0, 50, 108, 0, 101, 97,
	98, 99, 94, 95, 0, 0, 0, 0, 0, 0,
	102, 0, 0, 0, 0, 133, 100, 96, 111, 0,
	103, 72, 13, 0, 31, 59, 156, 155, 105, 441,
	442, 443, 444, 445, 0, 446, 447, 448, 484, 485,
	0, 0, 0, 0, 0, 179, 0, 180, 152, 153,
	157, 159, 158, 171, 172, 169, 170, 177, 173, 174,
	175, 176, 167, 168, 161, 162, 160, 163, 165, 166,
	0, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 449, 0, 164, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 450, 451, 0, 454, 455,
	456, 435, 436, 437, 438, 439, 440, 452, 453, 0,
	0, 432, 0, 104, 0, 0, 0, 0, 0, 0,
	457, 458, 459, 460, 461, 462, 463, 464, 465, 466,
	467, 487, 488, 489, 490, 491, 479, 480, 481, 482,
	483, 468, 469, 470, 471, 472, 473, 474, 475, 476,
	477, 478, 0, 499, 497, 498, 494, 495, 0, 486,
	492, 493, 500, 501, 503, 502, 504, 505, 0, 0,
	0, 0, 0, 87, 88, 89, 90, 91, 0, 496,
	507, 506, 73, 74, 0, 75, 431, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	774, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 56,
	0, 0, 0, 0, 57, 0, 58, 53, 54, 62,
	63, 64, 65, 66, 67, 68, 70, 0, 51, 84,
	52, 0, 0, 0, 0, 24, 0, 0, 0, 0,
	0, 69, 46, 92, 93, 35, 0, 104, 0, 26,
	0, 0, 0, 109, 25, 17, 16, 0, 18, 0,
	29, 0, 30, 0, 0, 19, 0, 0, 0, 20,
	21, 34, 132, 0, 22, 32, 0, 0, 33, 0,
	0, 23, 0, 28, 85, 86, 0, 0, 0, 0,
	0, 0, 0, 50, 108, 0, 101, 97, 98, 99,
	94, 95, 0, 0, 0, 0, 0, 0, 102, 0,
	0, 0, 0, 133, 100, 96, 111, 0, 103, 72,
	13, 0, 31, 59, 0, 0, 105, 87, 88, 89,
	90, 91, 0, 0, 0, 0, 73, 74, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 845, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 56, 0, 0, 0, 0, 57, 0,
	58, 53, 54, 62, 63, 64, 65, 66, 67, 68,
	70, 0, 51, 84, 52, 0, 0, 0, 0, 24,
	0, 0, 0, 0, 0, 69, 46, 92, 93, 35,
	0, 104, 0, 26, 0, 0, 0, 109, 25, 17,
	16, 0, 18, 0, 29, 0, 30, 0, 0, 19,
	0, 0, 0, 20, 21, 34, 132, 0, 22, 32,
	0, 0, 33, 0, 0, 23, 0, 28, 85, 86,
	0, 0, 0, 0, 0, 0, 0, 50, 108, 0,
	101, 97, 98, 99, 94, 95, 0, 0, 0, 0,
	0, 0, 102, 0, 0, 0, 0, 133, 100, 96,
	111, 0, 103, 72, 13, 0, 31, 59, 0, 0,
	105, 87, 88, 89, 90, 91, 0, 0, 0, 0,
	73, 74, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 680, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 56, 0, 0,
	0, 0, 57, 0, 58, 53, 54, 62, 63, 64,
	65, 66, 67, 68, 70, 0, 51, 84, 52, 0,
	0, 0, 0, 24, 0, 0, 0, 0, 0, 69,
	46, 92, 93, 35, 0, 104, 0, 26, 0, 0,
	0, 109, 25, 17, 16, 0, 18, 0, 29, 0,
	30, 0, 0, 19, 0, 0, 0, 20, 21, 34,
	132, 0, 22, 32, 0, 0, 33, 0, 0, 23,
	0, 28, 85, 86, 0, 0, 0, 0, 0, 0,
	0, 50, 108, 0, 101, 97, 98, 99, 94, 95,
	0, 0, 0, 0, 0, 0, 102, 0, 0, 0,
	0, 133, 100, 96, 111, 0, 103, 72, 13, 0,
	31, 59, 0, 0, 105, 87, 88, 89, 90, 91,
	0, 0, 0, 0, 73, 74, 0, 75, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 657, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 56, 0, 0, 0, 0, 57, 0, 58, 53,
	54, 62, 63, 64, 65, 66, 67, 68, 70, 0,
	51, 84, 52, 0, 0, 0, 0, 24, 0, 0,
	0, 0, 0, 69, 46, 92, 93, 35, 0, 104,
	0, 26, 0, 0, 0, 109, 25, 17, 16, 0,
	18, 0, 29, 0, 30, 0, 0, 19, 0, 0,
	0, 20, 21, 34, 132, 0, 22, 32, 0, 0,
	33, 0, 0, 23, 0, 28, 85, 86, 0, 0,
	0, 0, 0, 0, 0, 50, 108, 0, 101, 97,
	98, 99, 94, 95, 0, 0, 0, 0, 0, 0,
	102, 0, 0, 0, 0, 133, 100, 96, 111, 0,
	103, 72, 13, 0, 31, 59, 0, 0, 105, 87,
	88, 89, 90, 91, 0, 0, 0, 0, 73, 74,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 639, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 56, 0, 0, 0, 0,
	57, 0, 58, 53, 54, 62, 63, 64, 65, 66,
	67, 68, 70, 0, 51, 84, 52, 0, 0, 0,
	0, 24, 0, 0, 0, 0, 0, 69, 46, 92,
	93, 35, 0, 104, 0, 26, 0, 0, 0, 109,
	25, 17, 16, 0, 18, 0, 29, 0, 30, 0,
	0, 19, 0, 0, 0, 20, 21, 34, 132, 0,
	22, 32, 0, 0, 33, 0, 0, 23, 0, 28,
	85, 86, 0, 0, 0, 0, 0, 0, 0, 50,
	108, 0, 101, 97, 98, 99, 94, 95, 0, 0,
	0, 0, 0, 0, 102, 0, 0, 0, 0, 133,
	100, 96, 111, 0, 103, 72, 13, 155, 31, 59,
	0, 0, 105, 441, 442, 443, 444, 445, 0, 446,
	447, 448, 484, 485, 0, 179, 0, 180, 152, 153,
	157, 159, 158, 171, 172, 169, 170, 177, 173, 174,
	175, 176, 167, 168, 161, 162, 160, 163, 165, 166,
	0, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 0, 449, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 450,
	451, 0, 454, 455, 456, 435, 436, 437, 438, 439,
	440, 452, 453, 0, 0, 880, 0, 0, 0, 0,
	0, 0, 0, 0, 457, 458, 459, 460, 461, 462,
	463, 464, 465, 466, 467, 487, 488, 489, 490, 491,
	479, 480, 481, 482, 483, 468, 469, 470, 471, 472,
	473, 474, 475, 476, 477, 478, 0, 499, 497, 498,
	494, 495, 0, 486, 492, 493, 500, 501, 503, 502,
	504, 505, 441, 442, 443, 444, 445, 426, 446, 447,
	448, 484, 485, 879, 507, 506, 111, 0, 0, 0,
	0, 898, 179, 0, 180, 152, 153, 157, 159, 158,
	171, 172, 169, 170, 177, 173, 174, 175, 176, 167,
	168, 161, 162, 160, 163, 165, 166, 0, 178, 0,
	0, 0, 0, 0, 449, 0, 0, 0, 0, 0,
	164, 0, 0, 0, 0, 0, 0, 0, 450, 451,
	0, 454, 455, 456, 435, 436, 437, 438, 439, 440,
	452, 453, 0, 0, 880, 0, 0, 0, 0, 0,
	0, 0, 0, 457, 458, 459, 460, 461, 462, 463,
	464, 465, 466, 467, 487, 488, 489, 490, 491, 479,
	480, 481, 482, 483, 468, 469, 470, 471, 472, 473,
	474, 475, 476, 477, 478, 0, 499, 497, 498, 494,
	495, 0, 486, 492, 493, 500, 501, 503, 502, 504,
	505, 154, 156, 155, 0, 0, 0, 87, 88, 89,
	90, 91, 879, 507, 506, 111, 73, 74, 0, 75,
	870, 179, 0, 180, 152, 153, 157, 159, 158, 171,
	172, 169, 170, 177, 173, 174, 175, 176, 167, 168,
	161, 162, 160, 163, 165, 166, 0, 178, 0, 0,
	0, 0, 55, 56, 0, 0, 0, 0, 57, 164,
	58, 53, 54, 62, 63, 64, 65, 66, 67, 68,
	70, 0, 51, 84, 52, 0, 0, 0, 0, 24,
	0, 0, 0, 0, 0, 69, 46, 92, 93, 35,
	0, 104, 0, 26, 0, 0, 0, 109, 25, 17,
	16, 0, 18, 0, 29, 0, 30, 0, 0, 19,
	0, 0, 0, 20, 21, 34, 132, 0, 22, 32,
	0, 0, 33, 0, 0, 23, 0, 28, 85, 86,
	0, 0, 0, 0, 0, 0, 0, 50, 108, 0,
	101, 97, 98, 99, 94, 95, 0, 0, 0, 0,
	0, 0, 102, 0, 0, 0, 707, 133, 100, 96,
	111, 0, 103, 72, 13, 0, 31, 59, 0, 0,
	105, 441, 442, 443, 444, 445, 0, 446, 447, 448,
	484, 485, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 449, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 450, 451, 0,
	454, 455, 456, 435, 436, 437, 438, 439, 440, 452,
	453, 0, 0, 432, 0, 0, 0, 0, 0, 0,
	0, 0, 457, 458, 459, 460, 461, 462, 463, 464,
	465, 466, 467, 487, 488, 489, 490, 491, 479, 480,
	481, 482, 483, 468, 469, 470, 471, 472, 473, 474,
	475, 476, 477, 478, 0, 499, 497, 498, 494, 495,
	0, 486, 492, 493, 500, 501, 503, 502, 504, 505,
	441, 442, 443, 444, 445, 0, 446, 447, 448, 484,
	485, 496, 507, 506, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 450, 451, 0, 454,
	455, 456, 743, 744, 745, 742, 741, 740, 452, 453,
	0, 0, 914, 0, 0, 0, 0, 0, 0, 0,
	0, 457, 458, 459, 460, 461, 462, 463, 464, 465,
	466, 467, 487, 488, 489, 490, 491, 479, 480, 481,
	482, 483, 468, 469, 470, 471, 472, 473, 474, 475,
	476, 477, 478, 0, 499, 497, 498, 494, 495, 0,
	486, 492, 493, 500, 501, 503, 502, 504, 505, 0,
	0, 0, 0, 0, 87, 88, 89, 90, 91, 0,
	496, 507, 506, 73, 74, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	56, 0, 0, 0, 0, 57, 0, 58, 53, 54,
	62, 63, 64, 65, 66, 67, 68, 70, 0, 51,
	84, 52, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 69, 0, 92, 93, 116, 0, 104, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 86, 0, 0, 0,
	0, 0, 0, 0, 50, 108, 0, 101, 97, 98,
	99, 94, 95, 0, 0, 0, 0, 0, 0, 102,
	0, 0, 0, 0, 133, 100, 96, 111, 532, 103,
	72, 0, 0, 0, 59, 528, 0, 105, 87, 88,
	89, 90, 91, 0, 0, 0, 0, 73, 74, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 56, 0, 0, 0, 0, 57,
	0, 58, 53, 54, 62, 63, 64, 65, 66, 67,
	68, 70, 0, 51, 84, 52, 0, 0, 0, 0,
	138, 0, 0, 0, 0, 0, 69, 0, 92, 93,
	116, 0, 104, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 0,
	0, 0, 0, 0, 87, 88, 89, 90, 91, 85,
	86, 0, 0, 73, 74, 0, 75, 0, 226, 108,
	0, 101, 97, 98, 99, 94, 95, 0, 0, 0,
	0, 0, 0, 102, 0, 0, 0, 0, 133, 100,
	96, 111, 0, 103, 72, 0, 0, 0, 59, 55,
	56, 105, 0, 0, 0, 57, 0, 58, 53, 54,
	62, 63, 64, 65, 66, 67, 68, 70, 0, 51,
	84, 52, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 69, 0, 92, 93, 116, 0, 104, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 0, 0, 0, 0, 0, 0,
	87, 88, 89, 90, 91, 85, 86, 0, 0, 73,
	74, 0, 75, 0, 50, 108, 0, 101, 97, 98,
	99, 94, 95, 0, 0, 0, 0, 0, 0, 102,
	0, 0, 0, 591, 133, 100, 96, 111, 532, 103,
	72, 0, 0, 0, 59, 55, 56, 105, 0, 0,
	0, 57, 0, 58, 53, 54, 62, 63, 64, 65,
	66, 67, 68, 70, 0, 51, 84, 52, 0, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 69, 0,
	92, 93, 116, 0, 104, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 87, 88, 89, 90,
	91, 85, 86, 0, 0, 73, 74, 0, 75, 0,
	592, 108, 0, 101, 97, 98, 99, 94, 95, 0,
	0, 0, 0, 0, 0, 102, 0, 0, 0, 0,
	133, 100, 96, 111, 0, 103, 72, 0, 0, 0,
	59, 55, 56, 105, 0, 0, 0, 57, 0, 58,
	53, 54, 62, 63, 64, 65, 66, 67, 68, 70,
	0, 51, 84, 52, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 69, 0, 92, 93, 116, 424,
	104, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 87, 88, 89, 90, 91, 85, 86, 0,
	0, 73, 74, 0, 75, 0, 50, 108, 0, 101,
	97, 98, 99, 94, 95, 0, 0, 0, 0, 0,
	0, 102, 0, 0, 0, 387, 133, 100, 96, 111,
	0, 103, 72, 0, 0, 0, 59, 55, 56, 105,
	0, 0, 0, 57, 0, 58, 53, 54, 62, 63,
	64, 65, 66, 67, 68, 70, 0, 51, 84, 52,
	0, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	69, 0, 92, 93, 116, 0, 104, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 0, 0, 0, 0, 0, 0, 87, 88,
	89, 90, 91, 85, 86, 0, 0, 73, 74, 0,
	75, 0, 50, 108, 0, 101, 97, 98, 99, 94,
	95, 0, 0, 0, 0, 363, 0, 102, 0, 0,
	0, 0, 133, 100, 96, 111, 0, 103, 72, 0,
	0, 0, 59, 55, 56, 105, 0, 0, 0, 57,
	0, 58, 53, 54, 62, 63, 64, 65, 66, 67,
	68, 70, 0, 51, 84, 52, 0, 0, 0, 0,
	138, 0, 0, 0, 0, 0, 69, 0, 92, 93,
	116, 0, 104, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 0,
	0, 0, 0, 0, 87, 88, 89, 90, 91, 85,
	86, 0, 0, 73, 74, 0, 75, 0, 50, 108,
	0, 101, 97, 98, 99, 94, 95, 0, 0, 0,
	0, 0, 0, 102, 0, 0, 0, 0, 133, 100,
	96, 111, 0, 103, 72, 0, 0, 0, 59, 55,
	56, 105, 0, 0, 0, 57, 0, 58, 53, 54,
	62, 63, 64, 65, 66, 67, 68, 70, 0, 51,
	84, 52, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 69, 0, 92, 93, 116, 0, 104, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 86, 0, 0, 0,
	0, 0, 0, 0, 50, 108, 0, 101, 97, 98,
	99, 94, 95, 0, 0, 0, 154, 156, 155, 102,
	0, 0, 0, 0, 133, 100, 96, 111, 0, 103,
	72, 0, 0, 0, 59, 0, 179, 105, 180, 152,
	153, 157, 159, 158, 171, 172, 169, 170, 177, 173,
	174, 175, 176, 167, 168, 161, 162, 160, 163, 165,
	166, 0, 178, 154, 156, 155, 0, 0, 0, 0,
	0, 0, 0, 0, 164, 0, 0, 0, 0, 0,
	0, 0, 0, 179, 0, 180, 152, 153, 157, 159,
	158, 171, 172, 169, 170, 177, 173, 174, 175, 176,
	167, 168, 161, 162, 160, 163, 165, 166, 0, 178,
	154, 156, 155, 0, 0, 0, 0, 0, 0, 0,
	0, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 180, 152, 153, 157, 159, 158, 171, 172,
	169, 170, 177, 173, 174, 175, 176, 167, 168, 161,
	162, 160, 163, 165, 166, 0, 178, 154, 156, 155,
	0, 0, 0, 0, 0, 0, 0, 0, 164, 0,
	0, 677, 0, 0, 0, 0, 0, 179, 0, 180,
	152, 153, 157, 159, 158, 171, 172, 169, 170, 177,
	173, 174, 175, 176, 167, 168, 161, 162, 160, 163,
	165, 166, 0, 178, 154, 156, 155, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 0, 0, 676, 0,
	0, 0, 0, 0, 179, 0, 180, 152, 153, 157,
	159, 158, 171, 172, 169, 170, 177, 173, 174, 175,
	176, 167, 168, 161, 162, 160, 163, 165, 166, 0,
	178, 154, 156, 155, 0, 0, 0, 0, 0, 0,
	0, 0, 164, 0, 0, 621, 0, 0, 0, 0,
	0, 179, 0, 180, 152, 153, 157, 159, 158, 171,
	172, 169, 170, 177, 173, 174, 175, 176, 167, 168,
	161, 162, 160, 163, 165, 166, 0, 178, 154, 156,
	155, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	0, 0, 620, 0, 0, 0, 0, 0, 179, 0,
	180, 152, 153, 157, 159, 158, 171, 172, 169, 170,
	177, 173, 174, 175, 176, 167, 168, 161, 162, 160,
	163, 165, 166, 0, 178, 154, 156, 155, 0, 0,
	0, 0, 0, 0, 0, 0, 164, 0, 0, 594,
	0, 0, 0, 0, 0, 179, 0, 180, 152, 153,
	157, 159, 158, 171, 172, 169, 170, 177, 173, 174,
	175, 176, 167, 168, 161, 162, 160, 163, 165, 166,
	0, 178, 154, 156, 155, 0, 0, 0, 0, 0,
	0, 0, 0, 164, 0, 0, 582, 0, 0, 0,
	0, 0, 179, 0, 180, 152, 153, 157, 159, 158,
	171, 172, 169, 170, 177, 173, 174, 175, 176, 167,
	168, 161, 162, 160, 163, 165, 166, 0, 178, 154,
	156, 155, 0, 0, 0, 0, 0, 0, 0, 0,
	164, 0, 0, 555, 0, 0, 0, 0, 0, 179,
	810, 180, 152, 153, 157, 159, 158, 171, 172, 169,
	170, 177, 173, 174, 175, 176, 167, 168, 161, 162,
	160, 163, 165, 166, 0, 178, 154, 156, 155, 0,
	0, 0, 0, 0, 0, 0, 0, 164, 0, 0,
	551, 0, 0, 0, 0, 0, 179, 0, 180, 152,
	153, 157, 159, 158, 171, 172, 169, 170, 177, 173,
	174, 175, 176, 167, 168, 161, 162, 160, 163, 165,
	166, 0, 178, 154, 156, 155, 0, 0, 0, 0,
	0, 0, 0, 0, 164, 0, 0, 415, 0, 0,
	0, 0, 0, 179, 0, 180, 152, 153, 157, 159,
	158, 171, 172, 169, 170, 177, 173, 174, 175, 176,
	167, 168, 161, 162, 160, 163, 165, 166, 0, 178,
	154, 156, 155, 0, 0, 0, 0, 0, 0, 0,
	0, 164, 811, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 180, 152, 153, 157, 159, 158, 171, 172,
	169, 170, 177, 173, 174, 175, 176, 167, 168, 161,
	162, 160, 163, 165, 166, 0, 178, 154, 156, 155,
	0, 0, 0, 0, 0, 0, 0, 0, 164, 371,
	0, 0, 0, 0, 0, 0, 0, 179, 0, 180,
	152, 153, 157, 159, 158, 171, 172, 169, 170, 177,
	173, 174, 175, 176, 167, 168, 161, 162, 160, 163,
	165, 166, 0, 178, 0, 154, 156, 155, 0, 0,
	0, 0, 0, 0, 0, 164, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 0, 180, 152, 153,
	157, 159, 158, 171, 172, 169, 170, 177, 173, 174,
	175, 176, 167, 168, 161, 162, 160, 163, 165, 166,
	0, 178, 154, 156, 155, 0, 0, 0, 0, 0,
	0, 0, 692, 164, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 0, 180, 152, 153, 157, 159, 158,
	171, 172, 169, 170, 177, 173, 174, 175, 176, 167,
	168, 161, 162, 160, 163, 165, 166, 0, 178, 0,
	154, 156, 155, 0, 0, 0, 0, 0, 0, 690,
	164, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 180, 152, 153, 157, 159, 158, 171, 172,
	169, 170, 177, 173, 174, 175, 176, 167, 168, 161,
	162, 160, 163, 165, 166, 0, 178, 154, 156, 155,
	0, 0, 0, 0, 0, 0, 0, 681, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 179, 0, 180,
	152, 153, 157, 159, 158, 171, 172, 169, 170, 177,
	173, 174, 175, 176, 167, 168, 161, 162, 160, 163,
	165, 166, 0, 178, 0, 154, 156, 155, 0, 0,
	0, 0, 0, 0, 622, 164, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 0, 180, 152, 153,
	157, 159, 158, 171, 172, 169, 170, 177, 173, 174,
	175, 176, 167, 168, 161, 162, 160, 163, 165, 166,
	0, 178, 154, 156, 155, 0, 0, 0, 0, 0,
	0, 0, 603, 164, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 561, 180, 152, 153, 157, 159, 158,
	171, 172, 169, 170, 177, 173, 174, 175, 176, 167,
	168, 161, 162, 160, 163, 165, 166, 0, 178, 0,
	565, 154, 156, 155, 0, 0, 410, 0, 0, 584,
	164, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 0, 180, 152, 153, 157, 159, 158, 171,
	172, 169, 170, 177, 173, 174, 175, 176, 167, 168,
	161, 162, 160, 163, 165, 166, 0, 178, 154, 156,
	155, 0, 0, 0, 0, 0, 0, 0, 0, 164,
	0, 0, 0, 0, 0, 0, 0, 0, 179, 0,
	180, 152, 153, 157, 159, 158, 171, 172, 169, 170,
	177, 173, 174, 175, 176, 167, 168, 161, 162, 160,
	163, 165, 166, 0, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 164,
}
var yyPact = [...]int{

	-1000, -1000, 1255, -1000, -1000, -1000, -1000, -1000, -1000, 157,
	338, 412, 557, -1000, -1000, -1000, 156, 4963, 154, 151,
	6270, 6270, 6270, 24, 464, 6270, -1000, 6923, 149, 148,
	146, -1000, 287, 6270, 607, 743, 671, 493, 603, 599,
	595, 641, 695, 2417, -1000, -1000, 144, -1000, -1000, 357,
	142, 5574, 6270, 150, 150, 6270, 6270, 6270, 6270, 6270,
	-1000, -1000, 6270, 6270, 6270, 6270, 6270, 6270, 6270, 134,
	6270, -1000, 664, 6270, 6270, 6270, -1000, -1000, -1000, 585,
	-1000, 307, 303, -1000, 201, 131, 129, 6270, 6270, 100,
	6270, 6270, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 486, 633, -1000, 63, 34, 34, 93, -1000,
	293, 554, -28, 554, 84, -1000, -1000, 233, 415, 281,
	438, 554, -1000, -1000, -1000, -1000, 273, -1000, 774, 3387,
	6270, 447, 671, 285, 6270, 6270, 232, 7398, 425, 230,
	218, 254, -1000, -1000, 249, 671, -1000, 772, 239, -1000,
	7398, -1000, 6270, 6270, 6270, 6270, 6270, 6270, 6270, 6270,
	6270, 6270, 6270, 6270, 6270, 6270, 6270, 6270, 6270, 6270,
	6270, 6270, 6270, 6270, 6270, 6270, 6270, 6270, 240, 6154,
	6270, 150, 6270, 557, -1000, 6876, 214, -1000, 590, -1000,
	589, -1000, 371, -1000, 386, 78, 4963, 75, 211, 741,
	6038, 6270, 6270, 6270, 6270, 6270, 6270, 6270, 6270, 6270,
	6270, 6270, 6270, -1000, -1000, 6270, 6270, 6270, 101, 5574,
	-57, 808, -1000, -1000, 7351, 150, 68, -1000, -1000, 585,
	6270, -1000, -1000, 5574, -1000, 629, 629, 719, 629, 6782,
	629, 629, 629, 629, 629, 629, 629, -1000, 6270, 629,
	289, 471, 602, -1000, 491, 5922, 150, 1076, 4812, 1076,
	6270, 3715, 3715, 34, -1000, 301, 191, 34, -1000, -1000,
	6270, 6270, 7398, 7398, 6270, 7398, 7398, 460, -1000, 452,
	341, 471, 6270, -1000, -1000, 5410, -1000, 5574, 583, 293,
	210, 293, -1000, -1000, 1091, -1000, 208, 220, 437, 554,
	-1000, 372, 351, 575, 429, -1000, -1000, 557, 6270, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 58, 6735, 51, -1000,
	203, 805, 7398, 6688, -1000, -1000, -1000, -1000, 24, -1000,
	551, -1000, 6270, -1000, 6270, 1402, 1566, 3705, 1076, 4665,
	1730, 2054, 1891, 744, 744, 744, 719, 629, 719, 719,
	1349, 1349, 912, 912, 912, 912, 2209, 2209, 2209, 2209,
	912, -1000, 7302, 6270, 1240, 804, -1000, -1000, 7255, 111,
	3223, -1000, -1000, -1000, 50, 371, 379, 410, 282, -1000,
	410, 6270, -1000, 6270, -1000, -1000, 1076, 6270, 1076, 1076,
	1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
	6641, -58, 7207, 34, -1000, 6270, -1000, -31, 771, 5574,
	5806, -1000, 5574, 6594, -65, -1000, -35, -1000, -1000, -1000,
	-1000, 634, 556, 7160, 268, 246, 6270, -67, 34, -1000,
	-1000, 6270, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 34, -1000,
	-1000, -1000, -1000, 24, 6270, 6270, 101, 24, 371, 801,
	-1000, 7398, 6547, 6500, -1000, -1000, -1000, 7112, -1000, 800,
	-1000, 7398, 6270, -36, -1000, -1000, 927, -1000, -1000, -1000,
	349, 350, -1000, 554, 348, 566, -1000, 345, -1000, 7398,
	-37, 4515, 6270, 6270, 6270, 370, -1000, -1000, 18, 7398,
	-1000, 6270, 1240, -38, 150, 499, 4351, -1000, 15, 373,
	379, -1000, 410, -1000, -1000, 279, 792, -1000, 6453, 6406,
	3059, 2054, 4187, -1000, -1000, -1000, 7065, 763, 6270, -1000,
	7398, 150, -12, -40, -1000, -1000, -1000, -72, -1000, -1000,
	484, -1000, -1000, -1000, -1000, 6270, -1000, 1076, -1000, -1000,
	7017, -1000, -1000, -73, 6970, -1000, -1000, 379, -41, 6270,
	-1000, -1000, -1000, -42, 5690, 7398, -1000, -1000, 554, 336,
	796, -1000, -1000, 554, 566, -1000, 202, -1000, -1000, -1000,
	4951, 200, 7398, -1000, 199, 190, 373, 1240, 188, -1000,
	-43, 778, 150, -14, 5574, -1000, -1000, -1000, 433, 373,
	-46, 799, -1000, 673, -1000, -1000, 378, -1000, -1000, -1000,
	-1000, 278, 792, 568, -1000, 410, 4963, 728, 186, -1000,
	-1000, -1000, 6270, 1076, -1000, 5574, 763, -1000, -1000, 435,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 795, -1000,
	554, 243, 566, -1000, 796, -1000, 2895, 184, 6270, 194,
	-1000, 627, -1000, -47, -1000, 3859, 499, -1000, 5574, -79,
	2731, -1000, -16, 277, -48, 417, 373, 257, -1000, -1000,
	272, -1000, -1000, -1000, 525, 483, 410, 685, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 550, -1000, -1000, -1000,
	-1000, 3551, 1076, -49, 242, 267, 238, 554, 795, -1000,
	-1000, 237, 183, -1000, -50, -1000, 6270, 162, 119, 182,
	620, 417, -1000, -1000, -1000, -51, -1000, -52, -1000, 180,
	410, -1000, 706, 706, -21, -1000, 544, -1000, -1000, 443,
	138, -1000, 765, 5127, 671, 117, -1000, -1000, 3551, 763,
	-1000, -1000, -1000, -1000, 192, -1000, -1000, 4023, 6829, -1000,
	-1000, -1000, -1000, -1000, 179, 706, 2567, 3859, -1000, -1000,
	584, -1000, 2403, 264, 373, 259, 510, 762, 174, -1000,
	-1000, 525, -1000, 6270, 133, -1000, 760, 5127, -1000, -1000,
	4818, 26, -1000, -1000, -1000, -1000, -1000, 3551, -1000, 255,
	176, -1000, -54, 410, -1000, -1000, -1000, -1000, 81, -1000,
	-1000, 500, 6270, -1000, -1000, 7398, -1000, 5127, 6270, -1000,
	-1000, 4679, -1000, 171, 167, 383, 436, 298, -1000, 285,
	-1000, -1000, 2239, 3551, -1000, -1000, 248, -1000, 2075, 1911,
	-1000, 510, -1000, 7398, -1000, -1000, 7398, -25, -1000, -1000,
	-1000, -1000, 410, 5266, 5127, 159, 1747, -1000, -1000, -1000,
	-1000, -1000, 373, 792, -1000, -1000, 5127, -1000, -1000, -1000,
	1583, -55, -1000, -1000, 706, -23, -1000, -1000, -1000, 1419,
	-1000,
}
var yyPgo = [...]int{

	0, 923, 922, 51, 9, 921, 3, 919, 11, 24,
	81, 80, 46, 45, 918, 29, 916, 77, 70, 61,
	915, 0, 50, 911, 907, 15, 906, 905, 35, 237,
	38, 20, 904, 32, 902, 62, 54, 901, 10, 900,
	899, 898, 896, 13, 55, 895, 894, 100, 95, 199,
	893, 892, 891, 5, 889, 85, 41, 888, 141, 43,
	887, 885, 884, 881, 878, 79, 877, 874, 873, 871,
	12, 870, 868, 47, 40, 31, 2, 14, 743, 8,
	795, 25, 867, 866, 864, 37, 82, 599, 862, 121,
	861, 860, 856, 86, 855, 36, 854, 853, 30, 33,
	851, 850, 28, 849, 843, 592, 840, 18, 838, 837,
	39, 835, 78, 1, 4, 831, 17, 830, 44, 827,
	826, 823, 7, 821, 6, 820, 19, 16,
}
var yyR1 = [...]int{

	0, 125, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 6, 6, 112, 112,
	89, 89, 8, 8, 8, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 80,
	80, 14, 14, 16, 16, 126, 126, 99, 99, 98,
	98, 105, 105, 15, 15, 18, 18, 17, 17, 93,
	93, 113, 113, 20, 20, 20, 20, 20, 20, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 91, 91, 90, 90, 27, 27, 104,
	104, 28, 10, 1, 1, 2, 2, 11, 11, 123,
	123, 78, 78, 12, 13, 30, 30, 117, 117, 118,
	118, 81, 81, 81, 81, 24, 24, 25, 25, 26,
	26, 83, 83, 83, 83, 102, 102, 102, 127, 127,
	23, 23, 69, 69, 67, 67, 71, 71, 68, 68,
	114, 114, 115, 115, 31, 31, 32, 32, 77, 77,
	75, 75, 75, 76, 76, 85, 85, 111, 111, 33,
	33, 97, 97, 35, 101, 101, 36, 36, 116, 116,
	37, 37, 37, 37, 122, 122, 84, 84, 84, 103,
	103, 38, 38, 39, 40, 40, 40, 40, 42, 42,
	41, 82, 82, 120, 120, 119, 119, 121, 121, 79,
	79, 79, 79, 79, 79, 100, 100, 43, 43, 92,
	92, 70, 19, 94, 94, 44, 95, 95, 96, 96,
	46, 45, 45, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 124,
	3, 3, 107, 107, 106, 106, 53, 53, 54, 54,
	54, 54, 47, 47, 48, 48, 51, 51, 88, 88,
	88, 86, 86, 58, 58, 58, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 59, 59, 59, 21, 21, 22, 22, 57,
	60, 60, 60, 61, 61, 61, 62, 62, 62, 62,
	62, 62, 29, 29, 29, 49, 49, 49, 63, 63,
	64, 64, 64, 64, 64, 64, 55, 55, 55, 56,
	56, 56, 110, 73, 73, 109, 109, 72, 72, 72,
	72, 72, 72, 87, 87, 87, 87, 65, 65, 65,
	65, 65, 65, 65, 66, 66, 66, 66, 50, 50,
	50, 50, 50, 50, 50, 108, 108, 74,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 0,
	1, 3, 1, 3, 2, 1, 1, 1, 1, 1,
	4, 3, 5, 4, 3, 4, 3, 4, 3, 1,
	1, 6, 7, 6, 7, 0, 1, 3, 1, 3,
	1, 3, 1, 1, 2, 1, 3, 1, 2, 3,
	1, 2, 0, 1, 1, 1, 1, 1, 4, 3,
	1, 1, 5, 7, 9, 5, 3, 3, 3, 3,
	3, 3, 1, 2, 6, 7, 9, 5, 1, 6,
	3, 3, 2, 0, 9, 1, 3, 0, 4, 1,
	3, 1, 11, 0, 1, 0, 1, 9, 8, 1,
	2, 1, 1, 6, 7, 0, 2, 0, 2, 0,
	2, 1, 2, 4, 3, 1, 4, 1, 4, 1,
	4, 3, 4, 4, 5, 0, 5, 4, 1, 1,
	1, 4, 5, 6, 1, 3, 6, 7, 3, 6,
	1, 0, 1, 3, 4, 6, 0, 1, 1, 2,
	1, 1, 1, 0, 2, 2, 4, 1, 3, 1,
	2, 3, 1, 1, 3, 1, 1, 3, 2, 0,
	3, 4, 3, 10, 1, 3, 1, 2, 3, 1,
	2, 2, 2, 3, 3, 3, 4, 3, 1, 1,
	3, 1, 3, 1, 1, 0, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 3, 1, 2, 4, 3,
	1, 4, 4, 3, 1, 1, 0, 1, 3, 1,
	8, 3, 2, 6, 5, 3, 4, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 5, 4, 3,
	1, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 3, 2, 1, 2, 4, 2, 11, 12, 0,
	0, 1, 0, 4, 3, 1, 1, 2, 2, 4,
	4, 2, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 0, 1, 4, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 3, 3,
	1, 1, 1, 3, 3, 1, 1, 0, 1, 1,
	1, 3, 1, 1, 3, 1, 1, 4, 4, 4,
	4, 1, 1, 1, 3, 1, 4, 2, 3, 3,
	1, 4, 4, 3, 3, 3, 1, 3, 1, 1,
	3, 1, 1, 0, 1, 3, 1, 3, 1, 4,
	2, 6, 4, 2, 2, 1, 2, 1, 4, 3,
	3, 3, 6, 3, 1, 1, 2, 1, 5, 4,
	2, 2, 4, 2, 2, 1, 3, 1,
}
var yyChk = [...]int{

	-1000, -125, -112, -7, -9, -10, -11, -12, -13, 127,
	154, 120, 114, 161, -67, -68, 97, 96, 99, 106,
	110, 111, 115, 122, 76, 95, 90, -21, 124, 101,
	103, 163, 116, 119, 112, 86, 113, -123, 128, 129,
	130, -69, -71, -29, -34, -78, 83, -62, -63, -60,
	134, 69, 71, 58, 59, 49, 50, 55, 57, 164,
	-45, -50, 60, 61, 62, 63, 64, 65, 66, 82,
	67, -52, 160, 13, 14, 16, 77, 78, -49, -59,
	-54, -47, -57, -58, 70, 125, 126, 4, 5, 6,
	7, 8, 84, 85, 141, 142, 156, 138, 139, 140,
	155, 137, 149, 159, 88, 167, -8, -61, 135, 94,
	-89, 157, 164, 157, -89, 161, 86, -16, -80, -105,
	-89, 157, 113, 114, -17, -18, -93, -19, 86, -113,
	164, -9, 113, 154, 164, 164, -22, -21, 76, -22,
	-22, -97, -35, -49, -101, 113, -36, 88, -94, -44,
	-21, 163, 33, 34, 10, 12, 11, 35, 37, 36,
	51, 49, 50, 52, 68, 53, 54, 47, 48, 40,
	41, 38, 39, 43, 44, 45, 46, 42, 56, 30,
	32, 164, 164, 164, 161, -21, 86, 31, -3, 37,
	128, -78, 86, 86, 86, 73, 74, 73, 75, 74,
	17, 18, 19, 20, 29, 21, 22, 23, 24, 25,
	26, 27, 28, 58, 59, 164, 69, 161, 133, 164,
	-110, -109, -73, -72, -21, 37, 134, -21, -29, -59,
	164, -58, 76, 69, -29, -21, -21, -21, -21, -21,
	-21, -21, -21, -21, -21, -21, -21, -51, 164, -21,
	-88, 93, -87, -65, 88, 151, 152, -21, -21, -21,
	69, 153, 153, -48, -46, -47, -64, 128, -8, -49,
	164, 164, -21, -21, 164, -21, -21, 93, 150, -87,
	-87, 93, 161, -49, -85, 164, -85, 164, 157, -89,
	165, -89, 163, 161, -112, 163, -14, -105, -89, 157,
	163, 9, 157, 105, -89, -18, 163, 9, 17, -20,
	162, -9, -10, -11, -12, -13, 127, -21, 97, -3,
	-95, -96, -21, -21, 163, 163, 163, 163, 9, 163,
	9, -3, 17, 163, 9, -21, -21, -21, -21, -21,
	-21, -21, -21, -21, -21, -21, -21, -21, -21, -21,
	-21, -21, -21, -21, -21, -21, -21, -21, -21, -21,
	-21, -48, -21, 31, -21, -104, -28, -29, -21, -93,
	-113, 163, 163, 86, -124, 86, -30, 131, -124, -117,
	131, 164, -9, 164, 163, 31, -21, 37, -21, -21,
	-21, -21, -21, -21, -21, -21, -21, -21, -21, -21,
	-21, -22, -21, -56, 86, 161, -49, -110, 166, 9,
	15, -29, 164, -21, -110, 165, -22, 160, -65, -65,
	93, 69, 133, -21, 87, -29, 15, -22, -55, -6,
	-49, 161, 86, -5, -4, 76, 77, 78, 79, 80,
	81, 4, 5, 6, 7, 8, 10, 11, 12, 56,
	70, 71, 82, 83, 73, 74, 75, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 104, 105, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 111,
	112, 113, 114, 115, 13, 14, 134, 106, 107, 108,
	109, 110, 135, 136, 131, 132, 154, 129, 130, 128,
	137, 138, 140, 139, 141, 142, 156, 155, -55, -6,
	-49, -86, -85, 153, 69, 161, 133, 153, -86, -108,
	-74, -21, -21, -21, 150, 150, 159, -21, 165, -111,
	-33, -21, 158, -110, 86, 163, -112, 162, 163, 163,
	157, -89, -17, 157, -89, 161, 86, 157, -19, -21,
	164, 165, 164, 163, 9, 165, -35, -36, -124, -21,
	-44, 31, -21, -126, 9, 105, 165, 162, -124, 164,
	-30, -118, 132, -8, 161, -124, -122, -8, -21, -21,
	-113, -21, 165, 166, 162, -85, -21, 165, 17, -73,
	-21, 37, 134, -110, 165, 166, 165, -66, 86, 89,
	50, 88, 86, 162, 162, 69, 162, -21, 166, -85,
	-21, -85, -49, -22, -21, -56, -49, -30, -126, 9,
	165, 165, 162, -126, 9, -21, 165, 162, 161, 157,
	-99, -15, -18, -80, 161, -124, 165, -23, -9, 31,
	-21, -95, -21, -83, 161, 31, 164, -21, 165, -28,
	-81, -29, 37, 134, 69, -26, -9, 31, -91, 164,
	-114, -115, -31, -32, -77, -75, 30, 135, 136, -8,
	-118, -124, -122, -116, 161, 9, 165, 165, 75, -9,
	31, 162, 17, -21, -29, 164, 165, 166, 89, -21,
	162, 166, 162, -118, 165, -74, 165, -33, -98, -18,
	161, -126, 9, -18, -99, 163, -113, 165, 163, -102,
	163, -102, 163, -114, 163, 165, 15, -29, 164, -110,
	-113, -27, 117, 118, -114, 165, 9, -1, 37, -75,
	-124, 161, 162, -37, -120, -119, 120, -121, 123, -79,
	81, 80, 79, 76, 77, 78, -116, -8, -9, 31,
	163, -113, -21, -110, 166, -124, -126, 9, -98, 162,
	-15, -126, 98, 163, -95, 162, 108, 109, -102, 107,
	-102, 165, -25, -9, 31, -81, -29, -110, 166, 104,
	164, 161, 165, -107, 120, -31, -2, 158, 161, -116,
	-100, -43, 88, 114, 113, -122, -79, 162, -113, 165,
	162, 161, 162, -18, -126, 162, 163, 165, -21, -127,
	31, 163, 162, 163, 107, -107, -113, 165, 165, 163,
	-90, -8, -113, -76, 31, -76, 164, 88, -116, 162,
	163, 9, -124, 17, -92, -70, -6, -3, -84, 163,
	161, -116, 162, -24, -9, 31, -127, -113, 163, -76,
	102, -25, 88, 35, 162, 161, -77, 161, -106, -53,
	88, 37, 17, 162, -43, -21, 163, 9, 17, -6,
	162, -103, -38, -39, -40, -41, -42, -8, -6, 154,
	86, 162, -113, -113, 161, 163, 165, -8, -113, -113,
	165, 9, 88, -21, -124, -70, -21, -124, 162, -38,
	163, 163, 121, 105, 153, 100, -113, 161, 162, 162,
	-53, -124, 164, -122, 86, -4, -79, -6, 163, 162,
	-113, -114, -6, 162, 165, -76, -82, 163, 161, -113,
	162,
}
var yyDef = [...]int{

	79, -2, 1, 78, 85, 86, 87, 88, 89, 0,
	0, 0, 0, 122, 130, 131, 0, 0, 0, 0,
	417, 417, 417, 0, 382, 0, 142, 0, 0, 0,
	0, 148, 0, 0, 0, 80, 370, 0, 0, 0,
	0, 204, 0, -2, 416, 169, 0, -2, 433, 419,
	0, 453, 0, 0, 0, 0, 0, 0, 0, 0,
	346, 350, 0, 0, 0, 0, 0, 0, 0, 386,
	0, 360, 388, 0, 363, 0, 171, 172, 426, 411,
	431, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 396, 397, 398, 399, 400, 401, 402, 403,
	404, 405, 0, 0, 435, 0, -2, 0, 0, 395,
	82, 0, 0, 0, 0, 79, 80, 0, 0, 0,
	115, 0, 99, 100, 112, 117, 0, 120, 0, 0,
	0, 0, 370, 0, 286, 0, 0, 418, 382, 0,
	0, 0, 232, 233, 0, 370, 235, 236, 0, 284,
	285, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 0, 0, 152, 369, 371,
	0, 170, 175, 369, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 312, 0, 417, 0, 0, 453,
	0, 452, 456, 454, 458, 0, 0, 297, -2, 0,
	0, -2, 382, 453, -2, 331, 332, 333, 334, 0,
	351, 352, 353, 354, 355, 356, 357, 358, 417, 359,
	0, 389, 390, 465, 467, 0, 0, 362, 364, 366,
	417, 0, 0, 391, 292, 384, 385, 391, 383, 440,
	0, 0, 480, 481, 0, 483, 484, 0, 407, 0,
	0, 0, 0, 437, 378, 0, 381, 453, 0, 84,
	0, 83, 91, 79, 0, 94, 0, 0, 115, 0,
	96, 0, 0, 0, 115, 118, 98, 0, 0, 121,
	129, 123, 124, 125, 126, 127, 0, 0, 0, 369,
	0, 287, 289, 0, 136, 137, 138, 139, 0, 140,
	0, 369, 0, 141, 0, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 323, 324, 325, 326, 327, 328,
	329, 330, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 344, 0, 0, 349, 105, 159, -2, 0, 0,
	0, 150, 151, 369, 0, 175, 179, 0, 0, 369,
	0, 0, 205, 0, 208, 122, 295, 0, 298, 299,
	300, 301, 302, 303, 304, 305, 306, 307, 308, 309,
	0, 0, 0, 434, 449, 0, 451, 0, 394, 453,
	0, -2, 453, 0, 0, -2, 0, 361, 466, 463,
	464, 0, 0, 0, 0, 420, 0, 0, 0, -2,
	-2, 0, 76, 77, 69, 70, 71, 72, 73, 74,
	75, 2, 3, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 0, -2,
	-2, 291, 392, 0, 417, 0, 0, 0, 175, 105,
	485, 487, 0, 0, 406, 409, 408, 0, 225, 105,
	227, 229, 0, 0, 81, 90, 0, 93, 95, 97,
	0, 115, 111, 0, 115, 0, 116, 0, 119, 369,
	0, 0, 0, 286, 0, 0, 231, 234, 0, 237,
	283, 0, 348, 0, 106, 0, 0, 153, 0, -2,
	179, 369, 0, 176, 239, 0, 178, 244, 0, 0,
	0, 296, 0, 427, 429, 430, 0, 0, 0, 455,
	457, 0, 0, 0, -2, 394, 387, 0, 474, 475,
	0, 477, 469, 470, 471, 0, 473, 365, 428, 379,
	0, 380, 444, 0, 0, 443, 445, 179, 0, 106,
	479, 482, 436, 0, 106, 230, 393, 92, 0, 0,
	105, 108, 113, 0, 0, 282, 0, 132, 200, 122,
	0, 0, 288, 135, 195, 195, -2, 347, 0, 160,
	0, -2, 0, 0, 453, 147, 189, 122, 157, -2,
	0, 210, 212, 163, 217, 218, 0, 220, 221, 222,
	369, 0, 180, 265, 239, 0, 0, 0, 0, 202,
	122, 450, 0, 294, -2, 453, 462, 468, 476, 0,
	447, 441, 442, 369, 478, 486, 226, 228, 105, 110,
	0, 0, 106, 114, 105, 128, 0, 0, 286, 0,
	195, 0, 195, 0, 144, 0, 0, -2, 453, 0,
	0, 149, 0, 0, 0, 372, 216, 165, 164, 219,
	0, 239, 173, 238, 0, 0, 0, -2, 264, 267,
	269, 270, 271, 272, 273, 274, 265, 245, 203, 122,
	209, 206, 293, 0, 0, 0, 0, 106, 105, 103,
	107, 0, 0, 133, 0, 191, 0, 0, 0, 0,
	0, 372, 145, 187, 122, 0, -2, 0, -2, 0,
	0, 122, 223, 223, 0, 213, 0, 166, 239, 265,
	0, 276, 369, 0, 370, 0, 268, 174, 207, 461,
	472, 239, 101, 109, 0, 104, 201, 0, 0, 122,
	198, 199, 192, 193, 0, 223, 0, 0, 183, 190,
	0, 155, 0, 0, 0, 0, 0, 214, 265, 168,
	240, 0, 277, 0, 0, 280, 0, 0, 242, 246,
	0, 265, 102, 134, 185, 122, 122, 197, 194, 0,
	0, 146, 0, 0, 158, 122, 224, 122, 0, 375,
	376, 0, 0, 167, 275, 369, 241, 0, 0, 369,
	247, 0, 249, 0, 0, 259, 0, 0, 258, 57,
	-2, 290, 0, 196, 122, 188, 0, 156, 0, 0,
	373, 0, 377, 215, 278, 279, 369, 0, 248, 250,
	251, 252, 0, 0, 0, 0, 0, 122, 162, 367,
	374, 281, -2, 253, 254, 255, 257, 260, 186, 368,
	0, 0, 256, 154, 223, 0, 243, 261, 122, 0,
	262,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 55, 159, 3, 167, 54, 37, 3,
	164, 165, 52, 49, 9, 50, 51, 53, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 31, 163,
	43, 17, 45, 30, 67, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 69, 3, 166, 36, 3, 160, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 161, 35, 162, 57,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 10, 11, 12,
	13, 14, 15, 16, 18, 19, 20, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 32, 33, 34, 38,
	39, 40, 41, 42, 44, 46, 47, 48, 56, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 68, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
	151, 152, 153, 154, 155, 156, 157, 158,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:286
		{
			rootnode = stmt.NewStmtList(yyDollar[1].list).SetPosition(NewNodeListPosition(yyDollar[1].list))
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:290
		{
			yyVAL.token = yyDollar[1].token
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:290
		{
			yyVAL.token = yyDollar[1].token
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:290
		{
			yyVAL.token = yyDollar[1].token
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:290
		{
			yyVAL.token = yyDollar[1].token
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:290
		{
			yyVAL.token = yyDollar[1].token
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:290
		{
			yyVAL.token = yyDollar[1].token
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:290
		{
			yyVAL.token = yyDollar[1].token
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:290
		{
			yyVAL.token = yyDollar[1].token
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:291
		{
			yyVAL.token = yyDollar[1].token
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:291
		{
			yyVAL.token = yyDollar[1].token
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:291
		{
			yyVAL.token = yyDollar[1].token
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:291
		{
			yyVAL.token = yyDollar[1].token
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:291
		{
			yyVAL.token = yyDollar[1].token
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:291
		{
			yyVAL.token = yyDollar[1].token
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:291
		{
			yyVAL.token = yyDollar[1].token
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:291
		{
			yyVAL.token = yyDollar[1].token
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:291
		{
			yyVAL.token = yyDollar[1].token
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:291
		{
			yyVAL.token = yyDollar[1].token
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:291
		{
			yyVAL.token = yyDollar[1].token
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:291
		{
			yyVAL.token = yyDollar[1].token
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:292
		{
			yyVAL.token = yyDollar[1].token
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:292
		{
			yyVAL.token = yyDollar[1].token
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:292
		{
			yyVAL.token = yyDollar[1].token
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:292
		{
			yyVAL.token = yyDollar[1].token
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:292
		{
			yyVAL.token = yyDollar[1].token
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:292
		{
			yyVAL.token = yyDollar[1].token
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:292
		{
			yyVAL.token = yyDollar[1].token
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:292
		{
			yyVAL.token = yyDollar[1].token
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:292
		{
			yyVAL.token = yyDollar[1].token
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:292
		{
			yyVAL.token = yyDollar[1].token
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:293
		{
			yyVAL.token = yyDollar[1].token
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:293
		{
			yyVAL.token = yyDollar[1].token
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:293
		{
			yyVAL.token = yyDollar[1].token
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:293
		{
			yyVAL.token = yyDollar[1].token
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:293
		{
			yyVAL.token = yyDollar[1].token
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:293
		{
			yyVAL.token = yyDollar[1].token
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:293
		{
			yyVAL.token = yyDollar[1].token
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:293
		{
			yyVAL.token = yyDollar[1].token
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:293
		{
			yyVAL.token = yyDollar[1].token
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:293
		{
			yyVAL.token = yyDollar[1].token
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:294
		{
			yyVAL.token = yyDollar[1].token
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:294
		{
			yyVAL.token = yyDollar[1].token
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:294
		{
			yyVAL.token = yyDollar[1].token
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:294
		{
			yyVAL.token = yyDollar[1].token
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:294
		{
			yyVAL.token = yyDollar[1].token
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:294
		{
			yyVAL.token = yyDollar[1].token
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:294
		{
			yyVAL.token = yyDollar[1].token
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:294
		{
			yyVAL.token = yyDollar[1].token
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:294
		{
			yyVAL.token = yyDollar[1].token
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:294
		{
			yyVAL.token = yyDollar[1].token
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:294
		{
			yyVAL.token = yyDollar[1].token
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:295
		{
			yyVAL.token = yyDollar[1].token
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:295
		{
			yyVAL.token = yyDollar[1].token
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:295
		{
			yyVAL.token = yyDollar[1].token
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:295
		{
			yyVAL.token = yyDollar[1].token
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:295
		{
			yyVAL.token = yyDollar[1].token
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:295
		{
			yyVAL.token = yyDollar[1].token
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:295
		{
			yyVAL.token = yyDollar[1].token
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:295
		{
			yyVAL.token = yyDollar[1].token
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:296
		{
			yyVAL.token = yyDollar[1].token
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:296
		{
			yyVAL.token = yyDollar[1].token
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:296
		{
			yyVAL.token = yyDollar[1].token
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:296
		{
			yyVAL.token = yyDollar[1].token
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:296
		{
			yyVAL.token = yyDollar[1].token
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:296
		{
			yyVAL.token = yyDollar[1].token
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:296
		{
			yyVAL.token = yyDollar[1].token
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:296
		{
			yyVAL.token = yyDollar[1].token
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:300
		{
			yyVAL.token = yyDollar[1].token
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:301
		{
			yyVAL.token = yyDollar[1].token
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:301
		{
			yyVAL.token = yyDollar[1].token
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:301
		{
			yyVAL.token = yyDollar[1].token
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:301
		{
			yyVAL.token = yyDollar[1].token
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:301
		{
			yyVAL.token = yyDollar[1].token
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:301
		{
			yyVAL.token = yyDollar[1].token
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:305
		{
			yyVAL.token = yyDollar[1].token
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:306
		{
			yyVAL.token = yyDollar[1].token
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:310
		{
			yyVAL.list = append(yyDollar[1].list, yyDollar[2].node)
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser/parser.y:311
		{
			yyVAL.list = []node.Node{}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:315
		{
			yyVAL.list = []node.Node{name.NewNamePart(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:316
		{
			yyVAL.list = append(yyDollar[1].list, name.NewNamePart(yyDollar[3].token.Value).SetComments(ListGetFirstNodeComments(yyDollar[1].list)).SetPosition(NewTokenPosition(yyDollar[3].token)))
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:320
		{
			yyVAL.node = name.NewName(yyDollar[1].list).SetComments(ListGetFirstNodeComments(yyDollar[1].list)).SetPosition(NewNodeListPosition(yyDollar[1].list))
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:321
		{
			yyVAL.node = name.NewRelative(yyDollar[3].list).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodeListPosition(yyDollar[1].token, yyDollar[3].list))
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:322
		{
			yyVAL.node = name.NewFullyQualified(yyDollar[2].list).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodeListPosition(yyDollar[1].token, yyDollar[2].list))
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:326
		{
			yyVAL.node = yyDollar[1].node
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:327
		{
			yyVAL.node = yyDollar[1].node
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:328
		{
			yyVAL.node = yyDollar[1].node
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:329
		{
			yyVAL.node = yyDollar[1].node
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:330
		{
			yyVAL.node = yyDollar[1].node
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:331
		{
			yyVAL.node = stmt.NewHaltCompiler()
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:333
		{
			name := name.NewName(yyDollar[2].list).SetComments(ListGetFirstNodeComments(yyDollar[2].list)).SetPosition(NewNodeListPosition(yyDollar[2].list))
			yyVAL.node = stmt.NewNamespace(name, nil).
				SetComments(yyDollar[1].token.Comments()).
				SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[3].token))
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser/parser.y:340
		{
			name := name.NewName(yyDollar[2].list).SetComments(ListGetFirstNodeComments(yyDollar[2].list)).SetPosition(NewNodeListPosition(yyDollar[2].list))
			yyVAL.node = stmt.NewNamespace(name, yyDollar[4].list).
				SetComments(yyDollar[1].token.Comments()).
				SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[5].token))
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:346
		{
			yyVAL.node = stmt.NewNamespace(nil, yyDollar[3].list).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[4].token))
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:347
		{
			yyVAL.node = yyDollar[2].node
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:348
		{
			yyVAL.node = yyDollar[3].node.(stmt.GroupUse).SetUseType(yyDollar[2].node)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:349
		{
			yyVAL.node = stmt.NewUseList(nil, yyDollar[2].list).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[3].token))
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:350
		{
			yyVAL.node = stmt.NewUseList(yyDollar[2].node, yyDollar[3].list)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:351
		{
			yyVAL.node = stmt.NewConstList(yyDollar[2].list).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[3].token))
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:355
		{
			yyVAL.node = node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:356
		{
			yyVAL.node = node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 101:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser/parser.y:361
		{
			name := name.NewName(yyDollar[1].list).SetComments(ListGetFirstNodeComments(yyDollar[1].list)).SetPosition(NewNodeListPosition(yyDollar[1].list))
			yyVAL.node = stmt.NewGroupUse(nil, name, yyDollar[4].list).
				SetComments(ListGetFirstNodeComments(yyDollar[1].list)).
				SetPosition(NewNodeListTokenPosition(yyDollar[1].list, yyDollar[6].token))
		}
	case 102:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser/parser.y:368
		{
			name := name.NewName(yyDollar[2].list).SetComments(ListGetFirstNodeComments(yyDollar[2].list)).SetPosition(NewNodeListPosition(yyDollar[2].list))
			yyVAL.node = stmt.NewGroupUse(nil, name, yyDollar[5].list).
				SetComments(yyDollar[1].token.Comments()).
				SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[7].token))
		}
	case 103:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser/parser.y:378
		{
			name := name.NewName(yyDollar[1].list).SetComments(ListGetFirstNodeComments(yyDollar[1].list)).SetPosition(NewNodeListPosition(yyDollar[1].list))
			yyVAL.node = stmt.NewGroupUse(nil, name, yyDollar[4].list).
				SetComments(ListGetFirstNodeComments(yyDollar[1].list)).
				SetPosition(NewNodeListTokenPosition(yyDollar[1].list, yyDollar[6].token))
		}
	case 104:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser/parser.y:385
		{
			name := name.NewName(yyDollar[2].list).SetComments(ListGetFirstNodeComments(yyDollar[2].list)).SetPosition(NewNodeListPosition(yyDollar[2].list))
			yyVAL.node = stmt.NewGroupUse(nil, name, yyDollar[5].list).
				SetComments(yyDollar[1].token.Comments()).
				SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[7].token))
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:400
		{
			yyVAL.list = append(yyDollar[1].list, yyDollar[3].node)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:401
		{
			yyVAL.list = []node.Node{yyDollar[1].node}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:406
		{
			yyVAL.list = append(yyDollar[1].list, yyDollar[3].node)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:407
		{
			yyVAL.list = []node.Node{yyDollar[1].node}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:411
		{
			yyVAL.list = append(yyDollar[1].list, yyDollar[3].node)
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:412
		{
			yyVAL.list = []node.Node{yyDollar[1].node}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:416
		{
			yyVAL.node = yyDollar[1].node
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:417
		{
			yyVAL.node = yyDollar[2].node.(stmt.Use).SetUseType(yyDollar[1].node)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:422
		{
			name := name.NewName(yyDollar[1].list).SetComments(ListGetFirstNodeComments(yyDollar[1].list)).SetPosition(NewNodeListPosition(yyDollar[1].list))
			yyVAL.node = stmt.NewUse(nil, name, nil).SetComments(ListGetFirstNodeComments(yyDollar[1].list)).SetPosition(NewNodeListPosition(yyDollar[1].list))
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:427
		{
			name := name.NewName(yyDollar[1].list).SetComments(ListGetFirstNodeComments(yyDollar[1].list)).SetPosition(NewNodeListPosition(yyDollar[1].list))
			alias := node.NewIdentifier(yyDollar[3].token.Value).SetComments(yyDollar[3].token.Comments()).SetPosition(NewTokenPosition(yyDollar[3].token))
			yyVAL.node = stmt.NewUse(nil, name, alias).SetComments(ListGetFirstNodeComments(yyDollar[1].list)).SetPosition(NewNodeListTokenPosition(yyDollar[1].list, yyDollar[3].token))
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:435
		{
			yyVAL.node = yyDollar[1].node
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:436
		{
			yyVAL.node = yyDollar[2].node
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:440
		{
			yyVAL.list = append(yyDollar[1].list, yyDollar[3].node)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:441
		{
			yyVAL.list = []node.Node{yyDollar[1].node}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:445
		{
			yyVAL.list = append(yyDollar[1].list, yyDollar[2].node)
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser/parser.y:446
		{
			yyVAL.list = []node.Node{}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:450
		{
			yyVAL.node = yyDollar[1].node
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:451
		{
			yyVAL.node = yyDollar[1].node
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:452
		{
			yyVAL.node = yyDollar[1].node
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:453
		{
			yyVAL.node = yyDollar[1].node
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:454
		{
			yyVAL.node = yyDollar[1].node
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:455
		{
			yyVAL.node = stmt.NewHaltCompiler().SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[4].token))
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:458
		{
			yyVAL.node = stmt.NewStmtList(yyDollar[2].list).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[3].token))
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:459
		{
			yyVAL.node = yyDollar[1].node
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:460
		{
			yyVAL.node = yyDollar[1].node
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser/parser.y:462
		{
			yyVAL.node = stmt.NewWhile(yyDollar[1].token, yyDollar[3].node, yyDollar[5].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[5].node))
		}
	case 133:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser/parser.y:463
		{
			yyVAL.node = stmt.NewDo(yyDollar[2].node, yyDollar[5].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[7].token))
		}
	case 134:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser/parser.y:465
		{
			yyVAL.node = stmt.NewFor(yyDollar[3].list, yyDollar[5].list, yyDollar[7].list, yyDollar[9].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[9].node))
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser/parser.y:466
		{
			yyVAL.node = stmt.NewSwitch(yyDollar[1].token, yyDollar[3].node, yyDollar[5].nodesWithEndToken.nodes).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[5].nodesWithEndToken.endToken))
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:467
		{
			yyVAL.node = stmt.NewBreak(yyDollar[2].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[3].token))
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:468
		{
			yyVAL.node = stmt.NewContinue(yyDollar[2].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[3].token))
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:469
		{
			yyVAL.node = stmt.NewReturn(yyDollar[2].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[3].token))
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:470
		{
			yyVAL.node = stmt.NewGlobal(yyDollar[2].list).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[3].token))
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:471
		{
			yyVAL.node = stmt.NewStatic(yyDollar[2].list).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[3].token))
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:472
		{
			yyVAL.node = stmt.NewEcho(yyDollar[2].list).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[3].token))
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:473
		{
			yyVAL.node = stmt.NewInlineHtml(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:474
		{
			yyVAL.node = stmt.NewExpression(yyDollar[1].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodeTokenPosition(yyDollar[1].node, yyDollar[2].token))
		}
	case 144:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser/parser.y:476
		{
			yyVAL.node = stmt.NewUnset(yyDollar[3].list).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[6].token))
		}
	case 145:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser/parser.y:478
		{
			yyVAL.node = stmt.NewForeach(yyDollar[3].node, nil, yyDollar[5].foreachVariable.node, yyDollar[7].node, yyDollar[5].foreachVariable.byRef).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[7].node))
		}
	case 146:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser/parser.y:480
		{
			yyVAL.node = stmt.NewForeach(yyDollar[3].node, yyDollar[5].node, yyDollar[7].foreachVariable.node, yyDollar[9].node, yyDollar[7].foreachVariable.byRef).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[9].node))
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser/parser.y:481
		{
			yyVAL.node = stmt.NewDeclare(yyDollar[3].list, yyDollar[5].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[5].node))
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:482
		{
			yyVAL.node = stmt.NewNop().SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 149:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser/parser.y:484
		{
			if yyDollar[6].node == nil {
				yyVAL.node = stmt.NewTry(yyDollar[3].list, yyDollar[5].list, yyDollar[6].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodeListPosition(yyDollar[1].token, yyDollar[5].list))
			} else {
				yyVAL.node = stmt.NewTry(yyDollar[3].list, yyDollar[5].list, yyDollar[6].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[6].node))
			}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:491
		{
			yyVAL.node = stmt.NewThrow(yyDollar[2].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[3].token))
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:493
		{
			label := node.NewIdentifier(yyDollar[2].token.Value).SetComments(yyDollar[2].token.Comments()).SetPosition(NewTokenPosition(yyDollar[2].token))
			yyVAL.node = stmt.NewGoto(label).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[3].token))
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:498
		{
			label := node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
			yyVAL.node = stmt.NewLabel(label).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[2].token))
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser/parser.y:504
		{
			yyVAL.list = []node.Node{}
		}
	case 154:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser/parser.y:506
		{
			identifier := node.NewIdentifier(yyDollar[5].token.Value).SetComments(yyDollar[5].token.Comments()).SetPosition(NewTokenPosition(yyDollar[5].token))
			variable := expr.NewVariable(identifier).SetComments(yyDollar[5].token.Comments()).SetPosition(NewTokenPosition(yyDollar[5].token))
			yyVAL.list = append(yyDollar[1].list, stmt.NewCatch(yyDollar[4].list, variable, yyDollar[8].list).SetComments(yyDollar[2].token.Comments()).SetPosition(NewTokensPosition(yyDollar[2].token, yyDollar[9].token)))
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:513
		{
			yyVAL.list = []node.Node{yyDollar[1].node}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:514
		{
			yyVAL.list = append(yyDollar[1].list, yyDollar[3].node)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser/parser.y:518
		{
			yyVAL.node = nil
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:519
		{
			yyVAL.node = stmt.NewFinally(yyDollar[3].list).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[4].token))
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:523
		{
			yyVAL.list = []node.Node{yyDollar[1].node}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:524
		{
			yyVAL.list = append(yyDollar[1].list, yyDollar[3].node)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:528
		{
			yyVAL.node = yyDollar[1].node
		}
	case 162:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser/parser.y:533
		{
			name := node.NewIdentifier(yyDollar[3].token.Value).SetComments(yyDollar[3].token.Comments()).SetPosition(NewTokenPosition(yyDollar[3].token))
			yyVAL.node = stmt.NewFunction(name, yyDollar[2].boolWithToken.value, yyDollar[6].list, yyDollar[8].node, yyDollar[10].list, yyDollar[4].str).
				SetComments(yyDollar[1].token.Comments()).
				SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[11].token))
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser/parser.y:542
		{
			yyVAL.boolWithToken = boolWithToken{false, nil}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:543
		{
			yyVAL.boolWithToken = boolWithToken{true, &yyDollar[1].token}
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser/parser.y:547
		{
			yyVAL.boolWithToken = boolWithToken{false, nil}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:548
		{
			yyVAL.boolWithToken = boolWithToken{true, &yyDollar[1].token}
		}
	case 167:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser/parser.y:553
		{
			name := node.NewIdentifier(yyDollar[3].token.Value).SetComments(yyDollar[3].token.Comments()).SetPosition(NewTokenPosition(yyDollar[3].token))
			yyVAL.node = stmt.NewClass(name, yyDollar[1].list, nil, yyDollar[4].node, yyDollar[5].list, yyDollar[8].list, yyDollar[6].str).
				SetComments(yyDollar[2].token.Comments()).
				SetPosition(NewOptionalListTokensPosition(yyDollar[1].list, yyDollar[2].token, yyDollar[9].token))
		}
	case 168:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser/parser.y:560
		{
			name := node.NewIdentifier(yyDollar[2].token.Value).SetComments(yyDollar[2].token.Comments()).SetPosition(NewTokenPosition(yyDollar[2].token))
			yyVAL.node = stmt.NewClass(name, nil, nil, yyDollar[3].node, yyDollar[4].list, yyDollar[7].list, yyDollar[5].str).
				SetComments(yyDollar[1].token.Comments()).
				SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[8].token))
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:569
		{
			yyVAL.list = []node.Node{yyDollar[1].node}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:570
		{
			yyVAL.list = append(yyDollar[1].list, yyDollar[2].node)
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:574
		{
			yyVAL.node = node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:575
		{
			yyVAL.node = node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 173:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser/parser.y:580
		{
			name := node.NewIdentifier(yyDollar[2].token.Value).SetComments(yyDollar[2].token.Comments()).SetPosition(NewTokenPosition(yyDollar[2].token))
			yyVAL.node = stmt.NewTrait(name, yyDollar[5].list, yyDollar[3].str).
				SetComments(yyDollar[1].token.Comments()).
				SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[6].token))
		}
	case 174:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser/parser.y:590
		{
			name := node.NewIdentifier(yyDollar[2].token.Value).SetComments(yyDollar[2].token.Comments()).SetPosition(NewTokenPosition(yyDollar[2].token))
			yyVAL.node = stmt.NewInterface(name, yyDollar[3].list, yyDollar[6].list, yyDollar[4].str).
				SetComments(yyDollar[1].token.Comments()).
				SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[7].token))
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser/parser.y:599
		{
			yyVAL.node = nil
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:600
		{
			yyVAL.node = yyDollar[2].node
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser/parser.y:604
		{
			yyVAL.list = nil
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:605
		{
			yyVAL.list = yyDollar[2].list
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser/parser.y:609
		{
			yyVAL.list = nil
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:610
		{
			yyVAL.list = yyDollar[2].list
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:614
		{
			yyVAL.foreachVariable = foreachVariable{yyDollar[1].node, false}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:615
		{
			yyVAL.foreachVariable = foreachVariable{yyDollar[2].node, true}
		}
	case 183:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:616
		{
			yyVAL.foreachVariable = foreachVariable{expr.NewList(yyDollar[3].list).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[4].token)), false}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:617
		{
			yyVAL.foreachVariable = foreachVariable{expr.NewShortList(yyDollar[2].list).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[3].token)), false}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:621
		{
			yyVAL.node = yyDollar[1].node
		}
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:622
		{
			yyVAL.node = stmt.NewStmtList(yyDollar[2].list).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[4].token))
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:626
		{
			yyVAL.node = yyDollar[1].node
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:627
		{
			yyVAL.node = stmt.NewStmtList(yyDollar[2].list).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[4].token))
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:631
		{
			yyVAL.node = yyDollar[1].node
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:632
		{
			yyVAL.node = stmt.NewStmtList(yyDollar[2].list).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[4].token))
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:636
		{
			yyVAL.nodesWithEndToken = &nodesWithEndToken{yyDollar[2].list, yyDollar[3].token}
		}
	case 192:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:637
		{
			yyVAL.nodesWithEndToken = &nodesWithEndToken{yyDollar[3].list, yyDollar[4].token}
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:638
		{
			yyVAL.nodesWithEndToken = &nodesWithEndToken{yyDollar[2].list, yyDollar[4].token}
		}
	case 194:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser/parser.y:639
		{
			yyVAL.nodesWithEndToken = &nodesWithEndToken{yyDollar[3].list, yyDollar[5].token}
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser/parser.y:643
		{
			yyVAL.list = []node.Node{}
		}
	case 196:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser/parser.y:645
		{
			yyVAL.list = append(yyDollar[1].list, stmt.NewCase(yyDollar[3].node, yyDollar[5].list).SetComments(yyDollar[2].token.Comments()).SetPosition(NewTokenNodeListPosition(yyDollar[2].token, yyDollar[5].list)))
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:649
		{
			yyVAL.list = append(yyDollar[1].list, stmt.NewDefault(yyDollar[4].list).SetComments(yyDollar[2].token.Comments()).SetPosition(NewTokenNodeListPosition(yyDollar[2].token, yyDollar[4].list)))
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:660
		{
			yyVAL.node = yyDollar[1].node
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:661
		{
			yyVAL.node = stmt.NewStmtList(yyDollar[2].list).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[4].token))
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser/parser.y:665
		{
			yyVAL.node = stmt.NewIf(yyDollar[3].node, yyDollar[5].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[5].node))
		}
	case 203:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser/parser.y:667
		{
			_elseIf := stmt.NewElseIf(yyDollar[4].node, yyDollar[6].node).SetComments(yyDollar[2].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[2].token, yyDollar[6].node))
			yyVAL.node = yyDollar[1].node.(stmt.If).AddElseIf(_elseIf).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[6].node))
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:674
		{
			yyVAL.node = yyDollar[1].node
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:676
		{
			_else := stmt.NewElse(yyDollar[3].node).SetComments(yyDollar[2].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[2].token, yyDollar[3].node))
			yyVAL.node = yyDollar[1].node.(stmt.If).SetElse(_else).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 206:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser/parser.y:684
		{
			stmts := stmt.NewStmtList(yyDollar[6].list).SetComments(yyDollar[5].token.Comments()).SetPosition(NewNodeListPosition(yyDollar[6].list))
			yyVAL.node = stmt.NewAltIf(yyDollar[3].node, stmts).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodeListPosition(yyDollar[1].token, yyDollar[6].list))
		}
	case 207:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser/parser.y:689
		{
			stmts := stmt.NewStmtList(yyDollar[7].list).SetComments(yyDollar[6].token.Comments()).SetPosition(NewNodeListPosition(yyDollar[7].list))
			_elseIf := stmt.NewAltElseIf(yyDollar[4].node, stmts).SetComments(yyDollar[2].token.Comments()).SetPosition(NewTokenNodeListPosition(yyDollar[2].token, yyDollar[7].list))
			yyVAL.node = yyDollar[1].node.(stmt.AltIf).AddElseIf(_elseIf)
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:698
		{
			yyVAL.node = yyDollar[1].node.SetPosition(NewNodeTokenPosition(yyDollar[1].node, yyDollar[3].token))
		}
	case 209:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser/parser.y:702
		{
			stmts := stmt.NewStmtList(yyDollar[4].list).SetComments(yyDollar[3].token.Comments()).SetPosition(NewNodeListPosition(yyDollar[4].list))
			_else := stmt.NewAltElse(stmts).SetComments(yyDollar[2].token.Comments()).SetPosition(NewTokenNodeListPosition(yyDollar[2].token, yyDollar[4].list))
			yyVAL.node = yyDollar[1].node.(stmt.AltIf).SetElse(_else).SetPosition(NewNodeTokenPosition(yyDollar[1].node, yyDollar[6].token))
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:710
		{
			yyVAL.list = yyDollar[1].list
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser/parser.y:711
		{
			yyVAL.list = nil
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:715
		{
			yyVAL.list = []node.Node{yyDollar[1].node}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:716
		{
			yyVAL.list = append(yyDollar[1].list, yyDollar[3].node)
		}
	case 214:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:721
		{
			identifier := node.NewIdentifier(yyDollar[4].token.Value).SetComments(yyDollar[4].token.Comments()).SetPosition(NewTokenPosition(yyDollar[4].token))
			variable := expr.NewVariable(identifier).SetComments(yyDollar[4].token.Comments()).SetPosition(NewTokenPosition(yyDollar[4].token))
			if yyDollar[1].node != nil {
				yyVAL.node = node.NewParameter(yyDollar[1].node, variable, nil, yyDollar[2].boolWithToken.value, yyDollar[3].boolWithToken.value).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodeTokenPosition(yyDollar[1].node, yyDollar[4].token))
			} else if yyDollar[2].boolWithToken.value == true {
				yyVAL.node = node.NewParameter(yyDollar[1].node, variable, nil, yyDollar[2].boolWithToken.value, yyDollar[3].boolWithToken.value).SetComments(yyDollar[2].boolWithToken.token.Comments()).SetPosition(NewTokensPosition(*yyDollar[2].boolWithToken.token, yyDollar[4].token))
			} else if yyDollar[3].boolWithToken.value == true {
				yyVAL.node = node.NewParameter(yyDollar[1].node, variable, nil, yyDollar[2].boolWithToken.value, yyDollar[3].boolWithToken.value).SetComments(yyDollar[3].boolWithToken.token.Comments()).SetPosition(NewTokensPosition(*yyDollar[3].boolWithToken.token, yyDollar[4].token))
			} else {
				yyVAL.node = node.NewParameter(yyDollar[1].node, variable, nil, yyDollar[2].boolWithToken.value, yyDollar[3].boolWithToken.value).SetComments(yyDollar[4].token.Comments()).SetPosition(NewTokenPosition(yyDollar[4].token))
			}
		}
	case 215:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser/parser.y:735
		{
			identifier := node.NewIdentifier(yyDollar[4].token.Value).SetComments(yyDollar[4].token.Comments()).SetPosition(NewTokenPosition(yyDollar[4].token))
			variable := expr.NewVariable(identifier).SetComments(yyDollar[4].token.Comments()).SetPosition(NewTokenPosition(yyDollar[4].token))
			if yyDollar[1].node != nil {
				yyVAL.node = node.NewParameter(yyDollar[1].node, variable, yyDollar[6].node, yyDollar[2].boolWithToken.value, yyDollar[3].boolWithToken.value).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[6].node))
			} else if yyDollar[2].boolWithToken.value == true {
				yyVAL.node = node.NewParameter(yyDollar[1].node, variable, yyDollar[6].node, yyDollar[2].boolWithToken.value, yyDollar[3].boolWithToken.value).SetComments(yyDollar[2].boolWithToken.token.Comments()).SetPosition(NewTokenNodePosition(*yyDollar[2].boolWithToken.token, yyDollar[6].node))
			} else if yyDollar[3].boolWithToken.value == true {
				yyVAL.node = node.NewParameter(yyDollar[1].node, variable, yyDollar[6].node, yyDollar[2].boolWithToken.value, yyDollar[3].boolWithToken.value).SetComments(yyDollar[3].boolWithToken.token.Comments()).SetPosition(NewTokenNodePosition(*yyDollar[3].boolWithToken.token, yyDollar[6].node))
			} else {
				yyVAL.node = node.NewParameter(yyDollar[1].node, variable, yyDollar[6].node, yyDollar[2].boolWithToken.value, yyDollar[3].boolWithToken.value).SetComments(yyDollar[4].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[4].token, yyDollar[6].node))
			}
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser/parser.y:751
		{
			yyVAL.node = nil
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:752
		{
			yyVAL.node = yyDollar[1].node
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:756
		{
			yyVAL.node = yyDollar[1].node
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:757
		{
			yyVAL.node = node.NewNullable(yyDollar[2].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[2].node))
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:761
		{
			yyVAL.node = node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:762
		{
			yyVAL.node = node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:763
		{
			yyVAL.node = yyDollar[1].node
		}
	case 223:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser/parser.y:767
		{
			yyVAL.node = nil
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:768
		{
			yyVAL.node = yyDollar[2].node
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:772
		{
			yyVAL.nodesWithEndToken = &nodesWithEndToken{[]node.Node{}, yyDollar[2].token}
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:773
		{
			yyVAL.nodesWithEndToken = &nodesWithEndToken{yyDollar[2].list, yyDollar[4].token}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:777
		{
			yyVAL.list = []node.Node{yyDollar[1].node}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:778
		{
			yyVAL.list = append(yyDollar[1].list, yyDollar[3].node)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:782
		{
			yyVAL.node = node.NewArgument(yyDollar[1].node, false).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodePosition(yyDollar[1].node))
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:783
		{
			yyVAL.node = node.NewArgument(yyDollar[2].node, true).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[2].node))
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:787
		{
			yyVAL.list = append(yyDollar[1].list, yyDollar[3].node)
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:788
		{
			yyVAL.list = []node.Node{yyDollar[1].node}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:792
		{
			yyVAL.node = yyDollar[1].node
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:796
		{
			yyVAL.list = append(yyDollar[1].list, yyDollar[3].node)
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:797
		{
			yyVAL.list = []node.Node{yyDollar[1].node}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:802
		{
			identifier := node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
			variable := expr.NewVariable(identifier).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
			yyVAL.node = stmt.NewStaticVar(variable, nil).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:808
		{
			identifier := node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
			variable := expr.NewVariable(identifier).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
			yyVAL.node = stmt.NewStaticVar(variable, yyDollar[3].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[3].node))
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:816
		{
			yyVAL.list = append(yyDollar[1].list, yyDollar[2].node)
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser/parser.y:817
		{
			yyVAL.list = []node.Node{}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:821
		{
			yyVAL.node = stmt.NewPropertyList(yyDollar[1].list, yyDollar[2].list).SetComments(ListGetFirstNodeComments(yyDollar[1].list)).SetPosition(NewNodeListTokenPosition(yyDollar[1].list, yyDollar[3].token))
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:822
		{
			yyVAL.node = stmt.NewClassConstList(yyDollar[1].list, yyDollar[3].list).SetComments(ListGetFirstNodeComments(yyDollar[1].list)).SetPosition(NewOptionalListTokensPosition(yyDollar[1].list, yyDollar[2].token, yyDollar[4].token))
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:823
		{
			yyVAL.node = stmt.NewTraitUse(yyDollar[2].list, yyDollar[3].nodesWithEndToken.nodes).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[3].nodesWithEndToken.endToken))
		}
	case 243:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser/parser.y:825
		{
			name := node.NewIdentifier(yyDollar[4].token.Value).SetComments(yyDollar[4].token.Comments()).SetPosition(NewTokenPosition(yyDollar[4].token))
			yyVAL.node = stmt.NewClassMethod(name, yyDollar[1].list, yyDollar[3].boolWithToken.value, yyDollar[7].list, yyDollar[9].node, yyDollar[10].nodesWithEndToken.nodes, yyDollar[5].str).
				SetComments(ListGetFirstNodeComments(yyDollar[1].list)).
				SetPosition(NewOptionalListTokensPosition(yyDollar[1].list, yyDollar[2].token, yyDollar[10].nodesWithEndToken.endToken))
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:834
		{
			yyVAL.list = []node.Node{yyDollar[1].node}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:835
		{
			yyVAL.list = append(yyDollar[1].list, yyDollar[3].node)
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:839
		{
			yyVAL.nodesWithEndToken = &nodesWithEndToken{nil, yyDollar[1].token}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:840
		{
			yyVAL.nodesWithEndToken = &nodesWithEndToken{nil, yyDollar[2].token}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:841
		{
			yyVAL.nodesWithEndToken = &nodesWithEndToken{yyDollar[2].list, yyDollar[3].token}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:845
		{
			yyVAL.list = []node.Node{yyDollar[1].node}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:846
		{
			yyVAL.list = append(yyDollar[1].list, yyDollar[2].node)
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:850
		{
			yyVAL.node = yyDollar[1].node
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:851
		{
			yyVAL.node = yyDollar[1].node
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:856
		{
			name := name.NewName(yyDollar[3].list).SetComments(ListGetFirstNodeComments(yyDollar[3].list)).SetPosition(NewNodeListPosition(yyDollar[3].list))
			yyVAL.node = stmt.NewTraitUsePrecedence(yyDollar[1].node, name).
				SetComments(yyDollar[1].node.Comments()).
				SetPosition(NewNodeNodeListPosition(yyDollar[1].node, yyDollar[3].list))
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:866
		{
			alias := node.NewIdentifier(yyDollar[3].token.Value).SetComments(yyDollar[3].token.Comments()).SetPosition(NewTokenPosition(yyDollar[3].token))
			yyVAL.node = stmt.NewTraitUseAlias(yyDollar[1].node, nil, alias).
				SetComments(yyDollar[1].node.Comments()).
				SetPosition(NewNodeTokenPosition(yyDollar[1].node, yyDollar[3].token))
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:873
		{
			alias := node.NewIdentifier(yyDollar[3].token.Value).SetComments(yyDollar[3].token.Comments()).SetPosition(NewTokenPosition(yyDollar[3].token))
			yyVAL.node = stmt.NewTraitUseAlias(yyDollar[1].node, nil, alias).
				SetComments(yyDollar[1].node.Comments()).
				SetPosition(NewNodeTokenPosition(yyDollar[1].node, yyDollar[3].token))
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:880
		{
			alias := node.NewIdentifier(yyDollar[4].token.Value).SetComments(yyDollar[4].token.Comments()).SetPosition(NewTokenPosition(yyDollar[4].token))
			yyVAL.node = stmt.NewTraitUseAlias(yyDollar[1].node, yyDollar[3].node, alias).
				SetComments(yyDollar[1].node.Comments()).
				SetPosition(NewNodeTokenPosition(yyDollar[1].node, yyDollar[4].token))
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:887
		{
			yyVAL.node = stmt.NewTraitUseAlias(yyDollar[1].node, yyDollar[3].node, nil).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:894
		{
			name := node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
			yyVAL.node = stmt.NewTraitMethodRef(nil, name).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:898
		{
			yyVAL.node = yyDollar[1].node
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:903
		{
			target := node.NewIdentifier(yyDollar[3].token.Value).SetComments(yyDollar[3].token.Comments()).SetPosition(NewTokenPosition(yyDollar[3].token))
			yyVAL.node = stmt.NewTraitMethodRef(yyDollar[1].node, target).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodeTokenPosition(yyDollar[1].node, yyDollar[3].token))
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:910
		{
			yyVAL.nodesWithEndToken = &nodesWithEndToken{nil, yyDollar[1].token}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:911
		{
			yyVAL.nodesWithEndToken = &nodesWithEndToken{yyDollar[2].list, yyDollar[3].token}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:915
		{
			yyVAL.list = yyDollar[1].list
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:916
		{
			yyVAL.list = []node.Node{node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))}
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser/parser.y:920
		{
			yyVAL.list = nil
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:921
		{
			yyVAL.list = yyDollar[1].list
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:925
		{
			yyVAL.list = []node.Node{yyDollar[1].node}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:926
		{
			yyVAL.list = append(yyDollar[1].list, yyDollar[2].node)
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:930
		{
			yyVAL.node = node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:931
		{
			yyVAL.node = node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:932
		{
			yyVAL.node = node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:933
		{
			yyVAL.node = node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:934
		{
			yyVAL.node = node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:935
		{
			yyVAL.node = node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:939
		{
			yyVAL.list = append(yyDollar[1].list, yyDollar[3].node)
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:940
		{
			yyVAL.list = []node.Node{yyDollar[1].node}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:945
		{
			identifier := node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
			variable := expr.NewVariable(identifier).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
			yyVAL.node = stmt.NewProperty(variable, nil, yyDollar[2].str).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:951
		{
			identifier := node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
			variable := expr.NewVariable(identifier).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
			yyVAL.node = stmt.NewProperty(variable, yyDollar[3].node, yyDollar[4].str).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[3].node))
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:959
		{
			yyVAL.list = append(yyDollar[1].list, yyDollar[3].node)
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:960
		{
			yyVAL.list = []node.Node{yyDollar[1].node}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:965
		{
			name := node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
			yyVAL.node = stmt.NewConstant(name, yyDollar[3].node, yyDollar[4].str).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[3].node))
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:973
		{
			name := node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
			yyVAL.node = stmt.NewConstant(name, yyDollar[3].node, yyDollar[4].str).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[3].node))
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:980
		{
			yyVAL.list = append(yyDollar[1].list, yyDollar[3].node)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:981
		{
			yyVAL.list = []node.Node{yyDollar[1].node}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:985
		{
			yyVAL.node = yyDollar[1].node
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser/parser.y:989
		{
			yyVAL.list = nil
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:990
		{
			yyVAL.list = yyDollar[1].list
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:993
		{
			yyVAL.list = append(yyDollar[1].list, yyDollar[3].node)
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:994
		{
			yyVAL.list = []node.Node{yyDollar[1].node}
		}
	case 290:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser/parser.y:999
		{
			if yyDollar[2].nodesWithEndToken != nil {
				yyVAL.node = stmt.NewClass(nil, nil, yyDollar[2].nodesWithEndToken.nodes, yyDollar[3].node, yyDollar[4].list, yyDollar[7].list, yyDollar[5].str).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[8].token))
			} else {
				yyVAL.node = stmt.NewClass(nil, nil, nil, yyDollar[3].node, yyDollar[4].list, yyDollar[7].list, yyDollar[5].str).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[8].token))
			}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1010
		{
			if yyDollar[3].nodesWithEndToken != nil {
				yyVAL.node = expr.NewNew(yyDollar[2].node, yyDollar[3].nodesWithEndToken.nodes).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[3].nodesWithEndToken.endToken))
			} else {
				yyVAL.node = expr.NewNew(yyDollar[2].node, nil).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[2].node))
			}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1017
		{
			yyVAL.node = expr.NewNew(yyDollar[2].node, nil)
		}
	case 293:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser/parser.y:1022
		{
			list := expr.NewList(yyDollar[3].list).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[4].token))
			yyVAL.node = assign_op.NewAssign(list, yyDollar[6].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[6].node))
		}
	case 294:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser/parser.y:1027
		{
			shortList := expr.NewShortList(yyDollar[2].list).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[3].token))
			yyVAL.node = assign_op.NewAssign(shortList, yyDollar[5].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[5].node))
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1031
		{
			yyVAL.node = assign_op.NewAssign(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:1032
		{
			yyVAL.node = assign_op.NewAssignRef(yyDollar[1].node, yyDollar[4].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[4].node))
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1033
		{
			yyVAL.node = expr.NewClone(yyDollar[2].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[2].node))
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1034
		{
			yyVAL.node = assign_op.NewPlus(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1035
		{
			yyVAL.node = assign_op.NewMinus(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1036
		{
			yyVAL.node = assign_op.NewMul(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1037
		{
			yyVAL.node = assign_op.NewPow(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1038
		{
			yyVAL.node = assign_op.NewDiv(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1039
		{
			yyVAL.node = assign_op.NewConcat(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1040
		{
			yyVAL.node = assign_op.NewMod(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1041
		{
			yyVAL.node = assign_op.NewBitwiseAnd(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1042
		{
			yyVAL.node = assign_op.NewBitwiseOr(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1043
		{
			yyVAL.node = assign_op.NewBitwiseXor(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1044
		{
			yyVAL.node = assign_op.NewShiftLeft(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1045
		{
			yyVAL.node = assign_op.NewShiftRight(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1046
		{
			yyVAL.node = expr.NewPostInc(yyDollar[1].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodeTokenPosition(yyDollar[1].node, yyDollar[2].token))
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1047
		{
			yyVAL.node = expr.NewPreInc(yyDollar[2].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[2].node))
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1048
		{
			yyVAL.node = expr.NewPostDec(yyDollar[1].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodeTokenPosition(yyDollar[1].node, yyDollar[2].token))
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1049
		{
			yyVAL.node = expr.NewPreDec(yyDollar[2].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[2].node))
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1050
		{
			yyVAL.node = binary_op.NewBooleanOr(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1051
		{
			yyVAL.node = binary_op.NewBooleanAnd(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1052
		{
			yyVAL.node = binary_op.NewLogicalOr(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1053
		{
			yyVAL.node = binary_op.NewLogicalAnd(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1054
		{
			yyVAL.node = binary_op.NewLogicalXor(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1055
		{
			yyVAL.node = binary_op.NewBitwiseOr(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1056
		{
			yyVAL.node = binary_op.NewBitwiseAnd(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1057
		{
			yyVAL.node = binary_op.NewBitwiseXor(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1058
		{
			yyVAL.node = binary_op.NewConcat(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1059
		{
			yyVAL.node = binary_op.NewPlus(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1060
		{
			yyVAL.node = binary_op.NewMinus(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1061
		{
			yyVAL.node = binary_op.NewMul(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1062
		{
			yyVAL.node = binary_op.NewPow(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1063
		{
			yyVAL.node = binary_op.NewDiv(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1064
		{
			yyVAL.node = binary_op.NewMod(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1065
		{
			yyVAL.node = binary_op.NewShiftLeft(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1066
		{
			yyVAL.node = binary_op.NewShiftRight(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1067
		{
			yyVAL.node = expr.NewUnaryPlus(yyDollar[2].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[2].node))
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1068
		{
			yyVAL.node = expr.NewUnaryMinus(yyDollar[2].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[2].node))
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1069
		{
			yyVAL.node = expr.NewBooleanNot(yyDollar[2].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[2].node))
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1070
		{
			yyVAL.node = expr.NewBitwiseNot(yyDollar[2].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[2].node))
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1071
		{
			yyVAL.node = binary_op.NewIdentical(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1072
		{
			yyVAL.node = binary_op.NewNotIdentical(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1073
		{
			yyVAL.node = binary_op.NewEqual(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1074
		{
			yyVAL.node = binary_op.NewNotEqual(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1075
		{
			yyVAL.node = binary_op.NewSmaller(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1076
		{
			yyVAL.node = binary_op.NewSmallerOrEqual(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1077
		{
			yyVAL.node = binary_op.NewGreater(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1078
		{
			yyVAL.node = binary_op.NewGreaterOrEqual(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1079
		{
			yyVAL.node = binary_op.NewSpaceship(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1080
		{
			yyVAL.node = expr.NewInstanceOf(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1081
		{
			yyVAL.node = yyDollar[2].node
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1082
		{
			yyVAL.node = yyDollar[1].node
		}
	case 347:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser/parser.y:1083
		{
			yyVAL.node = expr.NewTernary(yyDollar[1].node, yyDollar[3].node, yyDollar[5].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[5].node))
		}
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:1084
		{
			yyVAL.node = expr.NewTernary(yyDollar[1].node, nil, yyDollar[4].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[4].node))
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1085
		{
			yyVAL.node = binary_op.NewCoalesce(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1086
		{
			yyVAL.node = yyDollar[1].node
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1087
		{
			yyVAL.node = cast.NewCastInt(yyDollar[2].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[2].node))
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1088
		{
			yyVAL.node = cast.NewCastDouble(yyDollar[2].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[2].node))
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1089
		{
			yyVAL.node = cast.NewCastString(yyDollar[2].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[2].node))
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1090
		{
			yyVAL.node = cast.NewCastArray(yyDollar[2].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[2].node))
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1091
		{
			yyVAL.node = cast.NewCastObject(yyDollar[2].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[2].node))
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1092
		{
			yyVAL.node = cast.NewCastBool(yyDollar[2].node.SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[2].node)))
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1093
		{
			yyVAL.node = cast.NewCastUnset(yyDollar[2].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[2].node))
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1094
		{
			yyVAL.node = expr.NewExit(yyDollar[2].node, strings.EqualFold(yyDollar[1].token.Value, "die")).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[2].node))
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1095
		{
			yyVAL.node = expr.NewErrorSuppress(yyDollar[2].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[2].node))
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1096
		{
			yyVAL.node = yyDollar[1].node
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1097
		{
			yyVAL.node = expr.NewShellExec(yyDollar[2].list).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[3].token))
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1098
		{
			yyVAL.node = expr.NewPrint(yyDollar[2].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[2].node))
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1099
		{
			yyVAL.node = expr.NewYield(nil, nil).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1100
		{
			yyVAL.node = expr.NewYield(nil, yyDollar[2].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[2].node))
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:1101
		{
			yyVAL.node = expr.NewYield(yyDollar[2].node, yyDollar[4].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[4].node))
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1102
		{
			yyVAL.node = expr.NewYieldFrom(yyDollar[2].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[2].node))
		}
	case 367:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser/parser.y:1104
		{
			yyVAL.node = expr.NewClosure(yyDollar[5].list, yyDollar[7].list, yyDollar[8].node, yyDollar[10].list, false, yyDollar[2].boolWithToken.value, yyDollar[3].str).
				SetComments(yyDollar[1].token.Comments()).
				SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[11].token))
		}
	case 368:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line parser/parser.y:1110
		{
			yyVAL.node = expr.NewClosure(yyDollar[6].list, yyDollar[8].list, yyDollar[9].node, yyDollar[11].list, true, yyDollar[3].boolWithToken.value, yyDollar[4].str).
				SetComments(yyDollar[1].token.Comments()).
				SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[12].token))
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser/parser.y:1118
		{
			yyVAL.str = yylex.(*lexer).phpDocComment
			yylex.(*lexer).phpDocComment = ""
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser/parser.y:1122
		{
			yyVAL.boolWithToken = boolWithToken{false, nil}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1123
		{
			yyVAL.boolWithToken = boolWithToken{true, &yyDollar[1].token}
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser/parser.y:1127
		{
			yyVAL.list = []node.Node{}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:1128
		{
			yyVAL.list = yyDollar[3].list
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1132
		{
			yyVAL.list = append(yyDollar[1].list, yyDollar[3].node)
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1133
		{
			yyVAL.list = []node.Node{yyDollar[1].node}
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1138
		{
			identifier := node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
			variable := expr.NewVariable(identifier).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
			yyVAL.node = expr.NewClusureUse(variable, false).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1144
		{
			identifier := node.NewIdentifier(yyDollar[2].token.Value).SetComments(yyDollar[2].token.Comments()).SetPosition(NewTokenPosition(yyDollar[2].token))
			variable := expr.NewVariable(identifier).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[2].token))
			yyVAL.node = expr.NewClusureUse(variable, true).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[2].token))
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1153
		{
			yyVAL.node = expr.NewFunctionCall(yyDollar[1].node, yyDollar[2].nodesWithEndToken.nodes).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodeTokenPosition(yyDollar[1].node, yyDollar[2].nodesWithEndToken.endToken))
		}
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:1157
		{
			yyVAL.node = expr.NewStaticCall(yyDollar[1].node, yyDollar[3].node, yyDollar[4].nodesWithEndToken.nodes).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodeTokenPosition(yyDollar[1].node, yyDollar[4].nodesWithEndToken.endToken))
		}
	case 380:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:1161
		{
			yyVAL.node = expr.NewStaticCall(yyDollar[1].node, yyDollar[3].node, yyDollar[4].nodesWithEndToken.nodes).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodeTokenPosition(yyDollar[1].node, yyDollar[4].nodesWithEndToken.endToken))
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1165
		{
			yyVAL.node = expr.NewFunctionCall(yyDollar[1].node, yyDollar[2].nodesWithEndToken.nodes).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodeTokenPosition(yyDollar[1].node, yyDollar[2].nodesWithEndToken.endToken))
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1171
		{
			yyVAL.node = node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1172
		{
			yyVAL.node = yyDollar[1].node
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1176
		{
			yyVAL.node = yyDollar[1].node
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1177
		{
			yyVAL.node = yyDollar[1].node
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser/parser.y:1181
		{
			yyVAL.node = nil
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1182
		{
			yyVAL.node = yyDollar[2].node
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser/parser.y:1186
		{
			yyVAL.list = []node.Node{}
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1187
		{
			yyVAL.list = []node.Node{scalar.NewEncapsedStringPart(yyDollar[1].token.Value)}
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1188
		{
			yyVAL.list = yyDollar[1].list
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser/parser.y:1192
		{
			yyVAL.nodesWithEndToken = nil
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1193
		{
			yyVAL.nodesWithEndToken = yyDollar[1].nodesWithEndToken
		}
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:1197
		{
			yyVAL.node = expr.NewArray(yyDollar[3].list).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[4].token))
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1198
		{
			yyVAL.node = expr.NewShortArray(yyDollar[2].list).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[3].token))
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1199
		{
			yyVAL.node = scalar.NewString(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1203
		{
			yyVAL.node = scalar.NewLnumber(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1204
		{
			yyVAL.node = scalar.NewDnumber(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1205
		{
			yyVAL.node = scalar.NewMagicConstant(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1206
		{
			yyVAL.node = scalar.NewMagicConstant(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1207
		{
			yyVAL.node = scalar.NewMagicConstant(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1208
		{
			yyVAL.node = scalar.NewMagicConstant(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1209
		{
			yyVAL.node = scalar.NewMagicConstant(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1210
		{
			yyVAL.node = scalar.NewMagicConstant(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1211
		{
			yyVAL.node = scalar.NewMagicConstant(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1212
		{
			yyVAL.node = scalar.NewMagicConstant(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1214
		{
			yyVAL.node = scalar.NewString(yyDollar[2].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[3].token)) /* TODO: mark as Heredoc*/
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1216
		{
			yyVAL.node = scalar.NewEncapsed(nil).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[2].token))
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1217
		{
			yyVAL.node = scalar.NewEncapsed(yyDollar[2].list).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[3].token))
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1218
		{
			yyVAL.node = scalar.NewEncapsed(yyDollar[2].list).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[3].token))
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1219
		{
			yyVAL.node = yyDollar[1].node
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1220
		{
			yyVAL.node = yyDollar[1].node
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1224
		{
			yyVAL.node = expr.NewConstFetch(yyDollar[1].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodePosition(yyDollar[1].node))
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1226
		{
			target := node.NewIdentifier(yyDollar[3].token.Value).SetComments(yyDollar[3].token.Comments()).SetPosition(NewTokenPosition(yyDollar[3].token))
			yyVAL.node = expr.NewClassConstFetch(yyDollar[1].node, target).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodeTokenPosition(yyDollar[1].node, yyDollar[3].token))
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1231
		{
			target := node.NewIdentifier(yyDollar[3].token.Value).SetComments(yyDollar[3].token.Comments()).SetPosition(NewTokenPosition(yyDollar[3].token))
			yyVAL.node = expr.NewClassConstFetch(yyDollar[1].node, target).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodeTokenPosition(yyDollar[1].node, yyDollar[3].token))
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1238
		{
			yyVAL.node = yyDollar[1].node
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1239
		{
			yyVAL.node = yyDollar[1].node
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser/parser.y:1243
		{
			yyVAL.node = nil
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1244
		{
			yyVAL.node = yyDollar[1].node
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1248
		{
			yyVAL.node = yyDollar[1].node
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1252
		{
			yyVAL.node = yyDollar[1].node
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1253
		{
			yyVAL.node = yyDollar[2].node
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1254
		{
			yyVAL.node = yyDollar[1].node
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1258
		{
			yyVAL.node = yyDollar[1].node
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1259
		{
			yyVAL.node = yyDollar[2].node
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1260
		{
			yyVAL.node = yyDollar[1].node
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1264
		{
			yyVAL.node = yyDollar[1].node
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:1265
		{
			yyVAL.node = expr.NewArrayDimFetch(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodeTokenPosition(yyDollar[1].node, yyDollar[4].token))
		}
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:1266
		{
			yyVAL.node = expr.NewArrayDimFetch(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodeTokenPosition(yyDollar[1].node, yyDollar[4].token))
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:1267
		{
			yyVAL.node = expr.NewArrayDimFetch(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodeTokenPosition(yyDollar[1].node, yyDollar[4].token))
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:1269
		{
			yyVAL.node = expr.NewMethodCall(yyDollar[1].node, yyDollar[3].node, yyDollar[4].nodesWithEndToken.nodes).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodeTokenPosition(yyDollar[1].node, yyDollar[4].nodesWithEndToken.endToken))
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1270
		{
			yyVAL.node = yyDollar[1].node
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1274
		{
			yyVAL.node = yyDollar[1].node
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1275
		{
			yyVAL.node = yyDollar[1].node
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1276
		{
			yyVAL.node = expr.NewPropertyFetch(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1280
		{
			yyVAL.node = expr.NewVariable(node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:1281
		{
			yyVAL.node = expr.NewVariable(yyDollar[3].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[4].token))
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1282
		{
			yyVAL.node = expr.NewVariable(yyDollar[2].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[2].node))
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1287
		{
			yyVAL.node = expr.NewStaticPropertyFetch(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1291
		{
			yyVAL.node = expr.NewStaticPropertyFetch(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1297
		{
			yyVAL.node = yyDollar[1].node
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:1298
		{
			yyVAL.node = expr.NewArrayDimFetch(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodeTokenPosition(yyDollar[1].node, yyDollar[4].token))
		}
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:1299
		{
			yyVAL.node = expr.NewArrayDimFetch(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodeTokenPosition(yyDollar[1].node, yyDollar[4].token))
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1300
		{
			yyVAL.node = expr.NewPropertyFetch(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1302
		{
			yyVAL.node = expr.NewStaticPropertyFetch(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1306
		{
			yyVAL.node = expr.NewStaticPropertyFetch(yyDollar[1].node, yyDollar[3].node).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1312
		{
			yyVAL.node = node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1313
		{
			yyVAL.node = yyDollar[2].node
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1314
		{
			yyVAL.node = yyDollar[1].node
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1318
		{
			yyVAL.node = node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1319
		{
			yyVAL.node = yyDollar[2].node
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1320
		{
			yyVAL.node = yyDollar[1].node
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1325
		{
			if yyDollar[1].list[len(yyDollar[1].list)-1] == nil {
				yyVAL.list = yyDollar[1].list[:len(yyDollar[1].list)-1]
			} else {
				yyVAL.list = yyDollar[1].list
			}
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser/parser.y:1335
		{
			yyVAL.node = nil
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1336
		{
			yyVAL.node = yyDollar[1].node
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1341
		{
			yyVAL.list = append(yyDollar[1].list, yyDollar[3].node)
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1342
		{
			yyVAL.list = []node.Node{yyDollar[1].node}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1346
		{
			yyVAL.node = expr.NewArrayItem(yyDollar[1].node, yyDollar[3].node, false).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[3].node))
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1347
		{
			yyVAL.node = expr.NewArrayItem(nil, yyDollar[1].node, false).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodePosition(yyDollar[1].node))
		}
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:1348
		{
			yyVAL.node = expr.NewArrayItem(yyDollar[1].node, yyDollar[4].node, true).SetComments(yyDollar[1].node.Comments()).SetPosition(NewNodesPosition(yyDollar[1].node, yyDollar[4].node))
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1349
		{
			yyVAL.node = expr.NewArrayItem(nil, yyDollar[2].node, true).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[2].node))
		}
	case 461:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser/parser.y:1351
		{
			// TODO: Cannot use list() as standalone expression
			list := expr.NewList(yyDollar[5].list).SetComments(yyDollar[3].token.Comments()).SetPosition(NewTokensPosition(yyDollar[3].token, yyDollar[6].token))
			yyVAL.node = expr.NewArrayItem(yyDollar[1].node, list, false).
				SetComments(yyDollar[1].node.Comments()).
				SetPosition(NewNodeTokenPosition(yyDollar[1].node, yyDollar[6].token))
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:1359
		{
			// TODO: Cannot use list() as standalone expression
			list := expr.NewList(yyDollar[3].list).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[4].token))
			yyVAL.node = expr.NewArrayItem(nil, list, false).
				SetComments(yyDollar[1].token.Comments()).
				SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[4].token))
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1369
		{
			yyVAL.list = append(yyDollar[1].list, yyDollar[2].node)
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1370
		{
			yyVAL.list = append(yyDollar[1].list, scalar.NewEncapsedStringPart(yyDollar[2].token.Value).SetComments(yyDollar[2].token.Comments()).SetPosition(NewTokenPosition(yyDollar[2].token)))
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1371
		{
			yyVAL.list = []node.Node{yyDollar[1].node}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1372
		{
			yyVAL.list = []node.Node{scalar.NewEncapsedStringPart(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token)), yyDollar[2].node}
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1377
		{
			name := node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
			yyVAL.node = expr.NewVariable(name).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:1382
		{
			identifier := node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
			variable := expr.NewVariable(identifier).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
			yyVAL.node = expr.NewArrayDimFetch(variable, yyDollar[3].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[4].token))
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1388
		{
			identifier := node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
			variable := expr.NewVariable(identifier).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
			yyVAL.node = expr.NewPropertyFetch(variable, node.NewIdentifier(yyDollar[3].token.Value).SetComments(yyDollar[3].token.Comments()).SetPosition(NewTokenPosition(yyDollar[3].token))).
				SetComments(yyDollar[1].token.Comments()).
				SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[3].token))
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1396
		{
			yyVAL.node = expr.NewVariable(yyDollar[2].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[3].token))
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1400
		{
			name := node.NewIdentifier(yyDollar[2].token.Value).SetComments(yyDollar[2].token.Comments()).SetPosition(NewTokenPosition(yyDollar[2].token))
			yyVAL.node = expr.NewVariable(name).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[3].token))
		}
	case 472:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser/parser.y:1405
		{
			identifier := node.NewIdentifier(yyDollar[2].token.Value).SetComments(yyDollar[2].token.Comments()).SetPosition(NewTokenPosition(yyDollar[2].token))
			variable := expr.NewVariable(identifier).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[2].token))
			yyVAL.node = expr.NewArrayDimFetch(variable, yyDollar[4].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[6].token))
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1410
		{
			yyVAL.node = yyDollar[2].node
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1414
		{
			yyVAL.node = scalar.NewString(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1418
		{
			// TODO: add option to handle 64 bit integer
			if _, err := strconv.Atoi(yyDollar[1].token.Value); err == nil {
				yyVAL.node = scalar.NewLnumber(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
			} else {
				yyVAL.node = scalar.NewString(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
			}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1427
		{
			// TODO: add option to handle 64 bit integer
			if _, err := strconv.Atoi(yyDollar[2].token.Value); err == nil {
				lnumber := scalar.NewLnumber(yyDollar[2].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[2].token))
				yyVAL.node = expr.NewUnaryMinus(lnumber).
					SetComments(yyDollar[1].token.Comments()).
					SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[2].token))
			} else {
				yyDollar[2].token.Value = "-" + yyDollar[2].token.Value
				yyVAL.node = scalar.NewString(yyDollar[2].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[2].token))
			}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1440
		{
			identifier := node.NewIdentifier(yyDollar[1].token.Value).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
			yyVAL.node = expr.NewVariable(identifier).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenPosition(yyDollar[1].token))
		}
	case 478:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser/parser.y:1447
		{
			yyVAL.node = expr.NewIsset(yyDollar[3].list).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[5].token))
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:1448
		{
			yyVAL.node = expr.NewEmpty(yyDollar[3].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[4].token))
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1449
		{
			yyVAL.node = expr.NewInclude(yyDollar[2].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[2].node))
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1450
		{
			yyVAL.node = expr.NewIncludeOnce(yyDollar[2].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[2].node))
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser/parser.y:1451
		{
			yyVAL.node = expr.NewEval(yyDollar[3].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokensPosition(yyDollar[1].token, yyDollar[4].token))
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1452
		{
			yyVAL.node = expr.NewRequire(yyDollar[2].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[2].node))
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser/parser.y:1453
		{
			yyVAL.node = expr.NewRequireOnce(yyDollar[2].node).SetComments(yyDollar[1].token.Comments()).SetPosition(NewTokenNodePosition(yyDollar[1].token, yyDollar[2].node))
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1457
		{
			yyVAL.list = []node.Node{yyDollar[1].node}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser/parser.y:1458
		{
			yyVAL.list = append(yyDollar[1].list, yyDollar[3].node)
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser/parser.y:1462
		{
			yyVAL.node = yyDollar[1].node
		}
	}
	goto yystack /* stack new state and value */
}
